.TH "vector_extract.h" 3 "Mon Nov 8 2010" "Version 1" "CS684_course_project_group5" \" -*- nroff -*-
.ad l
.nh
.SH NAME
vector_extract.h \- 
.SH SYNOPSIS
.br
.PP
.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBPI\fP   3.14159265"
.br
.ti -1c
.RI "#define \fBMAX_HOP\fP   4"
.br
.ti -1c
.RI "#define \fBHEIGHT\fP   \fBh\fP"
.br
.ti -1c
.RI "#define \fBWIDTH\fP   \fBw\fP"
.br
.ti -1c
.RI "#define \fBTHRESH_M\fP   0.7"
.br
.ti -1c
.RI "#define \fBTHRESH_ANGLE\fP   10"
.br
.ti -1c
.RI "#define \fBLONG_DISTANCE_THRESH\fP   100"
.br
.ti -1c
.RI "#define \fBnull\fP   '\\0'"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum { \fBRIGHT\fP, \fBLEFT\fP }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBpoint\fP \fBfind_neighbour\fP (char **, \fBpoint\fP)"
.br
.ti -1c
.RI "list< \fBpoint\fP > \fBtraverse_black_line\fP (char **, \fBpoint\fP)"
.br
.ti -1c
.RI "void \fBdisplay_image\fP (char **)"
.br
.ti -1c
.RI "char ** \fBmark_as_visited\fP (char **, \fBpoint\fP, \fBpoint\fP)"
.br
.ti -1c
.RI "list< \fBpoint\fP > \fBappriximate_straight_line\fP (list< \fBpoint\fP >, int)"
.br
.ti -1c
.RI "list< double > \fBfind_direction_vector\fP (list< \fBpoint\fP >)"
.br
.ti -1c
.RI "double \fBtan_inverse\fP (double)"
.br
.ti -1c
.RI "list< \fBpoint\fP > \fBStartPoints\fP (IplImage *, char **)"
.br
.ti -1c
.RI "bool \fBfilter1\fP (char **, int, int)"
.br
.ti -1c
.RI "void \fBdisplay_image\fP (IplImage *img)"
.br
.ti -1c
.RI "void \fBcreate_refined_file\fP (list< \fBpoint\fP > path)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "int \fBh\fP"
.br
.ti -1c
.RI "int \fBw\fP"
.br
.ti -1c
.RI "enum  { ... }  \fBTURN\fP"
.br
.in -1c
.SH "Define Documentation"
.PP 
.SS "#define HEIGHT   \fBh\fP"
.PP
Definition at line 3 of file vector_extract.h.
.SS "#define LONG_DISTANCE_THRESH   100"
.PP
Definition at line 7 of file vector_extract.h.
.SS "#define MAX_HOP   4"
.PP
Definition at line 2 of file vector_extract.h.
.SS "#define null   '\\0'"
.PP
Definition at line 8 of file vector_extract.h.
.SS "#define PI   3.14159265"
.PP
Definition at line 1 of file vector_extract.h.
.SS "#define THRESH_ANGLE   10"
.PP
Definition at line 6 of file vector_extract.h.
.SS "#define THRESH_M   0.7"
.PP
Definition at line 5 of file vector_extract.h.
.SS "#define WIDTH   \fBw\fP"
.PP
Definition at line 4 of file vector_extract.h.
.SH "Enumeration Type Documentation"
.PP 
.SS "anonymous enum"
.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fIRIGHT \fP\fP
.TP
\fB\fILEFT \fP\fP

.PP
Definition at line 16 of file vector_extract.h.
.PP
.nf
{RIGHT,LEFT}TURN;
.fi
.SH "Function Documentation"
.PP 
.SS "list< \fBpoint\fP > appriximate_straight_line (list< \fBpoint\fP > path, int long_distance_thresh)"Returns the vectors constructed from the given path 
.PP
Definition at line 199 of file vector_extract.h.
.PP
.nf
{
        int refined_point_iterator=0;
        point f_point,prev_point;
        double m;
        double angle,delta_angle,mean_angle=0;
        double mean_slope=0; // Mean of the slopes of the points in between two feature points.
        double count_omit_point=0; //counts how many points are there in between two feature points. made double to make mean_slope calculation
        
        list<point> refined_path;
        list<point>::iterator it = path.begin();
        refined_path.push_back (*it);
        f_point = *it;
        prev_point = f_point;
        it++;
        if(it==path.end())
                return path;
        mean_angle= it->angleBetweenPoints(f_point);//tan_inverse((*it).slope (f_point));

        for (;it!=path.end();it++)
        {
                //cout<<'\npath[i]= '; (*it).display(); 
                //cout << ' f_point= '; f_point.display();
                count_omit_point++;
                m = f_point.slope (*it);
                angle = f_point.angleBetweenPoints(*it);//tan_inverse (m);
                
                delta_angle = mean_angle>angle ? mean_angle-angle : angle-mean_angle;

                //printf ('  m=%4.2f mean_angle=%4.2f delta_angle=%4.2f ',m,mean_angle,delta_angle);
                // Select a new feature point when
                //  ---slope with f_point is greater than the abg slope
                //  ---Or long enough distance traversed till the last feature point
                if (abs(delta_angle) >= THRESH_ANGLE || count_omit_point > long_distance_thresh)//LONG_DISTANCE_THRESH)
                {
                        if (f_point.distance (prev_point) <= 10)
                                ; //Do not accept too close f_points
                        else
                        {
                                refined_path.push_back (prev_point);
                                f_point = prev_point;
                                if (!(count_omit_point > long_distance_thresh)) // Point selected due to thresh_angle
                                        mean_angle = prev_point.angleBetweenPoints(*it);//tan_inverse(prev_point.slope(*it));
                                else
                                        mean_angle = ((mean_angle*(count_omit_point-1))+angle)/count_omit_point;
                                //printf ('NEW FEATURE PT SEL.'); prev_point.display();
                                count_omit_point=0;
                        }
                }
                else
                        mean_angle = ((mean_angle*(count_omit_point-1))+angle)/count_omit_point;
                prev_point = (*it);
        }


        refined_path.push_back (prev_point);
        return refined_path;
}
.fi
.SS "void create_refined_file (list< \fBpoint\fP > path)"
.PP
Definition at line 259 of file vector_extract.h.
.PP
.nf
{
        list<point>::iterator it = path.begin();
        char** image = new char* [HEIGHT+1];
        for (int i=0;i<=HEIGHT;i++)
                image[i] = new char [WIDTH+2];
        int i=0,j=0;
        for (i=0;i<=HEIGHT;i++)
                for (j=0;j<=WIDTH+2;j++)
                        image[i][j] = '0';
        for (;it!=path.end();it++)
                image[(*it).get_X()][(*it).get_Y()] = '1';
}
.fi
.SS "void display_image (IplImage * img)"
.PP
Definition at line 87 of file vector_extract.h.
.PP
.nf
{
  int height,width,step,channels;
  uchar *data;
  int i,j;

  // get the image data
  height    = img->height;
  width     = img->width;
  step      = img->widthStep;
  channels  = img->nChannels;
  data      = (uchar *)img->imageData;

        for (i=0;i<height;i++)
        {
                for (j=0;j<width;j++)
                {
                        int pix=data[i*step+j*channels];
                        if(pix>10)
                                cout<<1<<',';
                        else
                                cout<<0<<',';
                }
                cout << endl;
        }
}
.fi
.SS "void display_image (char ** image)"
.PP
Definition at line 73 of file vector_extract.h.
.PP
.nf
{
        int i,j;
        for (i=0;i<=HEIGHT;i++)
        {
                for (j=0;j<=WIDTH;j++)
                {
                        cout << image[i][j];
                }
                cout << endl;
        }
}
.fi
.SS "bool filter1 (char ** mat, int i, int j)"returns true if the center of the filter is the end of a line segment Else return false 
.PP
Definition at line 277 of file vector_extract.h.
.PP
.nf
                                     {
        if(mat[i][j]=='1')
                return false;

        int count=0,k,l;

        for(k=i-1;k<=i+1;k++)
                for(l=j-1;l<=j+1;l++)
                        if(mat[k][l]=='0')
                                count++;
        if(count==2)
                return true;

        if(count==3){
                if(mat[i-1][j-1]=='0' && (mat[i-1][j]=='0' || mat[i][j-1])=='0' )
                        return true;
                else if(mat[i+1][j+1]=='0' && (mat[i+1][j]=='0' || mat[i][j+1]=='0') )
                        return true;
                else if(mat[i+1][j-1]=='0' && (mat[i][j-1]=='0' || mat[i+1][j]=='0') )
                        return true;
                else if(mat[i-1][j+1]=='0' && (mat[i][j+1]=='0' || mat[i-1][j]=='0') )
                        return true;
        }
        return false;
}
.fi
.SS "list< double > find_direction_vector (list< \fBpoint\fP > path)"Give the direction vector for a given path Its a consecutive instruction of forward and the turn by a specific amount of angle 1 -> turn right 0 -> turn left 
.PP
Definition at line 365 of file vector_extract.h.
.PP
.nf
{
        double distance,slope,angle,prev_angle=-90;
        char turn;
        list<point>::iterator it = path.begin();
        list<double> moves;

        point prev_point = (*it);
        it->display (); 
        it++;

        if(it==path.end())
                return moves;

        distance = (*it).distance (prev_point);
        moves.push_back(distance);
        prev_angle = it->angleBetweenPoints(prev_point);//tan_inverse (it->slope(prev_point));
        
        prev_point.display(); 
        (*it).display(); 
        cout << '   ' << distance << endl;
        it++;

        for (;it!=path.end();it++)
        {
                distance = (*it).distance (prev_point);
                slope = (*it).slope (prev_point);
                angle = (*it).angleBetweenPoints(prev_point);//tan_inverse(slope);
                
                double  dif_angle=prev_angle-angle;

                if(dif_angle>180)
                        dif_angle-=360;
                else if(dif_angle<-180)
                        dif_angle+=360;

                if(((prev_angle/10)*(angle/10))<0)
                        dif_angle=-dif_angle;

                TURN = (dif_angle) < 0 ? RIGHT : LEFT;
                
                moves.push_back(fabs(dif_angle));
                moves.push_back(TURN);
                moves.push_back(distance);

                prev_point.display(); (*it).display();cout << '  prev_angle:' << prev_angle << '  angle:' << angle << 
                        '  diff:' << dif_angle << '  Turn '<<TURN << endl;
                prev_angle = angle;

                prev_point = *it;
        }
        
        return moves;
}
.fi
.SS "\fBpoint\fP find_neighbour (char ** image, \fBpoint\fP current)"Function to find K hop neighbour. Maximum value of K is MAX_HOP 
.PP
Definition at line 118 of file vector_extract.h.
.PP
.nf
{
        int hop=1,i,j;
        point dummy;
        int cur_X = current.get_X();
        int cur_Y = current.get_Y();
        for (hop=MAX_HOP;hop > 1;hop--)
        {
                if (cur_X+hop >= HEIGHT || cur_Y+hop >= WIDTH)
                        continue;
                for (i=(cur_X-hop)>0?(cur_X-hop):0;i<=(cur_X+hop);i++)
                {
                        for (j=(cur_Y-hop)>0?(cur_Y-hop):0;j<=(cur_Y+hop);j++)
                        {
                                if (abs(current.get_X()-i)==hop || abs(current.get_Y()-j)==hop)
                                {
                                        if (image[i][j]=='0')
                                        {
                                                dummy.set_X(i);
                                                dummy.set_Y(j);
                                                return dummy;
                                        }
                                        else
                                        {
                                                //NOTHING
                                        }
                                }
                                else
                                {
                                        //NOTHING
                                }
                        }
                }
        }
        return point (-1,-1);
}
.fi
.SS "char ** mark_as_visited (char ** image, \fBpoint\fP src, \fBpoint\fP dest)"all pixels where 0 occues between src and dest are changed to 2. This is due to mark them as already visited and not to interfere with future calculation. 
.PP
Definition at line 32 of file vector_extract.h.
.PP
.nf
{
        int row_it,col_it;
        int row_start=0,row_end=0;
        int col_start=0,col_end=0;

        // get the row range
        if (src.get_X()<dest.get_X())
        {
                row_start=src.get_X();
                row_end=dest.get_X();
        }
        else
        {
                row_end=src.get_X();
                row_start=dest.get_X();
        }
        // get the col range
        if (src.get_Y()<dest.get_Y())
        {
                col_start=src.get_Y();
                col_end=dest.get_Y();
        }
        else
        {
                col_end=src.get_Y();
                col_start=dest.get_Y();
        }
        for (row_it=row_start; row_it<=row_end;row_it++)
        {
                for (col_it=col_start; col_it<=col_end;col_it++)
                {
                        if (image[row_it][col_it] == '0')
                        {
                                image[row_it][col_it] = '2';
                        }
                }
        }
        return image;
}
.fi
.SS "list< \fBpoint\fP > StartPoints (IplImage * img, char ** mat)"Locate end points Returns a list of end points 
.PP
Definition at line 307 of file vector_extract.h.
.PP
.nf
                                                  {
        int i,j;
        int height=img->height;
        int width=img->width;
        double dist = 0;

        list<point> endPoints;
        point p_prev;

        for(i=1;i<height-1;i++){
                for(j=1;j<width-1;j++){
                        if(filter1(mat,i,j)==true){
                                //cout<<'\n\n\n\n END point : <'<<i<<','<<j<<'>';
                                const point p(i,j);
                                point p1(i,j);
                                point p2(p_prev.get_X(),p_prev.get_Y());
                                dist = p1.distance (p2);
                                if(pow(dist,.5)<1)
                                {
                                        cvLine(img, cvPoint(p1.get_Y(),p1.get_X()), cvPoint(p2.get_Y(),p2.get_X()), cvScalar(0,0,0), 1);
                                }
                                else
                                {
                                        endPoints.push_back(p);
                                        cvCircle (img,cvPoint(j,i),5,cvScalar (255,0,0),1);
                                        p_prev=p1;
                                }
                        }
                }
        }
        cvShowImage('mainWin2', img );
        cvWaitKey(0);
        return endPoints;
}
.fi
.SS "double tan_inverse (double slope)"Give the angle in degree for a given slope 
.PP
Definition at line 347 of file vector_extract.h.
.PP
.nf
{
        double angle;
        // Assumption being 
        if (slope == 56)
                return 90;
        else if (slope == -56)
                return -90;
        angle = atan (slope) * 180 / PI;
        return angle;
}
.fi
.SS "list< \fBpoint\fP > traverse_black_line (char ** image, \fBpoint\fP start_point)"Traverse the black line from the start_point given to another end point 
.PP
Definition at line 161 of file vector_extract.h.
.PP
.nf
{
        int max_points = HEIGHT;
        int line_it=0;
        point neighbour;
        point zero_point;
        int direction = 0;
        list<point>path;

        point old_point(start_point),current_point(start_point);
        path.push_back (start_point);
        while (line_it<max_points)
        {
                line_it++;
                neighbour = find_neighbour (image,current_point);
                //neighbour.display();
                if (neighbour.invalid())
                        break;
                old_point=current_point;
                current_point=neighbour;
                
                image = mark_as_visited (image,old_point,current_point);
                
                path.push_back (current_point);
                line_it++;
                if (line_it>= HEIGHT+MAX_HOP)
                        break;
        
        }
        //remove the end points.
        //list<point>::const_iterator it = ;
        
        return path;
}
.fi
.SH "Variable Documentation"
.PP 
.SS "int \fBh\fP"
.PP
Definition at line 12 of file vector_extract.h.
.SS "enum { ... }  \fBTURN\fP"
.SS "int \fBw\fP"
.PP
Definition at line 12 of file vector_extract.h.
.SH "Author"
.PP 
Generated automatically by Doxygen for CS684_course_project_group5 from the source code.
