
project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001a2  00800200  00004238  000042cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004238  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000272  008003a2  008003a2  0000446e  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000446e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000003eb  00000000  00000000  0000448e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000010a0  00000000  00000000  00004879  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000220  00000000  00000000  00005919  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000195e  00000000  00000000  00005b39  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000310  00000000  00000000  00007498  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000467  00000000  00000000  000077a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 2f 0b 	jmp	0x165e	; 0x165e <__vector_5>
      18:	0c 94 4c 0b 	jmp	0x1698	; 0x1698 <__vector_6>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 35 14 	jmp	0x286a	; 0x286a <__vector_25>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 b1 14 	jmp	0x2962	; 0x2962 <__vector_36>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e8 e3       	ldi	r30, 0x38	; 56
      fc:	f2 e4       	ldi	r31, 0x42	; 66
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a2 3a       	cpi	r26, 0xA2	; 162
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	16 e0       	ldi	r17, 0x06	; 6
     110:	a2 ea       	ldi	r26, 0xA2	; 162
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a4 31       	cpi	r26, 0x14	; 20
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 f2 18 	call	0x31e4	; 0x31e4 <main>
     122:	0c 94 1a 21 	jmp	0x4234	; 0x4234 <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <lcd_port_config>:
unsigned int thousand;
unsigned int million;

//Function to configure LCD port
void lcd_port_config (void)
{
     12a:	df 93       	push	r29
     12c:	cf 93       	push	r28
     12e:	cd b7       	in	r28, 0x3d	; 61
     130:	de b7       	in	r29, 0x3e	; 62
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
     132:	a7 e2       	ldi	r26, 0x27	; 39
     134:	b0 e0       	ldi	r27, 0x00	; 0
     136:	e7 e2       	ldi	r30, 0x27	; 39
     138:	f0 e0       	ldi	r31, 0x00	; 0
     13a:	80 81       	ld	r24, Z
     13c:	87 6f       	ori	r24, 0xF7	; 247
     13e:	8c 93       	st	X, r24
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
     140:	a8 e2       	ldi	r26, 0x28	; 40
     142:	b0 e0       	ldi	r27, 0x00	; 0
     144:	e8 e2       	ldi	r30, 0x28	; 40
     146:	f0 e0       	ldi	r31, 0x00	; 0
     148:	80 81       	ld	r24, Z
     14a:	80 78       	andi	r24, 0x80	; 128
     14c:	8c 93       	st	X, r24
}
     14e:	cf 91       	pop	r28
     150:	df 91       	pop	r29
     152:	08 95       	ret

00000154 <port_init>:

//Function to Initialize PORTS
void port_init()
{
     154:	df 93       	push	r29
     156:	cf 93       	push	r28
     158:	cd b7       	in	r28, 0x3d	; 61
     15a:	de b7       	in	r29, 0x3e	; 62
	lcd_port_config();
     15c:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_port_config>
}
     160:	cf 91       	pop	r28
     162:	df 91       	pop	r29
     164:	08 95       	ret

00000166 <lcd_set_4bit>:

//Function to Reset LCD
void lcd_set_4bit()
{
     166:	0f 93       	push	r16
     168:	1f 93       	push	r17
     16a:	df 93       	push	r29
     16c:	cf 93       	push	r28
     16e:	cd b7       	in	r28, 0x3d	; 61
     170:	de b7       	in	r29, 0x3e	; 62
     172:	c0 57       	subi	r28, 0x70	; 112
     174:	d0 40       	sbci	r29, 0x00	; 0
     176:	0f b6       	in	r0, 0x3f	; 63
     178:	f8 94       	cli
     17a:	de bf       	out	0x3e, r29	; 62
     17c:	0f be       	out	0x3f, r0	; 63
     17e:	cd bf       	out	0x3d, r28	; 61
     180:	fe 01       	movw	r30, r28
     182:	e3 59       	subi	r30, 0x93	; 147
     184:	ff 4f       	sbci	r31, 0xFF	; 255
     186:	80 e0       	ldi	r24, 0x00	; 0
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	a0 e8       	ldi	r26, 0x80	; 128
     18c:	bf e3       	ldi	r27, 0x3F	; 63
     18e:	80 83       	st	Z, r24
     190:	91 83       	std	Z+1, r25	; 0x01
     192:	a2 83       	std	Z+2, r26	; 0x02
     194:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     196:	8e 01       	movw	r16, r28
     198:	07 59       	subi	r16, 0x97	; 151
     19a:	1f 4f       	sbci	r17, 0xFF	; 255
     19c:	fe 01       	movw	r30, r28
     19e:	e3 59       	subi	r30, 0x93	; 147
     1a0:	ff 4f       	sbci	r31, 0xFF	; 255
     1a2:	60 81       	ld	r22, Z
     1a4:	71 81       	ldd	r23, Z+1	; 0x01
     1a6:	82 81       	ldd	r24, Z+2	; 0x02
     1a8:	93 81       	ldd	r25, Z+3	; 0x03
     1aa:	2d ec       	ldi	r18, 0xCD	; 205
     1ac:	3c ec       	ldi	r19, 0xCC	; 204
     1ae:	4c e2       	ldi	r20, 0x2C	; 44
     1b0:	55 e4       	ldi	r21, 0x45	; 69
     1b2:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__mulsf3>
     1b6:	dc 01       	movw	r26, r24
     1b8:	cb 01       	movw	r24, r22
     1ba:	f8 01       	movw	r30, r16
     1bc:	80 83       	st	Z, r24
     1be:	91 83       	std	Z+1, r25	; 0x01
     1c0:	a2 83       	std	Z+2, r26	; 0x02
     1c2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     1c4:	fe 01       	movw	r30, r28
     1c6:	e7 59       	subi	r30, 0x97	; 151
     1c8:	ff 4f       	sbci	r31, 0xFF	; 255
     1ca:	60 81       	ld	r22, Z
     1cc:	71 81       	ldd	r23, Z+1	; 0x01
     1ce:	82 81       	ldd	r24, Z+2	; 0x02
     1d0:	93 81       	ldd	r25, Z+3	; 0x03
     1d2:	20 e0       	ldi	r18, 0x00	; 0
     1d4:	30 e0       	ldi	r19, 0x00	; 0
     1d6:	40 e8       	ldi	r20, 0x80	; 128
     1d8:	5f e3       	ldi	r21, 0x3F	; 63
     1da:	0e 94 7f 1d 	call	0x3afe	; 0x3afe <__ltsf2>
     1de:	88 23       	and	r24, r24
     1e0:	44 f4       	brge	.+16     	; 0x1f2 <lcd_set_4bit+0x8c>
		__ticks = 1;
     1e2:	fe 01       	movw	r30, r28
     1e4:	e9 59       	subi	r30, 0x99	; 153
     1e6:	ff 4f       	sbci	r31, 0xFF	; 255
     1e8:	81 e0       	ldi	r24, 0x01	; 1
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	91 83       	std	Z+1, r25	; 0x01
     1ee:	80 83       	st	Z, r24
     1f0:	64 c0       	rjmp	.+200    	; 0x2ba <lcd_set_4bit+0x154>
	else if (__tmp > 65535)
     1f2:	fe 01       	movw	r30, r28
     1f4:	e7 59       	subi	r30, 0x97	; 151
     1f6:	ff 4f       	sbci	r31, 0xFF	; 255
     1f8:	60 81       	ld	r22, Z
     1fa:	71 81       	ldd	r23, Z+1	; 0x01
     1fc:	82 81       	ldd	r24, Z+2	; 0x02
     1fe:	93 81       	ldd	r25, Z+3	; 0x03
     200:	20 e0       	ldi	r18, 0x00	; 0
     202:	3f ef       	ldi	r19, 0xFF	; 255
     204:	4f e7       	ldi	r20, 0x7F	; 127
     206:	57 e4       	ldi	r21, 0x47	; 71
     208:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <__gtsf2>
     20c:	18 16       	cp	r1, r24
     20e:	0c f0       	brlt	.+2      	; 0x212 <lcd_set_4bit+0xac>
     210:	43 c0       	rjmp	.+134    	; 0x298 <lcd_set_4bit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     212:	fe 01       	movw	r30, r28
     214:	e3 59       	subi	r30, 0x93	; 147
     216:	ff 4f       	sbci	r31, 0xFF	; 255
     218:	60 81       	ld	r22, Z
     21a:	71 81       	ldd	r23, Z+1	; 0x01
     21c:	82 81       	ldd	r24, Z+2	; 0x02
     21e:	93 81       	ldd	r25, Z+3	; 0x03
     220:	20 e0       	ldi	r18, 0x00	; 0
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e2       	ldi	r20, 0x20	; 32
     226:	51 e4       	ldi	r21, 0x41	; 65
     228:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__mulsf3>
     22c:	dc 01       	movw	r26, r24
     22e:	cb 01       	movw	r24, r22
     230:	8e 01       	movw	r16, r28
     232:	09 59       	subi	r16, 0x99	; 153
     234:	1f 4f       	sbci	r17, 0xFF	; 255
     236:	bc 01       	movw	r22, r24
     238:	cd 01       	movw	r24, r26
     23a:	0e 94 a3 19 	call	0x3346	; 0x3346 <__fixunssfsi>
     23e:	dc 01       	movw	r26, r24
     240:	cb 01       	movw	r24, r22
     242:	f8 01       	movw	r30, r16
     244:	91 83       	std	Z+1, r25	; 0x01
     246:	80 83       	st	Z, r24
     248:	1f c0       	rjmp	.+62     	; 0x288 <lcd_set_4bit+0x122>
     24a:	fe 01       	movw	r30, r28
     24c:	eb 59       	subi	r30, 0x9B	; 155
     24e:	ff 4f       	sbci	r31, 0xFF	; 255
     250:	84 e1       	ldi	r24, 0x14	; 20
     252:	91 e0       	ldi	r25, 0x01	; 1
     254:	91 83       	std	Z+1, r25	; 0x01
     256:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     258:	fe 01       	movw	r30, r28
     25a:	eb 59       	subi	r30, 0x9B	; 155
     25c:	ff 4f       	sbci	r31, 0xFF	; 255
     25e:	80 81       	ld	r24, Z
     260:	91 81       	ldd	r25, Z+1	; 0x01
     262:	01 97       	sbiw	r24, 0x01	; 1
     264:	f1 f7       	brne	.-4      	; 0x262 <lcd_set_4bit+0xfc>
     266:	fe 01       	movw	r30, r28
     268:	eb 59       	subi	r30, 0x9B	; 155
     26a:	ff 4f       	sbci	r31, 0xFF	; 255
     26c:	91 83       	std	Z+1, r25	; 0x01
     26e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     270:	de 01       	movw	r26, r28
     272:	a9 59       	subi	r26, 0x99	; 153
     274:	bf 4f       	sbci	r27, 0xFF	; 255
     276:	fe 01       	movw	r30, r28
     278:	e9 59       	subi	r30, 0x99	; 153
     27a:	ff 4f       	sbci	r31, 0xFF	; 255
     27c:	80 81       	ld	r24, Z
     27e:	91 81       	ldd	r25, Z+1	; 0x01
     280:	01 97       	sbiw	r24, 0x01	; 1
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	9c 93       	st	X, r25
     286:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     288:	fe 01       	movw	r30, r28
     28a:	e9 59       	subi	r30, 0x99	; 153
     28c:	ff 4f       	sbci	r31, 0xFF	; 255
     28e:	80 81       	ld	r24, Z
     290:	91 81       	ldd	r25, Z+1	; 0x01
     292:	00 97       	sbiw	r24, 0x00	; 0
     294:	d1 f6       	brne	.-76     	; 0x24a <lcd_set_4bit+0xe4>
     296:	27 c0       	rjmp	.+78     	; 0x2e6 <lcd_set_4bit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     298:	8e 01       	movw	r16, r28
     29a:	09 59       	subi	r16, 0x99	; 153
     29c:	1f 4f       	sbci	r17, 0xFF	; 255
     29e:	fe 01       	movw	r30, r28
     2a0:	e7 59       	subi	r30, 0x97	; 151
     2a2:	ff 4f       	sbci	r31, 0xFF	; 255
     2a4:	60 81       	ld	r22, Z
     2a6:	71 81       	ldd	r23, Z+1	; 0x01
     2a8:	82 81       	ldd	r24, Z+2	; 0x02
     2aa:	93 81       	ldd	r25, Z+3	; 0x03
     2ac:	0e 94 a3 19 	call	0x3346	; 0x3346 <__fixunssfsi>
     2b0:	dc 01       	movw	r26, r24
     2b2:	cb 01       	movw	r24, r22
     2b4:	f8 01       	movw	r30, r16
     2b6:	91 83       	std	Z+1, r25	; 0x01
     2b8:	80 83       	st	Z, r24
     2ba:	de 01       	movw	r26, r28
     2bc:	ad 59       	subi	r26, 0x9D	; 157
     2be:	bf 4f       	sbci	r27, 0xFF	; 255
     2c0:	fe 01       	movw	r30, r28
     2c2:	e9 59       	subi	r30, 0x99	; 153
     2c4:	ff 4f       	sbci	r31, 0xFF	; 255
     2c6:	80 81       	ld	r24, Z
     2c8:	91 81       	ldd	r25, Z+1	; 0x01
     2ca:	8d 93       	st	X+, r24
     2cc:	9c 93       	st	X, r25
     2ce:	fe 01       	movw	r30, r28
     2d0:	ed 59       	subi	r30, 0x9D	; 157
     2d2:	ff 4f       	sbci	r31, 0xFF	; 255
     2d4:	80 81       	ld	r24, Z
     2d6:	91 81       	ldd	r25, Z+1	; 0x01
     2d8:	01 97       	sbiw	r24, 0x01	; 1
     2da:	f1 f7       	brne	.-4      	; 0x2d8 <lcd_set_4bit+0x172>
     2dc:	fe 01       	movw	r30, r28
     2de:	ed 59       	subi	r30, 0x9D	; 157
     2e0:	ff 4f       	sbci	r31, 0xFF	; 255
     2e2:	91 83       	std	Z+1, r25	; 0x01
     2e4:	80 83       	st	Z, r24
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     2e6:	a8 e2       	ldi	r26, 0x28	; 40
     2e8:	b0 e0       	ldi	r27, 0x00	; 0
     2ea:	e8 e2       	ldi	r30, 0x28	; 40
     2ec:	f0 e0       	ldi	r31, 0x00	; 0
     2ee:	80 81       	ld	r24, Z
     2f0:	8e 7f       	andi	r24, 0xFE	; 254
     2f2:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     2f4:	a8 e2       	ldi	r26, 0x28	; 40
     2f6:	b0 e0       	ldi	r27, 0x00	; 0
     2f8:	e8 e2       	ldi	r30, 0x28	; 40
     2fa:	f0 e0       	ldi	r31, 0x00	; 0
     2fc:	80 81       	ld	r24, Z
     2fe:	8d 7f       	andi	r24, 0xFD	; 253
     300:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     302:	e8 e2       	ldi	r30, 0x28	; 40
     304:	f0 e0       	ldi	r31, 0x00	; 0
     306:	80 e3       	ldi	r24, 0x30	; 48
     308:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     30a:	a8 e2       	ldi	r26, 0x28	; 40
     30c:	b0 e0       	ldi	r27, 0x00	; 0
     30e:	e8 e2       	ldi	r30, 0x28	; 40
     310:	f0 e0       	ldi	r31, 0x00	; 0
     312:	80 81       	ld	r24, Z
     314:	84 60       	ori	r24, 0x04	; 4
     316:	8c 93       	st	X, r24
     318:	fe 01       	movw	r30, r28
     31a:	e1 5a       	subi	r30, 0xA1	; 161
     31c:	ff 4f       	sbci	r31, 0xFF	; 255
     31e:	80 e0       	ldi	r24, 0x00	; 0
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	a0 ea       	ldi	r26, 0xA0	; 160
     324:	b0 e4       	ldi	r27, 0x40	; 64
     326:	80 83       	st	Z, r24
     328:	91 83       	std	Z+1, r25	; 0x01
     32a:	a2 83       	std	Z+2, r26	; 0x02
     32c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     32e:	8e 01       	movw	r16, r28
     330:	05 5a       	subi	r16, 0xA5	; 165
     332:	1f 4f       	sbci	r17, 0xFF	; 255
     334:	fe 01       	movw	r30, r28
     336:	e1 5a       	subi	r30, 0xA1	; 161
     338:	ff 4f       	sbci	r31, 0xFF	; 255
     33a:	60 81       	ld	r22, Z
     33c:	71 81       	ldd	r23, Z+1	; 0x01
     33e:	82 81       	ldd	r24, Z+2	; 0x02
     340:	93 81       	ldd	r25, Z+3	; 0x03
     342:	2d ec       	ldi	r18, 0xCD	; 205
     344:	3c ec       	ldi	r19, 0xCC	; 204
     346:	4c e2       	ldi	r20, 0x2C	; 44
     348:	55 e4       	ldi	r21, 0x45	; 69
     34a:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__mulsf3>
     34e:	dc 01       	movw	r26, r24
     350:	cb 01       	movw	r24, r22
     352:	f8 01       	movw	r30, r16
     354:	80 83       	st	Z, r24
     356:	91 83       	std	Z+1, r25	; 0x01
     358:	a2 83       	std	Z+2, r26	; 0x02
     35a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     35c:	fe 01       	movw	r30, r28
     35e:	e5 5a       	subi	r30, 0xA5	; 165
     360:	ff 4f       	sbci	r31, 0xFF	; 255
     362:	60 81       	ld	r22, Z
     364:	71 81       	ldd	r23, Z+1	; 0x01
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	20 e0       	ldi	r18, 0x00	; 0
     36c:	30 e0       	ldi	r19, 0x00	; 0
     36e:	40 e8       	ldi	r20, 0x80	; 128
     370:	5f e3       	ldi	r21, 0x3F	; 63
     372:	0e 94 7f 1d 	call	0x3afe	; 0x3afe <__ltsf2>
     376:	88 23       	and	r24, r24
     378:	44 f4       	brge	.+16     	; 0x38a <lcd_set_4bit+0x224>
		__ticks = 1;
     37a:	fe 01       	movw	r30, r28
     37c:	e7 5a       	subi	r30, 0xA7	; 167
     37e:	ff 4f       	sbci	r31, 0xFF	; 255
     380:	81 e0       	ldi	r24, 0x01	; 1
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	91 83       	std	Z+1, r25	; 0x01
     386:	80 83       	st	Z, r24
     388:	64 c0       	rjmp	.+200    	; 0x452 <lcd_set_4bit+0x2ec>
	else if (__tmp > 65535)
     38a:	fe 01       	movw	r30, r28
     38c:	e5 5a       	subi	r30, 0xA5	; 165
     38e:	ff 4f       	sbci	r31, 0xFF	; 255
     390:	60 81       	ld	r22, Z
     392:	71 81       	ldd	r23, Z+1	; 0x01
     394:	82 81       	ldd	r24, Z+2	; 0x02
     396:	93 81       	ldd	r25, Z+3	; 0x03
     398:	20 e0       	ldi	r18, 0x00	; 0
     39a:	3f ef       	ldi	r19, 0xFF	; 255
     39c:	4f e7       	ldi	r20, 0x7F	; 127
     39e:	57 e4       	ldi	r21, 0x47	; 71
     3a0:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <__gtsf2>
     3a4:	18 16       	cp	r1, r24
     3a6:	0c f0       	brlt	.+2      	; 0x3aa <lcd_set_4bit+0x244>
     3a8:	43 c0       	rjmp	.+134    	; 0x430 <lcd_set_4bit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     3aa:	fe 01       	movw	r30, r28
     3ac:	e1 5a       	subi	r30, 0xA1	; 161
     3ae:	ff 4f       	sbci	r31, 0xFF	; 255
     3b0:	60 81       	ld	r22, Z
     3b2:	71 81       	ldd	r23, Z+1	; 0x01
     3b4:	82 81       	ldd	r24, Z+2	; 0x02
     3b6:	93 81       	ldd	r25, Z+3	; 0x03
     3b8:	20 e0       	ldi	r18, 0x00	; 0
     3ba:	30 e0       	ldi	r19, 0x00	; 0
     3bc:	40 e2       	ldi	r20, 0x20	; 32
     3be:	51 e4       	ldi	r21, 0x41	; 65
     3c0:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__mulsf3>
     3c4:	dc 01       	movw	r26, r24
     3c6:	cb 01       	movw	r24, r22
     3c8:	8e 01       	movw	r16, r28
     3ca:	07 5a       	subi	r16, 0xA7	; 167
     3cc:	1f 4f       	sbci	r17, 0xFF	; 255
     3ce:	bc 01       	movw	r22, r24
     3d0:	cd 01       	movw	r24, r26
     3d2:	0e 94 a3 19 	call	0x3346	; 0x3346 <__fixunssfsi>
     3d6:	dc 01       	movw	r26, r24
     3d8:	cb 01       	movw	r24, r22
     3da:	f8 01       	movw	r30, r16
     3dc:	91 83       	std	Z+1, r25	; 0x01
     3de:	80 83       	st	Z, r24
     3e0:	1f c0       	rjmp	.+62     	; 0x420 <lcd_set_4bit+0x2ba>
     3e2:	fe 01       	movw	r30, r28
     3e4:	e9 5a       	subi	r30, 0xA9	; 169
     3e6:	ff 4f       	sbci	r31, 0xFF	; 255
     3e8:	84 e1       	ldi	r24, 0x14	; 20
     3ea:	91 e0       	ldi	r25, 0x01	; 1
     3ec:	91 83       	std	Z+1, r25	; 0x01
     3ee:	80 83       	st	Z, r24
     3f0:	fe 01       	movw	r30, r28
     3f2:	e9 5a       	subi	r30, 0xA9	; 169
     3f4:	ff 4f       	sbci	r31, 0xFF	; 255
     3f6:	80 81       	ld	r24, Z
     3f8:	91 81       	ldd	r25, Z+1	; 0x01
     3fa:	01 97       	sbiw	r24, 0x01	; 1
     3fc:	f1 f7       	brne	.-4      	; 0x3fa <lcd_set_4bit+0x294>
     3fe:	fe 01       	movw	r30, r28
     400:	e9 5a       	subi	r30, 0xA9	; 169
     402:	ff 4f       	sbci	r31, 0xFF	; 255
     404:	91 83       	std	Z+1, r25	; 0x01
     406:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     408:	de 01       	movw	r26, r28
     40a:	a7 5a       	subi	r26, 0xA7	; 167
     40c:	bf 4f       	sbci	r27, 0xFF	; 255
     40e:	fe 01       	movw	r30, r28
     410:	e7 5a       	subi	r30, 0xA7	; 167
     412:	ff 4f       	sbci	r31, 0xFF	; 255
     414:	80 81       	ld	r24, Z
     416:	91 81       	ldd	r25, Z+1	; 0x01
     418:	01 97       	sbiw	r24, 0x01	; 1
     41a:	11 96       	adiw	r26, 0x01	; 1
     41c:	9c 93       	st	X, r25
     41e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     420:	fe 01       	movw	r30, r28
     422:	e7 5a       	subi	r30, 0xA7	; 167
     424:	ff 4f       	sbci	r31, 0xFF	; 255
     426:	80 81       	ld	r24, Z
     428:	91 81       	ldd	r25, Z+1	; 0x01
     42a:	00 97       	sbiw	r24, 0x00	; 0
     42c:	d1 f6       	brne	.-76     	; 0x3e2 <lcd_set_4bit+0x27c>
     42e:	27 c0       	rjmp	.+78     	; 0x47e <lcd_set_4bit+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     430:	8e 01       	movw	r16, r28
     432:	07 5a       	subi	r16, 0xA7	; 167
     434:	1f 4f       	sbci	r17, 0xFF	; 255
     436:	fe 01       	movw	r30, r28
     438:	e5 5a       	subi	r30, 0xA5	; 165
     43a:	ff 4f       	sbci	r31, 0xFF	; 255
     43c:	60 81       	ld	r22, Z
     43e:	71 81       	ldd	r23, Z+1	; 0x01
     440:	82 81       	ldd	r24, Z+2	; 0x02
     442:	93 81       	ldd	r25, Z+3	; 0x03
     444:	0e 94 a3 19 	call	0x3346	; 0x3346 <__fixunssfsi>
     448:	dc 01       	movw	r26, r24
     44a:	cb 01       	movw	r24, r22
     44c:	f8 01       	movw	r30, r16
     44e:	91 83       	std	Z+1, r25	; 0x01
     450:	80 83       	st	Z, r24
     452:	de 01       	movw	r26, r28
     454:	ab 5a       	subi	r26, 0xAB	; 171
     456:	bf 4f       	sbci	r27, 0xFF	; 255
     458:	fe 01       	movw	r30, r28
     45a:	e7 5a       	subi	r30, 0xA7	; 167
     45c:	ff 4f       	sbci	r31, 0xFF	; 255
     45e:	80 81       	ld	r24, Z
     460:	91 81       	ldd	r25, Z+1	; 0x01
     462:	8d 93       	st	X+, r24
     464:	9c 93       	st	X, r25
     466:	fe 01       	movw	r30, r28
     468:	eb 5a       	subi	r30, 0xAB	; 171
     46a:	ff 4f       	sbci	r31, 0xFF	; 255
     46c:	80 81       	ld	r24, Z
     46e:	91 81       	ldd	r25, Z+1	; 0x01
     470:	01 97       	sbiw	r24, 0x01	; 1
     472:	f1 f7       	brne	.-4      	; 0x470 <lcd_set_4bit+0x30a>
     474:	fe 01       	movw	r30, r28
     476:	eb 5a       	subi	r30, 0xAB	; 171
     478:	ff 4f       	sbci	r31, 0xFF	; 255
     47a:	91 83       	std	Z+1, r25	; 0x01
     47c:	80 83       	st	Z, r24
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     47e:	a8 e2       	ldi	r26, 0x28	; 40
     480:	b0 e0       	ldi	r27, 0x00	; 0
     482:	e8 e2       	ldi	r30, 0x28	; 40
     484:	f0 e0       	ldi	r31, 0x00	; 0
     486:	80 81       	ld	r24, Z
     488:	8b 7f       	andi	r24, 0xFB	; 251
     48a:	8c 93       	st	X, r24
     48c:	fe 01       	movw	r30, r28
     48e:	ef 5a       	subi	r30, 0xAF	; 175
     490:	ff 4f       	sbci	r31, 0xFF	; 255
     492:	80 e0       	ldi	r24, 0x00	; 0
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	a0 e8       	ldi	r26, 0x80	; 128
     498:	bf e3       	ldi	r27, 0x3F	; 63
     49a:	80 83       	st	Z, r24
     49c:	91 83       	std	Z+1, r25	; 0x01
     49e:	a2 83       	std	Z+2, r26	; 0x02
     4a0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     4a2:	8e 01       	movw	r16, r28
     4a4:	03 5b       	subi	r16, 0xB3	; 179
     4a6:	1f 4f       	sbci	r17, 0xFF	; 255
     4a8:	fe 01       	movw	r30, r28
     4aa:	ef 5a       	subi	r30, 0xAF	; 175
     4ac:	ff 4f       	sbci	r31, 0xFF	; 255
     4ae:	60 81       	ld	r22, Z
     4b0:	71 81       	ldd	r23, Z+1	; 0x01
     4b2:	82 81       	ldd	r24, Z+2	; 0x02
     4b4:	93 81       	ldd	r25, Z+3	; 0x03
     4b6:	2d ec       	ldi	r18, 0xCD	; 205
     4b8:	3c ec       	ldi	r19, 0xCC	; 204
     4ba:	4c e2       	ldi	r20, 0x2C	; 44
     4bc:	55 e4       	ldi	r21, 0x45	; 69
     4be:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__mulsf3>
     4c2:	dc 01       	movw	r26, r24
     4c4:	cb 01       	movw	r24, r22
     4c6:	f8 01       	movw	r30, r16
     4c8:	80 83       	st	Z, r24
     4ca:	91 83       	std	Z+1, r25	; 0x01
     4cc:	a2 83       	std	Z+2, r26	; 0x02
     4ce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     4d0:	fe 01       	movw	r30, r28
     4d2:	e3 5b       	subi	r30, 0xB3	; 179
     4d4:	ff 4f       	sbci	r31, 0xFF	; 255
     4d6:	60 81       	ld	r22, Z
     4d8:	71 81       	ldd	r23, Z+1	; 0x01
     4da:	82 81       	ldd	r24, Z+2	; 0x02
     4dc:	93 81       	ldd	r25, Z+3	; 0x03
     4de:	20 e0       	ldi	r18, 0x00	; 0
     4e0:	30 e0       	ldi	r19, 0x00	; 0
     4e2:	40 e8       	ldi	r20, 0x80	; 128
     4e4:	5f e3       	ldi	r21, 0x3F	; 63
     4e6:	0e 94 7f 1d 	call	0x3afe	; 0x3afe <__ltsf2>
     4ea:	88 23       	and	r24, r24
     4ec:	44 f4       	brge	.+16     	; 0x4fe <lcd_set_4bit+0x398>
		__ticks = 1;
     4ee:	fe 01       	movw	r30, r28
     4f0:	e5 5b       	subi	r30, 0xB5	; 181
     4f2:	ff 4f       	sbci	r31, 0xFF	; 255
     4f4:	81 e0       	ldi	r24, 0x01	; 1
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	91 83       	std	Z+1, r25	; 0x01
     4fa:	80 83       	st	Z, r24
     4fc:	64 c0       	rjmp	.+200    	; 0x5c6 <lcd_set_4bit+0x460>
	else if (__tmp > 65535)
     4fe:	fe 01       	movw	r30, r28
     500:	e3 5b       	subi	r30, 0xB3	; 179
     502:	ff 4f       	sbci	r31, 0xFF	; 255
     504:	60 81       	ld	r22, Z
     506:	71 81       	ldd	r23, Z+1	; 0x01
     508:	82 81       	ldd	r24, Z+2	; 0x02
     50a:	93 81       	ldd	r25, Z+3	; 0x03
     50c:	20 e0       	ldi	r18, 0x00	; 0
     50e:	3f ef       	ldi	r19, 0xFF	; 255
     510:	4f e7       	ldi	r20, 0x7F	; 127
     512:	57 e4       	ldi	r21, 0x47	; 71
     514:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <__gtsf2>
     518:	18 16       	cp	r1, r24
     51a:	0c f0       	brlt	.+2      	; 0x51e <lcd_set_4bit+0x3b8>
     51c:	43 c0       	rjmp	.+134    	; 0x5a4 <lcd_set_4bit+0x43e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     51e:	fe 01       	movw	r30, r28
     520:	ef 5a       	subi	r30, 0xAF	; 175
     522:	ff 4f       	sbci	r31, 0xFF	; 255
     524:	60 81       	ld	r22, Z
     526:	71 81       	ldd	r23, Z+1	; 0x01
     528:	82 81       	ldd	r24, Z+2	; 0x02
     52a:	93 81       	ldd	r25, Z+3	; 0x03
     52c:	20 e0       	ldi	r18, 0x00	; 0
     52e:	30 e0       	ldi	r19, 0x00	; 0
     530:	40 e2       	ldi	r20, 0x20	; 32
     532:	51 e4       	ldi	r21, 0x41	; 65
     534:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__mulsf3>
     538:	dc 01       	movw	r26, r24
     53a:	cb 01       	movw	r24, r22
     53c:	8e 01       	movw	r16, r28
     53e:	05 5b       	subi	r16, 0xB5	; 181
     540:	1f 4f       	sbci	r17, 0xFF	; 255
     542:	bc 01       	movw	r22, r24
     544:	cd 01       	movw	r24, r26
     546:	0e 94 a3 19 	call	0x3346	; 0x3346 <__fixunssfsi>
     54a:	dc 01       	movw	r26, r24
     54c:	cb 01       	movw	r24, r22
     54e:	f8 01       	movw	r30, r16
     550:	91 83       	std	Z+1, r25	; 0x01
     552:	80 83       	st	Z, r24
     554:	1f c0       	rjmp	.+62     	; 0x594 <lcd_set_4bit+0x42e>
     556:	fe 01       	movw	r30, r28
     558:	e7 5b       	subi	r30, 0xB7	; 183
     55a:	ff 4f       	sbci	r31, 0xFF	; 255
     55c:	84 e1       	ldi	r24, 0x14	; 20
     55e:	91 e0       	ldi	r25, 0x01	; 1
     560:	91 83       	std	Z+1, r25	; 0x01
     562:	80 83       	st	Z, r24
     564:	fe 01       	movw	r30, r28
     566:	e7 5b       	subi	r30, 0xB7	; 183
     568:	ff 4f       	sbci	r31, 0xFF	; 255
     56a:	80 81       	ld	r24, Z
     56c:	91 81       	ldd	r25, Z+1	; 0x01
     56e:	01 97       	sbiw	r24, 0x01	; 1
     570:	f1 f7       	brne	.-4      	; 0x56e <lcd_set_4bit+0x408>
     572:	fe 01       	movw	r30, r28
     574:	e7 5b       	subi	r30, 0xB7	; 183
     576:	ff 4f       	sbci	r31, 0xFF	; 255
     578:	91 83       	std	Z+1, r25	; 0x01
     57a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     57c:	de 01       	movw	r26, r28
     57e:	a5 5b       	subi	r26, 0xB5	; 181
     580:	bf 4f       	sbci	r27, 0xFF	; 255
     582:	fe 01       	movw	r30, r28
     584:	e5 5b       	subi	r30, 0xB5	; 181
     586:	ff 4f       	sbci	r31, 0xFF	; 255
     588:	80 81       	ld	r24, Z
     58a:	91 81       	ldd	r25, Z+1	; 0x01
     58c:	01 97       	sbiw	r24, 0x01	; 1
     58e:	11 96       	adiw	r26, 0x01	; 1
     590:	9c 93       	st	X, r25
     592:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     594:	fe 01       	movw	r30, r28
     596:	e5 5b       	subi	r30, 0xB5	; 181
     598:	ff 4f       	sbci	r31, 0xFF	; 255
     59a:	80 81       	ld	r24, Z
     59c:	91 81       	ldd	r25, Z+1	; 0x01
     59e:	00 97       	sbiw	r24, 0x00	; 0
     5a0:	d1 f6       	brne	.-76     	; 0x556 <lcd_set_4bit+0x3f0>
     5a2:	27 c0       	rjmp	.+78     	; 0x5f2 <lcd_set_4bit+0x48c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5a4:	8e 01       	movw	r16, r28
     5a6:	05 5b       	subi	r16, 0xB5	; 181
     5a8:	1f 4f       	sbci	r17, 0xFF	; 255
     5aa:	fe 01       	movw	r30, r28
     5ac:	e3 5b       	subi	r30, 0xB3	; 179
     5ae:	ff 4f       	sbci	r31, 0xFF	; 255
     5b0:	60 81       	ld	r22, Z
     5b2:	71 81       	ldd	r23, Z+1	; 0x01
     5b4:	82 81       	ldd	r24, Z+2	; 0x02
     5b6:	93 81       	ldd	r25, Z+3	; 0x03
     5b8:	0e 94 a3 19 	call	0x3346	; 0x3346 <__fixunssfsi>
     5bc:	dc 01       	movw	r26, r24
     5be:	cb 01       	movw	r24, r22
     5c0:	f8 01       	movw	r30, r16
     5c2:	91 83       	std	Z+1, r25	; 0x01
     5c4:	80 83       	st	Z, r24
     5c6:	de 01       	movw	r26, r28
     5c8:	a9 5b       	subi	r26, 0xB9	; 185
     5ca:	bf 4f       	sbci	r27, 0xFF	; 255
     5cc:	fe 01       	movw	r30, r28
     5ce:	e5 5b       	subi	r30, 0xB5	; 181
     5d0:	ff 4f       	sbci	r31, 0xFF	; 255
     5d2:	80 81       	ld	r24, Z
     5d4:	91 81       	ldd	r25, Z+1	; 0x01
     5d6:	8d 93       	st	X+, r24
     5d8:	9c 93       	st	X, r25
     5da:	fe 01       	movw	r30, r28
     5dc:	e9 5b       	subi	r30, 0xB9	; 185
     5de:	ff 4f       	sbci	r31, 0xFF	; 255
     5e0:	80 81       	ld	r24, Z
     5e2:	91 81       	ldd	r25, Z+1	; 0x01
     5e4:	01 97       	sbiw	r24, 0x01	; 1
     5e6:	f1 f7       	brne	.-4      	; 0x5e4 <lcd_set_4bit+0x47e>
     5e8:	fe 01       	movw	r30, r28
     5ea:	e9 5b       	subi	r30, 0xB9	; 185
     5ec:	ff 4f       	sbci	r31, 0xFF	; 255
     5ee:	91 83       	std	Z+1, r25	; 0x01
     5f0:	80 83       	st	Z, r24

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     5f2:	a8 e2       	ldi	r26, 0x28	; 40
     5f4:	b0 e0       	ldi	r27, 0x00	; 0
     5f6:	e8 e2       	ldi	r30, 0x28	; 40
     5f8:	f0 e0       	ldi	r31, 0x00	; 0
     5fa:	80 81       	ld	r24, Z
     5fc:	8e 7f       	andi	r24, 0xFE	; 254
     5fe:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     600:	a8 e2       	ldi	r26, 0x28	; 40
     602:	b0 e0       	ldi	r27, 0x00	; 0
     604:	e8 e2       	ldi	r30, 0x28	; 40
     606:	f0 e0       	ldi	r31, 0x00	; 0
     608:	80 81       	ld	r24, Z
     60a:	8d 7f       	andi	r24, 0xFD	; 253
     60c:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     60e:	e8 e2       	ldi	r30, 0x28	; 40
     610:	f0 e0       	ldi	r31, 0x00	; 0
     612:	80 e3       	ldi	r24, 0x30	; 48
     614:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     616:	a8 e2       	ldi	r26, 0x28	; 40
     618:	b0 e0       	ldi	r27, 0x00	; 0
     61a:	e8 e2       	ldi	r30, 0x28	; 40
     61c:	f0 e0       	ldi	r31, 0x00	; 0
     61e:	80 81       	ld	r24, Z
     620:	84 60       	ori	r24, 0x04	; 4
     622:	8c 93       	st	X, r24
     624:	fe 01       	movw	r30, r28
     626:	ed 5b       	subi	r30, 0xBD	; 189
     628:	ff 4f       	sbci	r31, 0xFF	; 255
     62a:	80 e0       	ldi	r24, 0x00	; 0
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	a0 ea       	ldi	r26, 0xA0	; 160
     630:	b0 e4       	ldi	r27, 0x40	; 64
     632:	80 83       	st	Z, r24
     634:	91 83       	std	Z+1, r25	; 0x01
     636:	a2 83       	std	Z+2, r26	; 0x02
     638:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     63a:	8e 01       	movw	r16, r28
     63c:	01 5c       	subi	r16, 0xC1	; 193
     63e:	1f 4f       	sbci	r17, 0xFF	; 255
     640:	fe 01       	movw	r30, r28
     642:	ed 5b       	subi	r30, 0xBD	; 189
     644:	ff 4f       	sbci	r31, 0xFF	; 255
     646:	60 81       	ld	r22, Z
     648:	71 81       	ldd	r23, Z+1	; 0x01
     64a:	82 81       	ldd	r24, Z+2	; 0x02
     64c:	93 81       	ldd	r25, Z+3	; 0x03
     64e:	2d ec       	ldi	r18, 0xCD	; 205
     650:	3c ec       	ldi	r19, 0xCC	; 204
     652:	4c e2       	ldi	r20, 0x2C	; 44
     654:	55 e4       	ldi	r21, 0x45	; 69
     656:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__mulsf3>
     65a:	dc 01       	movw	r26, r24
     65c:	cb 01       	movw	r24, r22
     65e:	f8 01       	movw	r30, r16
     660:	80 83       	st	Z, r24
     662:	91 83       	std	Z+1, r25	; 0x01
     664:	a2 83       	std	Z+2, r26	; 0x02
     666:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     668:	fe 01       	movw	r30, r28
     66a:	ff 96       	adiw	r30, 0x3f	; 63
     66c:	60 81       	ld	r22, Z
     66e:	71 81       	ldd	r23, Z+1	; 0x01
     670:	82 81       	ldd	r24, Z+2	; 0x02
     672:	93 81       	ldd	r25, Z+3	; 0x03
     674:	20 e0       	ldi	r18, 0x00	; 0
     676:	30 e0       	ldi	r19, 0x00	; 0
     678:	40 e8       	ldi	r20, 0x80	; 128
     67a:	5f e3       	ldi	r21, 0x3F	; 63
     67c:	0e 94 7f 1d 	call	0x3afe	; 0x3afe <__ltsf2>
     680:	88 23       	and	r24, r24
     682:	2c f4       	brge	.+10     	; 0x68e <lcd_set_4bit+0x528>
		__ticks = 1;
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	9e af       	std	Y+62, r25	; 0x3e
     68a:	8d af       	std	Y+61, r24	; 0x3d
     68c:	46 c0       	rjmp	.+140    	; 0x71a <lcd_set_4bit+0x5b4>
	else if (__tmp > 65535)
     68e:	fe 01       	movw	r30, r28
     690:	ff 96       	adiw	r30, 0x3f	; 63
     692:	60 81       	ld	r22, Z
     694:	71 81       	ldd	r23, Z+1	; 0x01
     696:	82 81       	ldd	r24, Z+2	; 0x02
     698:	93 81       	ldd	r25, Z+3	; 0x03
     69a:	20 e0       	ldi	r18, 0x00	; 0
     69c:	3f ef       	ldi	r19, 0xFF	; 255
     69e:	4f e7       	ldi	r20, 0x7F	; 127
     6a0:	57 e4       	ldi	r21, 0x47	; 71
     6a2:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <__gtsf2>
     6a6:	18 16       	cp	r1, r24
     6a8:	64 f5       	brge	.+88     	; 0x702 <lcd_set_4bit+0x59c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6aa:	fe 01       	movw	r30, r28
     6ac:	ed 5b       	subi	r30, 0xBD	; 189
     6ae:	ff 4f       	sbci	r31, 0xFF	; 255
     6b0:	60 81       	ld	r22, Z
     6b2:	71 81       	ldd	r23, Z+1	; 0x01
     6b4:	82 81       	ldd	r24, Z+2	; 0x02
     6b6:	93 81       	ldd	r25, Z+3	; 0x03
     6b8:	20 e0       	ldi	r18, 0x00	; 0
     6ba:	30 e0       	ldi	r19, 0x00	; 0
     6bc:	40 e2       	ldi	r20, 0x20	; 32
     6be:	51 e4       	ldi	r21, 0x41	; 65
     6c0:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__mulsf3>
     6c4:	dc 01       	movw	r26, r24
     6c6:	cb 01       	movw	r24, r22
     6c8:	bc 01       	movw	r22, r24
     6ca:	cd 01       	movw	r24, r26
     6cc:	0e 94 a3 19 	call	0x3346	; 0x3346 <__fixunssfsi>
     6d0:	dc 01       	movw	r26, r24
     6d2:	cb 01       	movw	r24, r22
     6d4:	9e af       	std	Y+62, r25	; 0x3e
     6d6:	8d af       	std	Y+61, r24	; 0x3d
     6d8:	0f c0       	rjmp	.+30     	; 0x6f8 <lcd_set_4bit+0x592>
     6da:	84 e1       	ldi	r24, 0x14	; 20
     6dc:	91 e0       	ldi	r25, 0x01	; 1
     6de:	9c af       	std	Y+60, r25	; 0x3c
     6e0:	8b af       	std	Y+59, r24	; 0x3b
     6e2:	8b ad       	ldd	r24, Y+59	; 0x3b
     6e4:	9c ad       	ldd	r25, Y+60	; 0x3c
     6e6:	01 97       	sbiw	r24, 0x01	; 1
     6e8:	f1 f7       	brne	.-4      	; 0x6e6 <lcd_set_4bit+0x580>
     6ea:	9c af       	std	Y+60, r25	; 0x3c
     6ec:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6ee:	8d ad       	ldd	r24, Y+61	; 0x3d
     6f0:	9e ad       	ldd	r25, Y+62	; 0x3e
     6f2:	01 97       	sbiw	r24, 0x01	; 1
     6f4:	9e af       	std	Y+62, r25	; 0x3e
     6f6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6f8:	8d ad       	ldd	r24, Y+61	; 0x3d
     6fa:	9e ad       	ldd	r25, Y+62	; 0x3e
     6fc:	00 97       	sbiw	r24, 0x00	; 0
     6fe:	69 f7       	brne	.-38     	; 0x6da <lcd_set_4bit+0x574>
     700:	16 c0       	rjmp	.+44     	; 0x72e <lcd_set_4bit+0x5c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     702:	fe 01       	movw	r30, r28
     704:	ff 96       	adiw	r30, 0x3f	; 63
     706:	60 81       	ld	r22, Z
     708:	71 81       	ldd	r23, Z+1	; 0x01
     70a:	82 81       	ldd	r24, Z+2	; 0x02
     70c:	93 81       	ldd	r25, Z+3	; 0x03
     70e:	0e 94 a3 19 	call	0x3346	; 0x3346 <__fixunssfsi>
     712:	dc 01       	movw	r26, r24
     714:	cb 01       	movw	r24, r22
     716:	9e af       	std	Y+62, r25	; 0x3e
     718:	8d af       	std	Y+61, r24	; 0x3d
     71a:	8d ad       	ldd	r24, Y+61	; 0x3d
     71c:	9e ad       	ldd	r25, Y+62	; 0x3e
     71e:	9a af       	std	Y+58, r25	; 0x3a
     720:	89 af       	std	Y+57, r24	; 0x39
     722:	89 ad       	ldd	r24, Y+57	; 0x39
     724:	9a ad       	ldd	r25, Y+58	; 0x3a
     726:	01 97       	sbiw	r24, 0x01	; 1
     728:	f1 f7       	brne	.-4      	; 0x726 <lcd_set_4bit+0x5c0>
     72a:	9a af       	std	Y+58, r25	; 0x3a
     72c:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     72e:	a8 e2       	ldi	r26, 0x28	; 40
     730:	b0 e0       	ldi	r27, 0x00	; 0
     732:	e8 e2       	ldi	r30, 0x28	; 40
     734:	f0 e0       	ldi	r31, 0x00	; 0
     736:	80 81       	ld	r24, Z
     738:	8b 7f       	andi	r24, 0xFB	; 251
     73a:	8c 93       	st	X, r24
     73c:	80 e0       	ldi	r24, 0x00	; 0
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	a0 e8       	ldi	r26, 0x80	; 128
     742:	bf e3       	ldi	r27, 0x3F	; 63
     744:	8d ab       	std	Y+53, r24	; 0x35
     746:	9e ab       	std	Y+54, r25	; 0x36
     748:	af ab       	std	Y+55, r26	; 0x37
     74a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     74c:	6d a9       	ldd	r22, Y+53	; 0x35
     74e:	7e a9       	ldd	r23, Y+54	; 0x36
     750:	8f a9       	ldd	r24, Y+55	; 0x37
     752:	98 ad       	ldd	r25, Y+56	; 0x38
     754:	2d ec       	ldi	r18, 0xCD	; 205
     756:	3c ec       	ldi	r19, 0xCC	; 204
     758:	4c e2       	ldi	r20, 0x2C	; 44
     75a:	55 e4       	ldi	r21, 0x45	; 69
     75c:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__mulsf3>
     760:	dc 01       	movw	r26, r24
     762:	cb 01       	movw	r24, r22
     764:	89 ab       	std	Y+49, r24	; 0x31
     766:	9a ab       	std	Y+50, r25	; 0x32
     768:	ab ab       	std	Y+51, r26	; 0x33
     76a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     76c:	69 a9       	ldd	r22, Y+49	; 0x31
     76e:	7a a9       	ldd	r23, Y+50	; 0x32
     770:	8b a9       	ldd	r24, Y+51	; 0x33
     772:	9c a9       	ldd	r25, Y+52	; 0x34
     774:	20 e0       	ldi	r18, 0x00	; 0
     776:	30 e0       	ldi	r19, 0x00	; 0
     778:	40 e8       	ldi	r20, 0x80	; 128
     77a:	5f e3       	ldi	r21, 0x3F	; 63
     77c:	0e 94 7f 1d 	call	0x3afe	; 0x3afe <__ltsf2>
     780:	88 23       	and	r24, r24
     782:	2c f4       	brge	.+10     	; 0x78e <lcd_set_4bit+0x628>
		__ticks = 1;
     784:	81 e0       	ldi	r24, 0x01	; 1
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	98 ab       	std	Y+48, r25	; 0x30
     78a:	8f a7       	std	Y+47, r24	; 0x2f
     78c:	3f c0       	rjmp	.+126    	; 0x80c <lcd_set_4bit+0x6a6>
	else if (__tmp > 65535)
     78e:	69 a9       	ldd	r22, Y+49	; 0x31
     790:	7a a9       	ldd	r23, Y+50	; 0x32
     792:	8b a9       	ldd	r24, Y+51	; 0x33
     794:	9c a9       	ldd	r25, Y+52	; 0x34
     796:	20 e0       	ldi	r18, 0x00	; 0
     798:	3f ef       	ldi	r19, 0xFF	; 255
     79a:	4f e7       	ldi	r20, 0x7F	; 127
     79c:	57 e4       	ldi	r21, 0x47	; 71
     79e:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <__gtsf2>
     7a2:	18 16       	cp	r1, r24
     7a4:	4c f5       	brge	.+82     	; 0x7f8 <lcd_set_4bit+0x692>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7a6:	6d a9       	ldd	r22, Y+53	; 0x35
     7a8:	7e a9       	ldd	r23, Y+54	; 0x36
     7aa:	8f a9       	ldd	r24, Y+55	; 0x37
     7ac:	98 ad       	ldd	r25, Y+56	; 0x38
     7ae:	20 e0       	ldi	r18, 0x00	; 0
     7b0:	30 e0       	ldi	r19, 0x00	; 0
     7b2:	40 e2       	ldi	r20, 0x20	; 32
     7b4:	51 e4       	ldi	r21, 0x41	; 65
     7b6:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__mulsf3>
     7ba:	dc 01       	movw	r26, r24
     7bc:	cb 01       	movw	r24, r22
     7be:	bc 01       	movw	r22, r24
     7c0:	cd 01       	movw	r24, r26
     7c2:	0e 94 a3 19 	call	0x3346	; 0x3346 <__fixunssfsi>
     7c6:	dc 01       	movw	r26, r24
     7c8:	cb 01       	movw	r24, r22
     7ca:	98 ab       	std	Y+48, r25	; 0x30
     7cc:	8f a7       	std	Y+47, r24	; 0x2f
     7ce:	0f c0       	rjmp	.+30     	; 0x7ee <lcd_set_4bit+0x688>
     7d0:	84 e1       	ldi	r24, 0x14	; 20
     7d2:	91 e0       	ldi	r25, 0x01	; 1
     7d4:	9e a7       	std	Y+46, r25	; 0x2e
     7d6:	8d a7       	std	Y+45, r24	; 0x2d
     7d8:	8d a5       	ldd	r24, Y+45	; 0x2d
     7da:	9e a5       	ldd	r25, Y+46	; 0x2e
     7dc:	01 97       	sbiw	r24, 0x01	; 1
     7de:	f1 f7       	brne	.-4      	; 0x7dc <lcd_set_4bit+0x676>
     7e0:	9e a7       	std	Y+46, r25	; 0x2e
     7e2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7e4:	8f a5       	ldd	r24, Y+47	; 0x2f
     7e6:	98 a9       	ldd	r25, Y+48	; 0x30
     7e8:	01 97       	sbiw	r24, 0x01	; 1
     7ea:	98 ab       	std	Y+48, r25	; 0x30
     7ec:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7ee:	8f a5       	ldd	r24, Y+47	; 0x2f
     7f0:	98 a9       	ldd	r25, Y+48	; 0x30
     7f2:	00 97       	sbiw	r24, 0x00	; 0
     7f4:	69 f7       	brne	.-38     	; 0x7d0 <lcd_set_4bit+0x66a>
     7f6:	14 c0       	rjmp	.+40     	; 0x820 <lcd_set_4bit+0x6ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7f8:	69 a9       	ldd	r22, Y+49	; 0x31
     7fa:	7a a9       	ldd	r23, Y+50	; 0x32
     7fc:	8b a9       	ldd	r24, Y+51	; 0x33
     7fe:	9c a9       	ldd	r25, Y+52	; 0x34
     800:	0e 94 a3 19 	call	0x3346	; 0x3346 <__fixunssfsi>
     804:	dc 01       	movw	r26, r24
     806:	cb 01       	movw	r24, r22
     808:	98 ab       	std	Y+48, r25	; 0x30
     80a:	8f a7       	std	Y+47, r24	; 0x2f
     80c:	8f a5       	ldd	r24, Y+47	; 0x2f
     80e:	98 a9       	ldd	r25, Y+48	; 0x30
     810:	9c a7       	std	Y+44, r25	; 0x2c
     812:	8b a7       	std	Y+43, r24	; 0x2b
     814:	8b a5       	ldd	r24, Y+43	; 0x2b
     816:	9c a5       	ldd	r25, Y+44	; 0x2c
     818:	01 97       	sbiw	r24, 0x01	; 1
     81a:	f1 f7       	brne	.-4      	; 0x818 <lcd_set_4bit+0x6b2>
     81c:	9c a7       	std	Y+44, r25	; 0x2c
     81e:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     820:	a8 e2       	ldi	r26, 0x28	; 40
     822:	b0 e0       	ldi	r27, 0x00	; 0
     824:	e8 e2       	ldi	r30, 0x28	; 40
     826:	f0 e0       	ldi	r31, 0x00	; 0
     828:	80 81       	ld	r24, Z
     82a:	8e 7f       	andi	r24, 0xFE	; 254
     82c:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     82e:	a8 e2       	ldi	r26, 0x28	; 40
     830:	b0 e0       	ldi	r27, 0x00	; 0
     832:	e8 e2       	ldi	r30, 0x28	; 40
     834:	f0 e0       	ldi	r31, 0x00	; 0
     836:	80 81       	ld	r24, Z
     838:	8d 7f       	andi	r24, 0xFD	; 253
     83a:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     83c:	e8 e2       	ldi	r30, 0x28	; 40
     83e:	f0 e0       	ldi	r31, 0x00	; 0
     840:	80 e3       	ldi	r24, 0x30	; 48
     842:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     844:	a8 e2       	ldi	r26, 0x28	; 40
     846:	b0 e0       	ldi	r27, 0x00	; 0
     848:	e8 e2       	ldi	r30, 0x28	; 40
     84a:	f0 e0       	ldi	r31, 0x00	; 0
     84c:	80 81       	ld	r24, Z
     84e:	84 60       	ori	r24, 0x04	; 4
     850:	8c 93       	st	X, r24
     852:	80 e0       	ldi	r24, 0x00	; 0
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	a0 ea       	ldi	r26, 0xA0	; 160
     858:	b0 e4       	ldi	r27, 0x40	; 64
     85a:	8f a3       	std	Y+39, r24	; 0x27
     85c:	98 a7       	std	Y+40, r25	; 0x28
     85e:	a9 a7       	std	Y+41, r26	; 0x29
     860:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     862:	6f a1       	ldd	r22, Y+39	; 0x27
     864:	78 a5       	ldd	r23, Y+40	; 0x28
     866:	89 a5       	ldd	r24, Y+41	; 0x29
     868:	9a a5       	ldd	r25, Y+42	; 0x2a
     86a:	2d ec       	ldi	r18, 0xCD	; 205
     86c:	3c ec       	ldi	r19, 0xCC	; 204
     86e:	4c e2       	ldi	r20, 0x2C	; 44
     870:	55 e4       	ldi	r21, 0x45	; 69
     872:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__mulsf3>
     876:	dc 01       	movw	r26, r24
     878:	cb 01       	movw	r24, r22
     87a:	8b a3       	std	Y+35, r24	; 0x23
     87c:	9c a3       	std	Y+36, r25	; 0x24
     87e:	ad a3       	std	Y+37, r26	; 0x25
     880:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     882:	6b a1       	ldd	r22, Y+35	; 0x23
     884:	7c a1       	ldd	r23, Y+36	; 0x24
     886:	8d a1       	ldd	r24, Y+37	; 0x25
     888:	9e a1       	ldd	r25, Y+38	; 0x26
     88a:	20 e0       	ldi	r18, 0x00	; 0
     88c:	30 e0       	ldi	r19, 0x00	; 0
     88e:	40 e8       	ldi	r20, 0x80	; 128
     890:	5f e3       	ldi	r21, 0x3F	; 63
     892:	0e 94 7f 1d 	call	0x3afe	; 0x3afe <__ltsf2>
     896:	88 23       	and	r24, r24
     898:	2c f4       	brge	.+10     	; 0x8a4 <lcd_set_4bit+0x73e>
		__ticks = 1;
     89a:	81 e0       	ldi	r24, 0x01	; 1
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	9a a3       	std	Y+34, r25	; 0x22
     8a0:	89 a3       	std	Y+33, r24	; 0x21
     8a2:	3f c0       	rjmp	.+126    	; 0x922 <lcd_set_4bit+0x7bc>
	else if (__tmp > 65535)
     8a4:	6b a1       	ldd	r22, Y+35	; 0x23
     8a6:	7c a1       	ldd	r23, Y+36	; 0x24
     8a8:	8d a1       	ldd	r24, Y+37	; 0x25
     8aa:	9e a1       	ldd	r25, Y+38	; 0x26
     8ac:	20 e0       	ldi	r18, 0x00	; 0
     8ae:	3f ef       	ldi	r19, 0xFF	; 255
     8b0:	4f e7       	ldi	r20, 0x7F	; 127
     8b2:	57 e4       	ldi	r21, 0x47	; 71
     8b4:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <__gtsf2>
     8b8:	18 16       	cp	r1, r24
     8ba:	4c f5       	brge	.+82     	; 0x90e <lcd_set_4bit+0x7a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8bc:	6f a1       	ldd	r22, Y+39	; 0x27
     8be:	78 a5       	ldd	r23, Y+40	; 0x28
     8c0:	89 a5       	ldd	r24, Y+41	; 0x29
     8c2:	9a a5       	ldd	r25, Y+42	; 0x2a
     8c4:	20 e0       	ldi	r18, 0x00	; 0
     8c6:	30 e0       	ldi	r19, 0x00	; 0
     8c8:	40 e2       	ldi	r20, 0x20	; 32
     8ca:	51 e4       	ldi	r21, 0x41	; 65
     8cc:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__mulsf3>
     8d0:	dc 01       	movw	r26, r24
     8d2:	cb 01       	movw	r24, r22
     8d4:	bc 01       	movw	r22, r24
     8d6:	cd 01       	movw	r24, r26
     8d8:	0e 94 a3 19 	call	0x3346	; 0x3346 <__fixunssfsi>
     8dc:	dc 01       	movw	r26, r24
     8de:	cb 01       	movw	r24, r22
     8e0:	9a a3       	std	Y+34, r25	; 0x22
     8e2:	89 a3       	std	Y+33, r24	; 0x21
     8e4:	0f c0       	rjmp	.+30     	; 0x904 <lcd_set_4bit+0x79e>
     8e6:	84 e1       	ldi	r24, 0x14	; 20
     8e8:	91 e0       	ldi	r25, 0x01	; 1
     8ea:	98 a3       	std	Y+32, r25	; 0x20
     8ec:	8f 8f       	std	Y+31, r24	; 0x1f
     8ee:	8f 8d       	ldd	r24, Y+31	; 0x1f
     8f0:	98 a1       	ldd	r25, Y+32	; 0x20
     8f2:	01 97       	sbiw	r24, 0x01	; 1
     8f4:	f1 f7       	brne	.-4      	; 0x8f2 <lcd_set_4bit+0x78c>
     8f6:	98 a3       	std	Y+32, r25	; 0x20
     8f8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8fa:	89 a1       	ldd	r24, Y+33	; 0x21
     8fc:	9a a1       	ldd	r25, Y+34	; 0x22
     8fe:	01 97       	sbiw	r24, 0x01	; 1
     900:	9a a3       	std	Y+34, r25	; 0x22
     902:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     904:	89 a1       	ldd	r24, Y+33	; 0x21
     906:	9a a1       	ldd	r25, Y+34	; 0x22
     908:	00 97       	sbiw	r24, 0x00	; 0
     90a:	69 f7       	brne	.-38     	; 0x8e6 <lcd_set_4bit+0x780>
     90c:	14 c0       	rjmp	.+40     	; 0x936 <lcd_set_4bit+0x7d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     90e:	6b a1       	ldd	r22, Y+35	; 0x23
     910:	7c a1       	ldd	r23, Y+36	; 0x24
     912:	8d a1       	ldd	r24, Y+37	; 0x25
     914:	9e a1       	ldd	r25, Y+38	; 0x26
     916:	0e 94 a3 19 	call	0x3346	; 0x3346 <__fixunssfsi>
     91a:	dc 01       	movw	r26, r24
     91c:	cb 01       	movw	r24, r22
     91e:	9a a3       	std	Y+34, r25	; 0x22
     920:	89 a3       	std	Y+33, r24	; 0x21
     922:	89 a1       	ldd	r24, Y+33	; 0x21
     924:	9a a1       	ldd	r25, Y+34	; 0x22
     926:	9e 8f       	std	Y+30, r25	; 0x1e
     928:	8d 8f       	std	Y+29, r24	; 0x1d
     92a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     92c:	9e 8d       	ldd	r25, Y+30	; 0x1e
     92e:	01 97       	sbiw	r24, 0x01	; 1
     930:	f1 f7       	brne	.-4      	; 0x92e <lcd_set_4bit+0x7c8>
     932:	9e 8f       	std	Y+30, r25	; 0x1e
     934:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     936:	a8 e2       	ldi	r26, 0x28	; 40
     938:	b0 e0       	ldi	r27, 0x00	; 0
     93a:	e8 e2       	ldi	r30, 0x28	; 40
     93c:	f0 e0       	ldi	r31, 0x00	; 0
     93e:	80 81       	ld	r24, Z
     940:	8b 7f       	andi	r24, 0xFB	; 251
     942:	8c 93       	st	X, r24
     944:	80 e0       	ldi	r24, 0x00	; 0
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	a0 e8       	ldi	r26, 0x80	; 128
     94a:	bf e3       	ldi	r27, 0x3F	; 63
     94c:	89 8f       	std	Y+25, r24	; 0x19
     94e:	9a 8f       	std	Y+26, r25	; 0x1a
     950:	ab 8f       	std	Y+27, r26	; 0x1b
     952:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     954:	69 8d       	ldd	r22, Y+25	; 0x19
     956:	7a 8d       	ldd	r23, Y+26	; 0x1a
     958:	8b 8d       	ldd	r24, Y+27	; 0x1b
     95a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     95c:	2d ec       	ldi	r18, 0xCD	; 205
     95e:	3c ec       	ldi	r19, 0xCC	; 204
     960:	4c e2       	ldi	r20, 0x2C	; 44
     962:	55 e4       	ldi	r21, 0x45	; 69
     964:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__mulsf3>
     968:	dc 01       	movw	r26, r24
     96a:	cb 01       	movw	r24, r22
     96c:	8d 8b       	std	Y+21, r24	; 0x15
     96e:	9e 8b       	std	Y+22, r25	; 0x16
     970:	af 8b       	std	Y+23, r26	; 0x17
     972:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     974:	6d 89       	ldd	r22, Y+21	; 0x15
     976:	7e 89       	ldd	r23, Y+22	; 0x16
     978:	8f 89       	ldd	r24, Y+23	; 0x17
     97a:	98 8d       	ldd	r25, Y+24	; 0x18
     97c:	20 e0       	ldi	r18, 0x00	; 0
     97e:	30 e0       	ldi	r19, 0x00	; 0
     980:	40 e8       	ldi	r20, 0x80	; 128
     982:	5f e3       	ldi	r21, 0x3F	; 63
     984:	0e 94 7f 1d 	call	0x3afe	; 0x3afe <__ltsf2>
     988:	88 23       	and	r24, r24
     98a:	2c f4       	brge	.+10     	; 0x996 <lcd_set_4bit+0x830>
		__ticks = 1;
     98c:	81 e0       	ldi	r24, 0x01	; 1
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	9c 8b       	std	Y+20, r25	; 0x14
     992:	8b 8b       	std	Y+19, r24	; 0x13
     994:	3f c0       	rjmp	.+126    	; 0xa14 <lcd_set_4bit+0x8ae>
	else if (__tmp > 65535)
     996:	6d 89       	ldd	r22, Y+21	; 0x15
     998:	7e 89       	ldd	r23, Y+22	; 0x16
     99a:	8f 89       	ldd	r24, Y+23	; 0x17
     99c:	98 8d       	ldd	r25, Y+24	; 0x18
     99e:	20 e0       	ldi	r18, 0x00	; 0
     9a0:	3f ef       	ldi	r19, 0xFF	; 255
     9a2:	4f e7       	ldi	r20, 0x7F	; 127
     9a4:	57 e4       	ldi	r21, 0x47	; 71
     9a6:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <__gtsf2>
     9aa:	18 16       	cp	r1, r24
     9ac:	4c f5       	brge	.+82     	; 0xa00 <lcd_set_4bit+0x89a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9ae:	69 8d       	ldd	r22, Y+25	; 0x19
     9b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
     9b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     9b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     9b6:	20 e0       	ldi	r18, 0x00	; 0
     9b8:	30 e0       	ldi	r19, 0x00	; 0
     9ba:	40 e2       	ldi	r20, 0x20	; 32
     9bc:	51 e4       	ldi	r21, 0x41	; 65
     9be:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__mulsf3>
     9c2:	dc 01       	movw	r26, r24
     9c4:	cb 01       	movw	r24, r22
     9c6:	bc 01       	movw	r22, r24
     9c8:	cd 01       	movw	r24, r26
     9ca:	0e 94 a3 19 	call	0x3346	; 0x3346 <__fixunssfsi>
     9ce:	dc 01       	movw	r26, r24
     9d0:	cb 01       	movw	r24, r22
     9d2:	9c 8b       	std	Y+20, r25	; 0x14
     9d4:	8b 8b       	std	Y+19, r24	; 0x13
     9d6:	0f c0       	rjmp	.+30     	; 0x9f6 <lcd_set_4bit+0x890>
     9d8:	84 e1       	ldi	r24, 0x14	; 20
     9da:	91 e0       	ldi	r25, 0x01	; 1
     9dc:	9a 8b       	std	Y+18, r25	; 0x12
     9de:	89 8b       	std	Y+17, r24	; 0x11
     9e0:	89 89       	ldd	r24, Y+17	; 0x11
     9e2:	9a 89       	ldd	r25, Y+18	; 0x12
     9e4:	01 97       	sbiw	r24, 0x01	; 1
     9e6:	f1 f7       	brne	.-4      	; 0x9e4 <lcd_set_4bit+0x87e>
     9e8:	9a 8b       	std	Y+18, r25	; 0x12
     9ea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9ec:	8b 89       	ldd	r24, Y+19	; 0x13
     9ee:	9c 89       	ldd	r25, Y+20	; 0x14
     9f0:	01 97       	sbiw	r24, 0x01	; 1
     9f2:	9c 8b       	std	Y+20, r25	; 0x14
     9f4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9f6:	8b 89       	ldd	r24, Y+19	; 0x13
     9f8:	9c 89       	ldd	r25, Y+20	; 0x14
     9fa:	00 97       	sbiw	r24, 0x00	; 0
     9fc:	69 f7       	brne	.-38     	; 0x9d8 <lcd_set_4bit+0x872>
     9fe:	14 c0       	rjmp	.+40     	; 0xa28 <lcd_set_4bit+0x8c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a00:	6d 89       	ldd	r22, Y+21	; 0x15
     a02:	7e 89       	ldd	r23, Y+22	; 0x16
     a04:	8f 89       	ldd	r24, Y+23	; 0x17
     a06:	98 8d       	ldd	r25, Y+24	; 0x18
     a08:	0e 94 a3 19 	call	0x3346	; 0x3346 <__fixunssfsi>
     a0c:	dc 01       	movw	r26, r24
     a0e:	cb 01       	movw	r24, r22
     a10:	9c 8b       	std	Y+20, r25	; 0x14
     a12:	8b 8b       	std	Y+19, r24	; 0x13
     a14:	8b 89       	ldd	r24, Y+19	; 0x13
     a16:	9c 89       	ldd	r25, Y+20	; 0x14
     a18:	98 8b       	std	Y+16, r25	; 0x10
     a1a:	8f 87       	std	Y+15, r24	; 0x0f
     a1c:	8f 85       	ldd	r24, Y+15	; 0x0f
     a1e:	98 89       	ldd	r25, Y+16	; 0x10
     a20:	01 97       	sbiw	r24, 0x01	; 1
     a22:	f1 f7       	brne	.-4      	; 0xa20 <lcd_set_4bit+0x8ba>
     a24:	98 8b       	std	Y+16, r25	; 0x10
     a26:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     a28:	a8 e2       	ldi	r26, 0x28	; 40
     a2a:	b0 e0       	ldi	r27, 0x00	; 0
     a2c:	e8 e2       	ldi	r30, 0x28	; 40
     a2e:	f0 e0       	ldi	r31, 0x00	; 0
     a30:	80 81       	ld	r24, Z
     a32:	8e 7f       	andi	r24, 0xFE	; 254
     a34:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     a36:	a8 e2       	ldi	r26, 0x28	; 40
     a38:	b0 e0       	ldi	r27, 0x00	; 0
     a3a:	e8 e2       	ldi	r30, 0x28	; 40
     a3c:	f0 e0       	ldi	r31, 0x00	; 0
     a3e:	80 81       	ld	r24, Z
     a40:	8d 7f       	andi	r24, 0xFD	; 253
     a42:	8c 93       	st	X, r24
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     a44:	e8 e2       	ldi	r30, 0x28	; 40
     a46:	f0 e0       	ldi	r31, 0x00	; 0
     a48:	80 e2       	ldi	r24, 0x20	; 32
     a4a:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     a4c:	a8 e2       	ldi	r26, 0x28	; 40
     a4e:	b0 e0       	ldi	r27, 0x00	; 0
     a50:	e8 e2       	ldi	r30, 0x28	; 40
     a52:	f0 e0       	ldi	r31, 0x00	; 0
     a54:	80 81       	ld	r24, Z
     a56:	84 60       	ori	r24, 0x04	; 4
     a58:	8c 93       	st	X, r24
     a5a:	80 e0       	ldi	r24, 0x00	; 0
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	a0 ea       	ldi	r26, 0xA0	; 160
     a60:	b0 e4       	ldi	r27, 0x40	; 64
     a62:	8b 87       	std	Y+11, r24	; 0x0b
     a64:	9c 87       	std	Y+12, r25	; 0x0c
     a66:	ad 87       	std	Y+13, r26	; 0x0d
     a68:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     a6a:	6b 85       	ldd	r22, Y+11	; 0x0b
     a6c:	7c 85       	ldd	r23, Y+12	; 0x0c
     a6e:	8d 85       	ldd	r24, Y+13	; 0x0d
     a70:	9e 85       	ldd	r25, Y+14	; 0x0e
     a72:	2d ec       	ldi	r18, 0xCD	; 205
     a74:	3c ec       	ldi	r19, 0xCC	; 204
     a76:	4c e2       	ldi	r20, 0x2C	; 44
     a78:	55 e4       	ldi	r21, 0x45	; 69
     a7a:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__mulsf3>
     a7e:	dc 01       	movw	r26, r24
     a80:	cb 01       	movw	r24, r22
     a82:	8f 83       	std	Y+7, r24	; 0x07
     a84:	98 87       	std	Y+8, r25	; 0x08
     a86:	a9 87       	std	Y+9, r26	; 0x09
     a88:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     a8a:	6f 81       	ldd	r22, Y+7	; 0x07
     a8c:	78 85       	ldd	r23, Y+8	; 0x08
     a8e:	89 85       	ldd	r24, Y+9	; 0x09
     a90:	9a 85       	ldd	r25, Y+10	; 0x0a
     a92:	20 e0       	ldi	r18, 0x00	; 0
     a94:	30 e0       	ldi	r19, 0x00	; 0
     a96:	40 e8       	ldi	r20, 0x80	; 128
     a98:	5f e3       	ldi	r21, 0x3F	; 63
     a9a:	0e 94 7f 1d 	call	0x3afe	; 0x3afe <__ltsf2>
     a9e:	88 23       	and	r24, r24
     aa0:	2c f4       	brge	.+10     	; 0xaac <lcd_set_4bit+0x946>
		__ticks = 1;
     aa2:	81 e0       	ldi	r24, 0x01	; 1
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	9e 83       	std	Y+6, r25	; 0x06
     aa8:	8d 83       	std	Y+5, r24	; 0x05
     aaa:	3f c0       	rjmp	.+126    	; 0xb2a <lcd_set_4bit+0x9c4>
	else if (__tmp > 65535)
     aac:	6f 81       	ldd	r22, Y+7	; 0x07
     aae:	78 85       	ldd	r23, Y+8	; 0x08
     ab0:	89 85       	ldd	r24, Y+9	; 0x09
     ab2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ab4:	20 e0       	ldi	r18, 0x00	; 0
     ab6:	3f ef       	ldi	r19, 0xFF	; 255
     ab8:	4f e7       	ldi	r20, 0x7F	; 127
     aba:	57 e4       	ldi	r21, 0x47	; 71
     abc:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <__gtsf2>
     ac0:	18 16       	cp	r1, r24
     ac2:	4c f5       	brge	.+82     	; 0xb16 <lcd_set_4bit+0x9b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ac4:	6b 85       	ldd	r22, Y+11	; 0x0b
     ac6:	7c 85       	ldd	r23, Y+12	; 0x0c
     ac8:	8d 85       	ldd	r24, Y+13	; 0x0d
     aca:	9e 85       	ldd	r25, Y+14	; 0x0e
     acc:	20 e0       	ldi	r18, 0x00	; 0
     ace:	30 e0       	ldi	r19, 0x00	; 0
     ad0:	40 e2       	ldi	r20, 0x20	; 32
     ad2:	51 e4       	ldi	r21, 0x41	; 65
     ad4:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__mulsf3>
     ad8:	dc 01       	movw	r26, r24
     ada:	cb 01       	movw	r24, r22
     adc:	bc 01       	movw	r22, r24
     ade:	cd 01       	movw	r24, r26
     ae0:	0e 94 a3 19 	call	0x3346	; 0x3346 <__fixunssfsi>
     ae4:	dc 01       	movw	r26, r24
     ae6:	cb 01       	movw	r24, r22
     ae8:	9e 83       	std	Y+6, r25	; 0x06
     aea:	8d 83       	std	Y+5, r24	; 0x05
     aec:	0f c0       	rjmp	.+30     	; 0xb0c <lcd_set_4bit+0x9a6>
     aee:	84 e1       	ldi	r24, 0x14	; 20
     af0:	91 e0       	ldi	r25, 0x01	; 1
     af2:	9c 83       	std	Y+4, r25	; 0x04
     af4:	8b 83       	std	Y+3, r24	; 0x03
     af6:	8b 81       	ldd	r24, Y+3	; 0x03
     af8:	9c 81       	ldd	r25, Y+4	; 0x04
     afa:	01 97       	sbiw	r24, 0x01	; 1
     afc:	f1 f7       	brne	.-4      	; 0xafa <lcd_set_4bit+0x994>
     afe:	9c 83       	std	Y+4, r25	; 0x04
     b00:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b02:	8d 81       	ldd	r24, Y+5	; 0x05
     b04:	9e 81       	ldd	r25, Y+6	; 0x06
     b06:	01 97       	sbiw	r24, 0x01	; 1
     b08:	9e 83       	std	Y+6, r25	; 0x06
     b0a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b0c:	8d 81       	ldd	r24, Y+5	; 0x05
     b0e:	9e 81       	ldd	r25, Y+6	; 0x06
     b10:	00 97       	sbiw	r24, 0x00	; 0
     b12:	69 f7       	brne	.-38     	; 0xaee <lcd_set_4bit+0x988>
     b14:	14 c0       	rjmp	.+40     	; 0xb3e <lcd_set_4bit+0x9d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b16:	6f 81       	ldd	r22, Y+7	; 0x07
     b18:	78 85       	ldd	r23, Y+8	; 0x08
     b1a:	89 85       	ldd	r24, Y+9	; 0x09
     b1c:	9a 85       	ldd	r25, Y+10	; 0x0a
     b1e:	0e 94 a3 19 	call	0x3346	; 0x3346 <__fixunssfsi>
     b22:	dc 01       	movw	r26, r24
     b24:	cb 01       	movw	r24, r22
     b26:	9e 83       	std	Y+6, r25	; 0x06
     b28:	8d 83       	std	Y+5, r24	; 0x05
     b2a:	8d 81       	ldd	r24, Y+5	; 0x05
     b2c:	9e 81       	ldd	r25, Y+6	; 0x06
     b2e:	9a 83       	std	Y+2, r25	; 0x02
     b30:	89 83       	std	Y+1, r24	; 0x01
     b32:	89 81       	ldd	r24, Y+1	; 0x01
     b34:	9a 81       	ldd	r25, Y+2	; 0x02
     b36:	01 97       	sbiw	r24, 0x01	; 1
     b38:	f1 f7       	brne	.-4      	; 0xb36 <lcd_set_4bit+0x9d0>
     b3a:	9a 83       	std	Y+2, r25	; 0x02
     b3c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     b3e:	a8 e2       	ldi	r26, 0x28	; 40
     b40:	b0 e0       	ldi	r27, 0x00	; 0
     b42:	e8 e2       	ldi	r30, 0x28	; 40
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	80 81       	ld	r24, Z
     b48:	8b 7f       	andi	r24, 0xFB	; 251
     b4a:	8c 93       	st	X, r24

	
}
     b4c:	c0 59       	subi	r28, 0x90	; 144
     b4e:	df 4f       	sbci	r29, 0xFF	; 255
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	cf 91       	pop	r28
     b5c:	df 91       	pop	r29
     b5e:	1f 91       	pop	r17
     b60:	0f 91       	pop	r16
     b62:	08 95       	ret

00000b64 <lcd_init>:

//Function to Initialize LCD
void lcd_init()
{
     b64:	df 93       	push	r29
     b66:	cf 93       	push	r28
     b68:	cd b7       	in	r28, 0x3d	; 61
     b6a:	de b7       	in	r29, 0x3e	; 62
     b6c:	2e 97       	sbiw	r28, 0x0e	; 14
     b6e:	0f b6       	in	r0, 0x3f	; 63
     b70:	f8 94       	cli
     b72:	de bf       	out	0x3e, r29	; 62
     b74:	0f be       	out	0x3f, r0	; 63
     b76:	cd bf       	out	0x3d, r28	; 61
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	a0 e8       	ldi	r26, 0x80	; 128
     b7e:	bf e3       	ldi	r27, 0x3F	; 63
     b80:	8b 87       	std	Y+11, r24	; 0x0b
     b82:	9c 87       	std	Y+12, r25	; 0x0c
     b84:	ad 87       	std	Y+13, r26	; 0x0d
     b86:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b88:	6b 85       	ldd	r22, Y+11	; 0x0b
     b8a:	7c 85       	ldd	r23, Y+12	; 0x0c
     b8c:	8d 85       	ldd	r24, Y+13	; 0x0d
     b8e:	9e 85       	ldd	r25, Y+14	; 0x0e
     b90:	2d ec       	ldi	r18, 0xCD	; 205
     b92:	3c ec       	ldi	r19, 0xCC	; 204
     b94:	4c e2       	ldi	r20, 0x2C	; 44
     b96:	55 e4       	ldi	r21, 0x45	; 69
     b98:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__mulsf3>
     b9c:	dc 01       	movw	r26, r24
     b9e:	cb 01       	movw	r24, r22
     ba0:	8f 83       	std	Y+7, r24	; 0x07
     ba2:	98 87       	std	Y+8, r25	; 0x08
     ba4:	a9 87       	std	Y+9, r26	; 0x09
     ba6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ba8:	6f 81       	ldd	r22, Y+7	; 0x07
     baa:	78 85       	ldd	r23, Y+8	; 0x08
     bac:	89 85       	ldd	r24, Y+9	; 0x09
     bae:	9a 85       	ldd	r25, Y+10	; 0x0a
     bb0:	20 e0       	ldi	r18, 0x00	; 0
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	40 e8       	ldi	r20, 0x80	; 128
     bb6:	5f e3       	ldi	r21, 0x3F	; 63
     bb8:	0e 94 7f 1d 	call	0x3afe	; 0x3afe <__ltsf2>
     bbc:	88 23       	and	r24, r24
     bbe:	2c f4       	brge	.+10     	; 0xbca <lcd_init+0x66>
		__ticks = 1;
     bc0:	81 e0       	ldi	r24, 0x01	; 1
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	9e 83       	std	Y+6, r25	; 0x06
     bc6:	8d 83       	std	Y+5, r24	; 0x05
     bc8:	3f c0       	rjmp	.+126    	; 0xc48 <lcd_init+0xe4>
	else if (__tmp > 65535)
     bca:	6f 81       	ldd	r22, Y+7	; 0x07
     bcc:	78 85       	ldd	r23, Y+8	; 0x08
     bce:	89 85       	ldd	r24, Y+9	; 0x09
     bd0:	9a 85       	ldd	r25, Y+10	; 0x0a
     bd2:	20 e0       	ldi	r18, 0x00	; 0
     bd4:	3f ef       	ldi	r19, 0xFF	; 255
     bd6:	4f e7       	ldi	r20, 0x7F	; 127
     bd8:	57 e4       	ldi	r21, 0x47	; 71
     bda:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <__gtsf2>
     bde:	18 16       	cp	r1, r24
     be0:	4c f5       	brge	.+82     	; 0xc34 <lcd_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     be2:	6b 85       	ldd	r22, Y+11	; 0x0b
     be4:	7c 85       	ldd	r23, Y+12	; 0x0c
     be6:	8d 85       	ldd	r24, Y+13	; 0x0d
     be8:	9e 85       	ldd	r25, Y+14	; 0x0e
     bea:	20 e0       	ldi	r18, 0x00	; 0
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	40 e2       	ldi	r20, 0x20	; 32
     bf0:	51 e4       	ldi	r21, 0x41	; 65
     bf2:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__mulsf3>
     bf6:	dc 01       	movw	r26, r24
     bf8:	cb 01       	movw	r24, r22
     bfa:	bc 01       	movw	r22, r24
     bfc:	cd 01       	movw	r24, r26
     bfe:	0e 94 a3 19 	call	0x3346	; 0x3346 <__fixunssfsi>
     c02:	dc 01       	movw	r26, r24
     c04:	cb 01       	movw	r24, r22
     c06:	9e 83       	std	Y+6, r25	; 0x06
     c08:	8d 83       	std	Y+5, r24	; 0x05
     c0a:	0f c0       	rjmp	.+30     	; 0xc2a <lcd_init+0xc6>
     c0c:	84 e1       	ldi	r24, 0x14	; 20
     c0e:	91 e0       	ldi	r25, 0x01	; 1
     c10:	9c 83       	std	Y+4, r25	; 0x04
     c12:	8b 83       	std	Y+3, r24	; 0x03
     c14:	8b 81       	ldd	r24, Y+3	; 0x03
     c16:	9c 81       	ldd	r25, Y+4	; 0x04
     c18:	01 97       	sbiw	r24, 0x01	; 1
     c1a:	f1 f7       	brne	.-4      	; 0xc18 <lcd_init+0xb4>
     c1c:	9c 83       	std	Y+4, r25	; 0x04
     c1e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c20:	8d 81       	ldd	r24, Y+5	; 0x05
     c22:	9e 81       	ldd	r25, Y+6	; 0x06
     c24:	01 97       	sbiw	r24, 0x01	; 1
     c26:	9e 83       	std	Y+6, r25	; 0x06
     c28:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c2a:	8d 81       	ldd	r24, Y+5	; 0x05
     c2c:	9e 81       	ldd	r25, Y+6	; 0x06
     c2e:	00 97       	sbiw	r24, 0x00	; 0
     c30:	69 f7       	brne	.-38     	; 0xc0c <lcd_init+0xa8>
     c32:	14 c0       	rjmp	.+40     	; 0xc5c <lcd_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c34:	6f 81       	ldd	r22, Y+7	; 0x07
     c36:	78 85       	ldd	r23, Y+8	; 0x08
     c38:	89 85       	ldd	r24, Y+9	; 0x09
     c3a:	9a 85       	ldd	r25, Y+10	; 0x0a
     c3c:	0e 94 a3 19 	call	0x3346	; 0x3346 <__fixunssfsi>
     c40:	dc 01       	movw	r26, r24
     c42:	cb 01       	movw	r24, r22
     c44:	9e 83       	std	Y+6, r25	; 0x06
     c46:	8d 83       	std	Y+5, r24	; 0x05
     c48:	8d 81       	ldd	r24, Y+5	; 0x05
     c4a:	9e 81       	ldd	r25, Y+6	; 0x06
     c4c:	9a 83       	std	Y+2, r25	; 0x02
     c4e:	89 83       	std	Y+1, r24	; 0x01
     c50:	89 81       	ldd	r24, Y+1	; 0x01
     c52:	9a 81       	ldd	r25, Y+2	; 0x02
     c54:	01 97       	sbiw	r24, 0x01	; 1
     c56:	f1 f7       	brne	.-4      	; 0xc54 <lcd_init+0xf0>
     c58:	9a 83       	std	Y+2, r25	; 0x02
     c5a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     c5c:	88 e2       	ldi	r24, 0x28	; 40
     c5e:	0e 94 46 06 	call	0xc8c	; 0xc8c <lcd_wr_command>
	lcd_wr_command(0x01);
     c62:	81 e0       	ldi	r24, 0x01	; 1
     c64:	0e 94 46 06 	call	0xc8c	; 0xc8c <lcd_wr_command>
	lcd_wr_command(0x06);
     c68:	86 e0       	ldi	r24, 0x06	; 6
     c6a:	0e 94 46 06 	call	0xc8c	; 0xc8c <lcd_wr_command>
	lcd_wr_command(0x0E);
     c6e:	8e e0       	ldi	r24, 0x0E	; 14
     c70:	0e 94 46 06 	call	0xc8c	; 0xc8c <lcd_wr_command>
	lcd_wr_command(0x80);
     c74:	80 e8       	ldi	r24, 0x80	; 128
     c76:	0e 94 46 06 	call	0xc8c	; 0xc8c <lcd_wr_command>
		
}
     c7a:	2e 96       	adiw	r28, 0x0e	; 14
     c7c:	0f b6       	in	r0, 0x3f	; 63
     c7e:	f8 94       	cli
     c80:	de bf       	out	0x3e, r29	; 62
     c82:	0f be       	out	0x3f, r0	; 63
     c84:	cd bf       	out	0x3d, r28	; 61
     c86:	cf 91       	pop	r28
     c88:	df 91       	pop	r29
     c8a:	08 95       	ret

00000c8c <lcd_wr_command>:

	 
//Function to Write Command on LCD
void lcd_wr_command(unsigned char cmd)
{
     c8c:	df 93       	push	r29
     c8e:	cf 93       	push	r28
     c90:	cd b7       	in	r28, 0x3d	; 61
     c92:	de b7       	in	r29, 0x3e	; 62
     c94:	6e 97       	sbiw	r28, 0x1e	; 30
     c96:	0f b6       	in	r0, 0x3f	; 63
     c98:	f8 94       	cli
     c9a:	de bf       	out	0x3e, r29	; 62
     c9c:	0f be       	out	0x3f, r0	; 63
     c9e:	cd bf       	out	0x3d, r28	; 61
     ca0:	8e 8f       	std	Y+30, r24	; 0x1e
	unsigned char temp;
	temp = cmd;
     ca2:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ca4:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = temp & 0xF0;
     ca6:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ca8:	80 7f       	andi	r24, 0xF0	; 240
     caa:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
     cac:	a8 e2       	ldi	r26, 0x28	; 40
     cae:	b0 e0       	ldi	r27, 0x00	; 0
     cb0:	e8 e2       	ldi	r30, 0x28	; 40
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	80 81       	ld	r24, Z
     cb6:	8f 70       	andi	r24, 0x0F	; 15
     cb8:	8c 93       	st	X, r24
	lcd_port |= temp;
     cba:	a8 e2       	ldi	r26, 0x28	; 40
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	e8 e2       	ldi	r30, 0x28	; 40
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	90 81       	ld	r25, Z
     cc4:	8d 8d       	ldd	r24, Y+29	; 0x1d
     cc6:	89 2b       	or	r24, r25
     cc8:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
     cca:	a8 e2       	ldi	r26, 0x28	; 40
     ccc:	b0 e0       	ldi	r27, 0x00	; 0
     cce:	e8 e2       	ldi	r30, 0x28	; 40
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	80 81       	ld	r24, Z
     cd4:	8e 7f       	andi	r24, 0xFE	; 254
     cd6:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     cd8:	a8 e2       	ldi	r26, 0x28	; 40
     cda:	b0 e0       	ldi	r27, 0x00	; 0
     cdc:	e8 e2       	ldi	r30, 0x28	; 40
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	80 81       	ld	r24, Z
     ce2:	8d 7f       	andi	r24, 0xFD	; 253
     ce4:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     ce6:	a8 e2       	ldi	r26, 0x28	; 40
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 e2       	ldi	r30, 0x28	; 40
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	80 81       	ld	r24, Z
     cf0:	84 60       	ori	r24, 0x04	; 4
     cf2:	8c 93       	st	X, r24
     cf4:	80 e0       	ldi	r24, 0x00	; 0
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	a0 ea       	ldi	r26, 0xA0	; 160
     cfa:	b0 e4       	ldi	r27, 0x40	; 64
     cfc:	89 8f       	std	Y+25, r24	; 0x19
     cfe:	9a 8f       	std	Y+26, r25	; 0x1a
     d00:	ab 8f       	std	Y+27, r26	; 0x1b
     d02:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d04:	69 8d       	ldd	r22, Y+25	; 0x19
     d06:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d08:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d0a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d0c:	2d ec       	ldi	r18, 0xCD	; 205
     d0e:	3c ec       	ldi	r19, 0xCC	; 204
     d10:	4c e2       	ldi	r20, 0x2C	; 44
     d12:	55 e4       	ldi	r21, 0x45	; 69
     d14:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__mulsf3>
     d18:	dc 01       	movw	r26, r24
     d1a:	cb 01       	movw	r24, r22
     d1c:	8d 8b       	std	Y+21, r24	; 0x15
     d1e:	9e 8b       	std	Y+22, r25	; 0x16
     d20:	af 8b       	std	Y+23, r26	; 0x17
     d22:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     d24:	6d 89       	ldd	r22, Y+21	; 0x15
     d26:	7e 89       	ldd	r23, Y+22	; 0x16
     d28:	8f 89       	ldd	r24, Y+23	; 0x17
     d2a:	98 8d       	ldd	r25, Y+24	; 0x18
     d2c:	20 e0       	ldi	r18, 0x00	; 0
     d2e:	30 e0       	ldi	r19, 0x00	; 0
     d30:	40 e8       	ldi	r20, 0x80	; 128
     d32:	5f e3       	ldi	r21, 0x3F	; 63
     d34:	0e 94 7f 1d 	call	0x3afe	; 0x3afe <__ltsf2>
     d38:	88 23       	and	r24, r24
     d3a:	2c f4       	brge	.+10     	; 0xd46 <lcd_wr_command+0xba>
		__ticks = 1;
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	9c 8b       	std	Y+20, r25	; 0x14
     d42:	8b 8b       	std	Y+19, r24	; 0x13
     d44:	3f c0       	rjmp	.+126    	; 0xdc4 <lcd_wr_command+0x138>
	else if (__tmp > 65535)
     d46:	6d 89       	ldd	r22, Y+21	; 0x15
     d48:	7e 89       	ldd	r23, Y+22	; 0x16
     d4a:	8f 89       	ldd	r24, Y+23	; 0x17
     d4c:	98 8d       	ldd	r25, Y+24	; 0x18
     d4e:	20 e0       	ldi	r18, 0x00	; 0
     d50:	3f ef       	ldi	r19, 0xFF	; 255
     d52:	4f e7       	ldi	r20, 0x7F	; 127
     d54:	57 e4       	ldi	r21, 0x47	; 71
     d56:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <__gtsf2>
     d5a:	18 16       	cp	r1, r24
     d5c:	4c f5       	brge	.+82     	; 0xdb0 <lcd_wr_command+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d5e:	69 8d       	ldd	r22, Y+25	; 0x19
     d60:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d62:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d64:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d66:	20 e0       	ldi	r18, 0x00	; 0
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	40 e2       	ldi	r20, 0x20	; 32
     d6c:	51 e4       	ldi	r21, 0x41	; 65
     d6e:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__mulsf3>
     d72:	dc 01       	movw	r26, r24
     d74:	cb 01       	movw	r24, r22
     d76:	bc 01       	movw	r22, r24
     d78:	cd 01       	movw	r24, r26
     d7a:	0e 94 a3 19 	call	0x3346	; 0x3346 <__fixunssfsi>
     d7e:	dc 01       	movw	r26, r24
     d80:	cb 01       	movw	r24, r22
     d82:	9c 8b       	std	Y+20, r25	; 0x14
     d84:	8b 8b       	std	Y+19, r24	; 0x13
     d86:	0f c0       	rjmp	.+30     	; 0xda6 <lcd_wr_command+0x11a>
     d88:	84 e1       	ldi	r24, 0x14	; 20
     d8a:	91 e0       	ldi	r25, 0x01	; 1
     d8c:	9a 8b       	std	Y+18, r25	; 0x12
     d8e:	89 8b       	std	Y+17, r24	; 0x11
     d90:	89 89       	ldd	r24, Y+17	; 0x11
     d92:	9a 89       	ldd	r25, Y+18	; 0x12
     d94:	01 97       	sbiw	r24, 0x01	; 1
     d96:	f1 f7       	brne	.-4      	; 0xd94 <lcd_wr_command+0x108>
     d98:	9a 8b       	std	Y+18, r25	; 0x12
     d9a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d9c:	8b 89       	ldd	r24, Y+19	; 0x13
     d9e:	9c 89       	ldd	r25, Y+20	; 0x14
     da0:	01 97       	sbiw	r24, 0x01	; 1
     da2:	9c 8b       	std	Y+20, r25	; 0x14
     da4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     da6:	8b 89       	ldd	r24, Y+19	; 0x13
     da8:	9c 89       	ldd	r25, Y+20	; 0x14
     daa:	00 97       	sbiw	r24, 0x00	; 0
     dac:	69 f7       	brne	.-38     	; 0xd88 <lcd_wr_command+0xfc>
     dae:	14 c0       	rjmp	.+40     	; 0xdd8 <lcd_wr_command+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     db0:	6d 89       	ldd	r22, Y+21	; 0x15
     db2:	7e 89       	ldd	r23, Y+22	; 0x16
     db4:	8f 89       	ldd	r24, Y+23	; 0x17
     db6:	98 8d       	ldd	r25, Y+24	; 0x18
     db8:	0e 94 a3 19 	call	0x3346	; 0x3346 <__fixunssfsi>
     dbc:	dc 01       	movw	r26, r24
     dbe:	cb 01       	movw	r24, r22
     dc0:	9c 8b       	std	Y+20, r25	; 0x14
     dc2:	8b 8b       	std	Y+19, r24	; 0x13
     dc4:	8b 89       	ldd	r24, Y+19	; 0x13
     dc6:	9c 89       	ldd	r25, Y+20	; 0x14
     dc8:	98 8b       	std	Y+16, r25	; 0x10
     dca:	8f 87       	std	Y+15, r24	; 0x0f
     dcc:	8f 85       	ldd	r24, Y+15	; 0x0f
     dce:	98 89       	ldd	r25, Y+16	; 0x10
     dd0:	01 97       	sbiw	r24, 0x01	; 1
     dd2:	f1 f7       	brne	.-4      	; 0xdd0 <lcd_wr_command+0x144>
     dd4:	98 8b       	std	Y+16, r25	; 0x10
     dd6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
     dd8:	a8 e2       	ldi	r26, 0x28	; 40
     dda:	b0 e0       	ldi	r27, 0x00	; 0
     ddc:	e8 e2       	ldi	r30, 0x28	; 40
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	80 81       	ld	r24, Z
     de2:	8b 7f       	andi	r24, 0xFB	; 251
     de4:	8c 93       	st	X, r24
	
	cmd = cmd & 0x0F;
     de6:	8e 8d       	ldd	r24, Y+30	; 0x1e
     de8:	8f 70       	andi	r24, 0x0F	; 15
     dea:	8e 8f       	std	Y+30, r24	; 0x1e
	cmd = cmd<<4;
     dec:	8e 8d       	ldd	r24, Y+30	; 0x1e
     dee:	82 95       	swap	r24
     df0:	80 7f       	andi	r24, 0xF0	; 240
     df2:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
     df4:	a8 e2       	ldi	r26, 0x28	; 40
     df6:	b0 e0       	ldi	r27, 0x00	; 0
     df8:	e8 e2       	ldi	r30, 0x28	; 40
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	80 81       	ld	r24, Z
     dfe:	8f 70       	andi	r24, 0x0F	; 15
     e00:	8c 93       	st	X, r24
	lcd_port |= cmd;
     e02:	a8 e2       	ldi	r26, 0x28	; 40
     e04:	b0 e0       	ldi	r27, 0x00	; 0
     e06:	e8 e2       	ldi	r30, 0x28	; 40
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	90 81       	ld	r25, Z
     e0c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e0e:	89 2b       	or	r24, r25
     e10:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
     e12:	a8 e2       	ldi	r26, 0x28	; 40
     e14:	b0 e0       	ldi	r27, 0x00	; 0
     e16:	e8 e2       	ldi	r30, 0x28	; 40
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	80 81       	ld	r24, Z
     e1c:	8e 7f       	andi	r24, 0xFE	; 254
     e1e:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     e20:	a8 e2       	ldi	r26, 0x28	; 40
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	e8 e2       	ldi	r30, 0x28	; 40
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	8d 7f       	andi	r24, 0xFD	; 253
     e2c:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     e2e:	a8 e2       	ldi	r26, 0x28	; 40
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	e8 e2       	ldi	r30, 0x28	; 40
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	84 60       	ori	r24, 0x04	; 4
     e3a:	8c 93       	st	X, r24
     e3c:	80 e0       	ldi	r24, 0x00	; 0
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	a0 ea       	ldi	r26, 0xA0	; 160
     e42:	b0 e4       	ldi	r27, 0x40	; 64
     e44:	8b 87       	std	Y+11, r24	; 0x0b
     e46:	9c 87       	std	Y+12, r25	; 0x0c
     e48:	ad 87       	std	Y+13, r26	; 0x0d
     e4a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e4c:	6b 85       	ldd	r22, Y+11	; 0x0b
     e4e:	7c 85       	ldd	r23, Y+12	; 0x0c
     e50:	8d 85       	ldd	r24, Y+13	; 0x0d
     e52:	9e 85       	ldd	r25, Y+14	; 0x0e
     e54:	2d ec       	ldi	r18, 0xCD	; 205
     e56:	3c ec       	ldi	r19, 0xCC	; 204
     e58:	4c e2       	ldi	r20, 0x2C	; 44
     e5a:	55 e4       	ldi	r21, 0x45	; 69
     e5c:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__mulsf3>
     e60:	dc 01       	movw	r26, r24
     e62:	cb 01       	movw	r24, r22
     e64:	8f 83       	std	Y+7, r24	; 0x07
     e66:	98 87       	std	Y+8, r25	; 0x08
     e68:	a9 87       	std	Y+9, r26	; 0x09
     e6a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e6c:	6f 81       	ldd	r22, Y+7	; 0x07
     e6e:	78 85       	ldd	r23, Y+8	; 0x08
     e70:	89 85       	ldd	r24, Y+9	; 0x09
     e72:	9a 85       	ldd	r25, Y+10	; 0x0a
     e74:	20 e0       	ldi	r18, 0x00	; 0
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	40 e8       	ldi	r20, 0x80	; 128
     e7a:	5f e3       	ldi	r21, 0x3F	; 63
     e7c:	0e 94 7f 1d 	call	0x3afe	; 0x3afe <__ltsf2>
     e80:	88 23       	and	r24, r24
     e82:	2c f4       	brge	.+10     	; 0xe8e <lcd_wr_command+0x202>
		__ticks = 1;
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	9e 83       	std	Y+6, r25	; 0x06
     e8a:	8d 83       	std	Y+5, r24	; 0x05
     e8c:	3f c0       	rjmp	.+126    	; 0xf0c <lcd_wr_command+0x280>
	else if (__tmp > 65535)
     e8e:	6f 81       	ldd	r22, Y+7	; 0x07
     e90:	78 85       	ldd	r23, Y+8	; 0x08
     e92:	89 85       	ldd	r24, Y+9	; 0x09
     e94:	9a 85       	ldd	r25, Y+10	; 0x0a
     e96:	20 e0       	ldi	r18, 0x00	; 0
     e98:	3f ef       	ldi	r19, 0xFF	; 255
     e9a:	4f e7       	ldi	r20, 0x7F	; 127
     e9c:	57 e4       	ldi	r21, 0x47	; 71
     e9e:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <__gtsf2>
     ea2:	18 16       	cp	r1, r24
     ea4:	4c f5       	brge	.+82     	; 0xef8 <lcd_wr_command+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ea6:	6b 85       	ldd	r22, Y+11	; 0x0b
     ea8:	7c 85       	ldd	r23, Y+12	; 0x0c
     eaa:	8d 85       	ldd	r24, Y+13	; 0x0d
     eac:	9e 85       	ldd	r25, Y+14	; 0x0e
     eae:	20 e0       	ldi	r18, 0x00	; 0
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	40 e2       	ldi	r20, 0x20	; 32
     eb4:	51 e4       	ldi	r21, 0x41	; 65
     eb6:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__mulsf3>
     eba:	dc 01       	movw	r26, r24
     ebc:	cb 01       	movw	r24, r22
     ebe:	bc 01       	movw	r22, r24
     ec0:	cd 01       	movw	r24, r26
     ec2:	0e 94 a3 19 	call	0x3346	; 0x3346 <__fixunssfsi>
     ec6:	dc 01       	movw	r26, r24
     ec8:	cb 01       	movw	r24, r22
     eca:	9e 83       	std	Y+6, r25	; 0x06
     ecc:	8d 83       	std	Y+5, r24	; 0x05
     ece:	0f c0       	rjmp	.+30     	; 0xeee <lcd_wr_command+0x262>
     ed0:	84 e1       	ldi	r24, 0x14	; 20
     ed2:	91 e0       	ldi	r25, 0x01	; 1
     ed4:	9c 83       	std	Y+4, r25	; 0x04
     ed6:	8b 83       	std	Y+3, r24	; 0x03
     ed8:	8b 81       	ldd	r24, Y+3	; 0x03
     eda:	9c 81       	ldd	r25, Y+4	; 0x04
     edc:	01 97       	sbiw	r24, 0x01	; 1
     ede:	f1 f7       	brne	.-4      	; 0xedc <lcd_wr_command+0x250>
     ee0:	9c 83       	std	Y+4, r25	; 0x04
     ee2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ee4:	8d 81       	ldd	r24, Y+5	; 0x05
     ee6:	9e 81       	ldd	r25, Y+6	; 0x06
     ee8:	01 97       	sbiw	r24, 0x01	; 1
     eea:	9e 83       	std	Y+6, r25	; 0x06
     eec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eee:	8d 81       	ldd	r24, Y+5	; 0x05
     ef0:	9e 81       	ldd	r25, Y+6	; 0x06
     ef2:	00 97       	sbiw	r24, 0x00	; 0
     ef4:	69 f7       	brne	.-38     	; 0xed0 <lcd_wr_command+0x244>
     ef6:	14 c0       	rjmp	.+40     	; 0xf20 <lcd_wr_command+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ef8:	6f 81       	ldd	r22, Y+7	; 0x07
     efa:	78 85       	ldd	r23, Y+8	; 0x08
     efc:	89 85       	ldd	r24, Y+9	; 0x09
     efe:	9a 85       	ldd	r25, Y+10	; 0x0a
     f00:	0e 94 a3 19 	call	0x3346	; 0x3346 <__fixunssfsi>
     f04:	dc 01       	movw	r26, r24
     f06:	cb 01       	movw	r24, r22
     f08:	9e 83       	std	Y+6, r25	; 0x06
     f0a:	8d 83       	std	Y+5, r24	; 0x05
     f0c:	8d 81       	ldd	r24, Y+5	; 0x05
     f0e:	9e 81       	ldd	r25, Y+6	; 0x06
     f10:	9a 83       	std	Y+2, r25	; 0x02
     f12:	89 83       	std	Y+1, r24	; 0x01
     f14:	89 81       	ldd	r24, Y+1	; 0x01
     f16:	9a 81       	ldd	r25, Y+2	; 0x02
     f18:	01 97       	sbiw	r24, 0x01	; 1
     f1a:	f1 f7       	brne	.-4      	; 0xf18 <lcd_wr_command+0x28c>
     f1c:	9a 83       	std	Y+2, r25	; 0x02
     f1e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
     f20:	a8 e2       	ldi	r26, 0x28	; 40
     f22:	b0 e0       	ldi	r27, 0x00	; 0
     f24:	e8 e2       	ldi	r30, 0x28	; 40
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	8b 7f       	andi	r24, 0xFB	; 251
     f2c:	8c 93       	st	X, r24
}
     f2e:	6e 96       	adiw	r28, 0x1e	; 30
     f30:	0f b6       	in	r0, 0x3f	; 63
     f32:	f8 94       	cli
     f34:	de bf       	out	0x3e, r29	; 62
     f36:	0f be       	out	0x3f, r0	; 63
     f38:	cd bf       	out	0x3d, r28	; 61
     f3a:	cf 91       	pop	r28
     f3c:	df 91       	pop	r29
     f3e:	08 95       	ret

00000f40 <lcd_wr_char>:

//Function to Write Data on LCD
void lcd_wr_char(char letter)
{
     f40:	df 93       	push	r29
     f42:	cf 93       	push	r28
     f44:	cd b7       	in	r28, 0x3d	; 61
     f46:	de b7       	in	r29, 0x3e	; 62
     f48:	6e 97       	sbiw	r28, 0x1e	; 30
     f4a:	0f b6       	in	r0, 0x3f	; 63
     f4c:	f8 94       	cli
     f4e:	de bf       	out	0x3e, r29	; 62
     f50:	0f be       	out	0x3f, r0	; 63
     f52:	cd bf       	out	0x3d, r28	; 61
     f54:	8e 8f       	std	Y+30, r24	; 0x1e
	char temp;
	temp = letter;
     f56:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f58:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = (temp & 0xF0);
     f5a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f5c:	80 7f       	andi	r24, 0xF0	; 240
     f5e:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
     f60:	a8 e2       	ldi	r26, 0x28	; 40
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	e8 e2       	ldi	r30, 0x28	; 40
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	8f 70       	andi	r24, 0x0F	; 15
     f6c:	8c 93       	st	X, r24
	lcd_port |= temp;
     f6e:	a8 e2       	ldi	r26, 0x28	; 40
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	e8 e2       	ldi	r30, 0x28	; 40
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	90 81       	ld	r25, Z
     f78:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f7a:	89 2b       	or	r24, r25
     f7c:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
     f7e:	a8 e2       	ldi	r26, 0x28	; 40
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	e8 e2       	ldi	r30, 0x28	; 40
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	81 60       	ori	r24, 0x01	; 1
     f8a:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     f8c:	a8 e2       	ldi	r26, 0x28	; 40
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	e8 e2       	ldi	r30, 0x28	; 40
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	8d 7f       	andi	r24, 0xFD	; 253
     f98:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     f9a:	a8 e2       	ldi	r26, 0x28	; 40
     f9c:	b0 e0       	ldi	r27, 0x00	; 0
     f9e:	e8 e2       	ldi	r30, 0x28	; 40
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	84 60       	ori	r24, 0x04	; 4
     fa6:	8c 93       	st	X, r24
     fa8:	80 e0       	ldi	r24, 0x00	; 0
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	a0 ea       	ldi	r26, 0xA0	; 160
     fae:	b0 e4       	ldi	r27, 0x40	; 64
     fb0:	89 8f       	std	Y+25, r24	; 0x19
     fb2:	9a 8f       	std	Y+26, r25	; 0x1a
     fb4:	ab 8f       	std	Y+27, r26	; 0x1b
     fb6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fb8:	69 8d       	ldd	r22, Y+25	; 0x19
     fba:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fbc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fbe:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fc0:	2d ec       	ldi	r18, 0xCD	; 205
     fc2:	3c ec       	ldi	r19, 0xCC	; 204
     fc4:	4c e2       	ldi	r20, 0x2C	; 44
     fc6:	55 e4       	ldi	r21, 0x45	; 69
     fc8:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__mulsf3>
     fcc:	dc 01       	movw	r26, r24
     fce:	cb 01       	movw	r24, r22
     fd0:	8d 8b       	std	Y+21, r24	; 0x15
     fd2:	9e 8b       	std	Y+22, r25	; 0x16
     fd4:	af 8b       	std	Y+23, r26	; 0x17
     fd6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     fd8:	6d 89       	ldd	r22, Y+21	; 0x15
     fda:	7e 89       	ldd	r23, Y+22	; 0x16
     fdc:	8f 89       	ldd	r24, Y+23	; 0x17
     fde:	98 8d       	ldd	r25, Y+24	; 0x18
     fe0:	20 e0       	ldi	r18, 0x00	; 0
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	40 e8       	ldi	r20, 0x80	; 128
     fe6:	5f e3       	ldi	r21, 0x3F	; 63
     fe8:	0e 94 7f 1d 	call	0x3afe	; 0x3afe <__ltsf2>
     fec:	88 23       	and	r24, r24
     fee:	2c f4       	brge	.+10     	; 0xffa <lcd_wr_char+0xba>
		__ticks = 1;
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	9c 8b       	std	Y+20, r25	; 0x14
     ff6:	8b 8b       	std	Y+19, r24	; 0x13
     ff8:	3f c0       	rjmp	.+126    	; 0x1078 <lcd_wr_char+0x138>
	else if (__tmp > 65535)
     ffa:	6d 89       	ldd	r22, Y+21	; 0x15
     ffc:	7e 89       	ldd	r23, Y+22	; 0x16
     ffe:	8f 89       	ldd	r24, Y+23	; 0x17
    1000:	98 8d       	ldd	r25, Y+24	; 0x18
    1002:	20 e0       	ldi	r18, 0x00	; 0
    1004:	3f ef       	ldi	r19, 0xFF	; 255
    1006:	4f e7       	ldi	r20, 0x7F	; 127
    1008:	57 e4       	ldi	r21, 0x47	; 71
    100a:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <__gtsf2>
    100e:	18 16       	cp	r1, r24
    1010:	4c f5       	brge	.+82     	; 0x1064 <lcd_wr_char+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1012:	69 8d       	ldd	r22, Y+25	; 0x19
    1014:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1016:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1018:	9c 8d       	ldd	r25, Y+28	; 0x1c
    101a:	20 e0       	ldi	r18, 0x00	; 0
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	40 e2       	ldi	r20, 0x20	; 32
    1020:	51 e4       	ldi	r21, 0x41	; 65
    1022:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__mulsf3>
    1026:	dc 01       	movw	r26, r24
    1028:	cb 01       	movw	r24, r22
    102a:	bc 01       	movw	r22, r24
    102c:	cd 01       	movw	r24, r26
    102e:	0e 94 a3 19 	call	0x3346	; 0x3346 <__fixunssfsi>
    1032:	dc 01       	movw	r26, r24
    1034:	cb 01       	movw	r24, r22
    1036:	9c 8b       	std	Y+20, r25	; 0x14
    1038:	8b 8b       	std	Y+19, r24	; 0x13
    103a:	0f c0       	rjmp	.+30     	; 0x105a <lcd_wr_char+0x11a>
    103c:	84 e1       	ldi	r24, 0x14	; 20
    103e:	91 e0       	ldi	r25, 0x01	; 1
    1040:	9a 8b       	std	Y+18, r25	; 0x12
    1042:	89 8b       	std	Y+17, r24	; 0x11
    1044:	89 89       	ldd	r24, Y+17	; 0x11
    1046:	9a 89       	ldd	r25, Y+18	; 0x12
    1048:	01 97       	sbiw	r24, 0x01	; 1
    104a:	f1 f7       	brne	.-4      	; 0x1048 <lcd_wr_char+0x108>
    104c:	9a 8b       	std	Y+18, r25	; 0x12
    104e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1050:	8b 89       	ldd	r24, Y+19	; 0x13
    1052:	9c 89       	ldd	r25, Y+20	; 0x14
    1054:	01 97       	sbiw	r24, 0x01	; 1
    1056:	9c 8b       	std	Y+20, r25	; 0x14
    1058:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    105a:	8b 89       	ldd	r24, Y+19	; 0x13
    105c:	9c 89       	ldd	r25, Y+20	; 0x14
    105e:	00 97       	sbiw	r24, 0x00	; 0
    1060:	69 f7       	brne	.-38     	; 0x103c <lcd_wr_char+0xfc>
    1062:	14 c0       	rjmp	.+40     	; 0x108c <lcd_wr_char+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1064:	6d 89       	ldd	r22, Y+21	; 0x15
    1066:	7e 89       	ldd	r23, Y+22	; 0x16
    1068:	8f 89       	ldd	r24, Y+23	; 0x17
    106a:	98 8d       	ldd	r25, Y+24	; 0x18
    106c:	0e 94 a3 19 	call	0x3346	; 0x3346 <__fixunssfsi>
    1070:	dc 01       	movw	r26, r24
    1072:	cb 01       	movw	r24, r22
    1074:	9c 8b       	std	Y+20, r25	; 0x14
    1076:	8b 8b       	std	Y+19, r24	; 0x13
    1078:	8b 89       	ldd	r24, Y+19	; 0x13
    107a:	9c 89       	ldd	r25, Y+20	; 0x14
    107c:	98 8b       	std	Y+16, r25	; 0x10
    107e:	8f 87       	std	Y+15, r24	; 0x0f
    1080:	8f 85       	ldd	r24, Y+15	; 0x0f
    1082:	98 89       	ldd	r25, Y+16	; 0x10
    1084:	01 97       	sbiw	r24, 0x01	; 1
    1086:	f1 f7       	brne	.-4      	; 0x1084 <lcd_wr_char+0x144>
    1088:	98 8b       	std	Y+16, r25	; 0x10
    108a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
    108c:	a8 e2       	ldi	r26, 0x28	; 40
    108e:	b0 e0       	ldi	r27, 0x00	; 0
    1090:	e8 e2       	ldi	r30, 0x28	; 40
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	8b 7f       	andi	r24, 0xFB	; 251
    1098:	8c 93       	st	X, r24

	letter = letter & 0x0F;
    109a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    109c:	8f 70       	andi	r24, 0x0F	; 15
    109e:	8e 8f       	std	Y+30, r24	; 0x1e
	letter = letter<<4;
    10a0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10a2:	82 95       	swap	r24
    10a4:	80 7f       	andi	r24, 0xF0	; 240
    10a6:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    10a8:	a8 e2       	ldi	r26, 0x28	; 40
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	e8 e2       	ldi	r30, 0x28	; 40
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 81       	ld	r24, Z
    10b2:	8f 70       	andi	r24, 0x0F	; 15
    10b4:	8c 93       	st	X, r24
	lcd_port |= letter;
    10b6:	a8 e2       	ldi	r26, 0x28	; 40
    10b8:	b0 e0       	ldi	r27, 0x00	; 0
    10ba:	e8 e2       	ldi	r30, 0x28	; 40
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	90 81       	ld	r25, Z
    10c0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10c2:	89 2b       	or	r24, r25
    10c4:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
    10c6:	a8 e2       	ldi	r26, 0x28	; 40
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	e8 e2       	ldi	r30, 0x28	; 40
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	81 60       	ori	r24, 0x01	; 1
    10d2:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    10d4:	a8 e2       	ldi	r26, 0x28	; 40
    10d6:	b0 e0       	ldi	r27, 0x00	; 0
    10d8:	e8 e2       	ldi	r30, 0x28	; 40
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	8d 7f       	andi	r24, 0xFD	; 253
    10e0:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    10e2:	a8 e2       	ldi	r26, 0x28	; 40
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	e8 e2       	ldi	r30, 0x28	; 40
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	84 60       	ori	r24, 0x04	; 4
    10ee:	8c 93       	st	X, r24
    10f0:	80 e0       	ldi	r24, 0x00	; 0
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	a0 ea       	ldi	r26, 0xA0	; 160
    10f6:	b0 e4       	ldi	r27, 0x40	; 64
    10f8:	8b 87       	std	Y+11, r24	; 0x0b
    10fa:	9c 87       	std	Y+12, r25	; 0x0c
    10fc:	ad 87       	std	Y+13, r26	; 0x0d
    10fe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1100:	6b 85       	ldd	r22, Y+11	; 0x0b
    1102:	7c 85       	ldd	r23, Y+12	; 0x0c
    1104:	8d 85       	ldd	r24, Y+13	; 0x0d
    1106:	9e 85       	ldd	r25, Y+14	; 0x0e
    1108:	2d ec       	ldi	r18, 0xCD	; 205
    110a:	3c ec       	ldi	r19, 0xCC	; 204
    110c:	4c e2       	ldi	r20, 0x2C	; 44
    110e:	55 e4       	ldi	r21, 0x45	; 69
    1110:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__mulsf3>
    1114:	dc 01       	movw	r26, r24
    1116:	cb 01       	movw	r24, r22
    1118:	8f 83       	std	Y+7, r24	; 0x07
    111a:	98 87       	std	Y+8, r25	; 0x08
    111c:	a9 87       	std	Y+9, r26	; 0x09
    111e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1120:	6f 81       	ldd	r22, Y+7	; 0x07
    1122:	78 85       	ldd	r23, Y+8	; 0x08
    1124:	89 85       	ldd	r24, Y+9	; 0x09
    1126:	9a 85       	ldd	r25, Y+10	; 0x0a
    1128:	20 e0       	ldi	r18, 0x00	; 0
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	40 e8       	ldi	r20, 0x80	; 128
    112e:	5f e3       	ldi	r21, 0x3F	; 63
    1130:	0e 94 7f 1d 	call	0x3afe	; 0x3afe <__ltsf2>
    1134:	88 23       	and	r24, r24
    1136:	2c f4       	brge	.+10     	; 0x1142 <lcd_wr_char+0x202>
		__ticks = 1;
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	9e 83       	std	Y+6, r25	; 0x06
    113e:	8d 83       	std	Y+5, r24	; 0x05
    1140:	3f c0       	rjmp	.+126    	; 0x11c0 <lcd_wr_char+0x280>
	else if (__tmp > 65535)
    1142:	6f 81       	ldd	r22, Y+7	; 0x07
    1144:	78 85       	ldd	r23, Y+8	; 0x08
    1146:	89 85       	ldd	r24, Y+9	; 0x09
    1148:	9a 85       	ldd	r25, Y+10	; 0x0a
    114a:	20 e0       	ldi	r18, 0x00	; 0
    114c:	3f ef       	ldi	r19, 0xFF	; 255
    114e:	4f e7       	ldi	r20, 0x7F	; 127
    1150:	57 e4       	ldi	r21, 0x47	; 71
    1152:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <__gtsf2>
    1156:	18 16       	cp	r1, r24
    1158:	4c f5       	brge	.+82     	; 0x11ac <lcd_wr_char+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    115a:	6b 85       	ldd	r22, Y+11	; 0x0b
    115c:	7c 85       	ldd	r23, Y+12	; 0x0c
    115e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1160:	9e 85       	ldd	r25, Y+14	; 0x0e
    1162:	20 e0       	ldi	r18, 0x00	; 0
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	40 e2       	ldi	r20, 0x20	; 32
    1168:	51 e4       	ldi	r21, 0x41	; 65
    116a:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__mulsf3>
    116e:	dc 01       	movw	r26, r24
    1170:	cb 01       	movw	r24, r22
    1172:	bc 01       	movw	r22, r24
    1174:	cd 01       	movw	r24, r26
    1176:	0e 94 a3 19 	call	0x3346	; 0x3346 <__fixunssfsi>
    117a:	dc 01       	movw	r26, r24
    117c:	cb 01       	movw	r24, r22
    117e:	9e 83       	std	Y+6, r25	; 0x06
    1180:	8d 83       	std	Y+5, r24	; 0x05
    1182:	0f c0       	rjmp	.+30     	; 0x11a2 <lcd_wr_char+0x262>
    1184:	84 e1       	ldi	r24, 0x14	; 20
    1186:	91 e0       	ldi	r25, 0x01	; 1
    1188:	9c 83       	std	Y+4, r25	; 0x04
    118a:	8b 83       	std	Y+3, r24	; 0x03
    118c:	8b 81       	ldd	r24, Y+3	; 0x03
    118e:	9c 81       	ldd	r25, Y+4	; 0x04
    1190:	01 97       	sbiw	r24, 0x01	; 1
    1192:	f1 f7       	brne	.-4      	; 0x1190 <lcd_wr_char+0x250>
    1194:	9c 83       	std	Y+4, r25	; 0x04
    1196:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1198:	8d 81       	ldd	r24, Y+5	; 0x05
    119a:	9e 81       	ldd	r25, Y+6	; 0x06
    119c:	01 97       	sbiw	r24, 0x01	; 1
    119e:	9e 83       	std	Y+6, r25	; 0x06
    11a0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11a2:	8d 81       	ldd	r24, Y+5	; 0x05
    11a4:	9e 81       	ldd	r25, Y+6	; 0x06
    11a6:	00 97       	sbiw	r24, 0x00	; 0
    11a8:	69 f7       	brne	.-38     	; 0x1184 <lcd_wr_char+0x244>
    11aa:	14 c0       	rjmp	.+40     	; 0x11d4 <lcd_wr_char+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11ac:	6f 81       	ldd	r22, Y+7	; 0x07
    11ae:	78 85       	ldd	r23, Y+8	; 0x08
    11b0:	89 85       	ldd	r24, Y+9	; 0x09
    11b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    11b4:	0e 94 a3 19 	call	0x3346	; 0x3346 <__fixunssfsi>
    11b8:	dc 01       	movw	r26, r24
    11ba:	cb 01       	movw	r24, r22
    11bc:	9e 83       	std	Y+6, r25	; 0x06
    11be:	8d 83       	std	Y+5, r24	; 0x05
    11c0:	8d 81       	ldd	r24, Y+5	; 0x05
    11c2:	9e 81       	ldd	r25, Y+6	; 0x06
    11c4:	9a 83       	std	Y+2, r25	; 0x02
    11c6:	89 83       	std	Y+1, r24	; 0x01
    11c8:	89 81       	ldd	r24, Y+1	; 0x01
    11ca:	9a 81       	ldd	r25, Y+2	; 0x02
    11cc:	01 97       	sbiw	r24, 0x01	; 1
    11ce:	f1 f7       	brne	.-4      	; 0x11cc <lcd_wr_char+0x28c>
    11d0:	9a 83       	std	Y+2, r25	; 0x02
    11d2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
    11d4:	a8 e2       	ldi	r26, 0x28	; 40
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	e8 e2       	ldi	r30, 0x28	; 40
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	8b 7f       	andi	r24, 0xFB	; 251
    11e0:	8c 93       	st	X, r24
}
    11e2:	6e 96       	adiw	r28, 0x1e	; 30
    11e4:	0f b6       	in	r0, 0x3f	; 63
    11e6:	f8 94       	cli
    11e8:	de bf       	out	0x3e, r29	; 62
    11ea:	0f be       	out	0x3f, r0	; 63
    11ec:	cd bf       	out	0x3d, r28	; 61
    11ee:	cf 91       	pop	r28
    11f0:	df 91       	pop	r29
    11f2:	08 95       	ret

000011f4 <lcd_home>:


//Function to bring cursor at home position
void lcd_home()
{
    11f4:	df 93       	push	r29
    11f6:	cf 93       	push	r28
    11f8:	cd b7       	in	r28, 0x3d	; 61
    11fa:	de b7       	in	r29, 0x3e	; 62
	lcd_wr_command(0x80);
    11fc:	80 e8       	ldi	r24, 0x80	; 128
    11fe:	0e 94 46 06 	call	0xc8c	; 0xc8c <lcd_wr_command>
}
    1202:	cf 91       	pop	r28
    1204:	df 91       	pop	r29
    1206:	08 95       	ret

00001208 <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
    1208:	df 93       	push	r29
    120a:	cf 93       	push	r28
    120c:	0f 92       	push	r0
    120e:	0f 92       	push	r0
    1210:	cd b7       	in	r28, 0x3d	; 61
    1212:	de b7       	in	r29, 0x3e	; 62
    1214:	9a 83       	std	Y+2, r25	; 0x02
    1216:	89 83       	std	Y+1, r24	; 0x01
    1218:	0a c0       	rjmp	.+20     	; 0x122e <lcd_string+0x26>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
    121a:	e9 81       	ldd	r30, Y+1	; 0x01
    121c:	fa 81       	ldd	r31, Y+2	; 0x02
    121e:	80 81       	ld	r24, Z
    1220:	0e 94 a0 07 	call	0xf40	; 0xf40 <lcd_wr_char>
		str++;
    1224:	89 81       	ldd	r24, Y+1	; 0x01
    1226:	9a 81       	ldd	r25, Y+2	; 0x02
    1228:	01 96       	adiw	r24, 0x01	; 1
    122a:	9a 83       	std	Y+2, r25	; 0x02
    122c:	89 83       	std	Y+1, r24	; 0x01


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
    122e:	e9 81       	ldd	r30, Y+1	; 0x01
    1230:	fa 81       	ldd	r31, Y+2	; 0x02
    1232:	80 81       	ld	r24, Z
    1234:	88 23       	and	r24, r24
    1236:	89 f7       	brne	.-30     	; 0x121a <lcd_string+0x12>
	{
		lcd_wr_char(*str);
		str++;
	}
}
    1238:	0f 90       	pop	r0
    123a:	0f 90       	pop	r0
    123c:	cf 91       	pop	r28
    123e:	df 91       	pop	r29
    1240:	08 95       	ret

00001242 <lcd_cursor>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
    1242:	df 93       	push	r29
    1244:	cf 93       	push	r28
    1246:	00 d0       	rcall	.+0      	; 0x1248 <lcd_cursor+0x6>
    1248:	0f 92       	push	r0
    124a:	cd b7       	in	r28, 0x3d	; 61
    124c:	de b7       	in	r29, 0x3e	; 62
    124e:	89 83       	std	Y+1, r24	; 0x01
    1250:	6a 83       	std	Y+2, r22	; 0x02
	switch (row) {
    1252:	89 81       	ldd	r24, Y+1	; 0x01
    1254:	28 2f       	mov	r18, r24
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	3c 83       	std	Y+4, r19	; 0x04
    125a:	2b 83       	std	Y+3, r18	; 0x03
    125c:	8b 81       	ldd	r24, Y+3	; 0x03
    125e:	9c 81       	ldd	r25, Y+4	; 0x04
    1260:	82 30       	cpi	r24, 0x02	; 2
    1262:	91 05       	cpc	r25, r1
    1264:	d9 f0       	breq	.+54     	; 0x129c <lcd_cursor+0x5a>
    1266:	2b 81       	ldd	r18, Y+3	; 0x03
    1268:	3c 81       	ldd	r19, Y+4	; 0x04
    126a:	23 30       	cpi	r18, 0x03	; 3
    126c:	31 05       	cpc	r19, r1
    126e:	34 f4       	brge	.+12     	; 0x127c <lcd_cursor+0x3a>
    1270:	8b 81       	ldd	r24, Y+3	; 0x03
    1272:	9c 81       	ldd	r25, Y+4	; 0x04
    1274:	81 30       	cpi	r24, 0x01	; 1
    1276:	91 05       	cpc	r25, r1
    1278:	61 f0       	breq	.+24     	; 0x1292 <lcd_cursor+0x50>
    127a:	1e c0       	rjmp	.+60     	; 0x12b8 <lcd_cursor+0x76>
    127c:	2b 81       	ldd	r18, Y+3	; 0x03
    127e:	3c 81       	ldd	r19, Y+4	; 0x04
    1280:	23 30       	cpi	r18, 0x03	; 3
    1282:	31 05       	cpc	r19, r1
    1284:	81 f0       	breq	.+32     	; 0x12a6 <lcd_cursor+0x64>
    1286:	8b 81       	ldd	r24, Y+3	; 0x03
    1288:	9c 81       	ldd	r25, Y+4	; 0x04
    128a:	84 30       	cpi	r24, 0x04	; 4
    128c:	91 05       	cpc	r25, r1
    128e:	81 f0       	breq	.+32     	; 0x12b0 <lcd_cursor+0x6e>
    1290:	13 c0       	rjmp	.+38     	; 0x12b8 <lcd_cursor+0x76>
		case 1: lcd_wr_command (0x80 + column - 1); break;
    1292:	8a 81       	ldd	r24, Y+2	; 0x02
    1294:	81 58       	subi	r24, 0x81	; 129
    1296:	0e 94 46 06 	call	0xc8c	; 0xc8c <lcd_wr_command>
    129a:	0e c0       	rjmp	.+28     	; 0x12b8 <lcd_cursor+0x76>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
    129c:	8a 81       	ldd	r24, Y+2	; 0x02
    129e:	81 54       	subi	r24, 0x41	; 65
    12a0:	0e 94 46 06 	call	0xc8c	; 0xc8c <lcd_wr_command>
    12a4:	09 c0       	rjmp	.+18     	; 0x12b8 <lcd_cursor+0x76>
		case 3: lcd_wr_command (0x94 + column - 1); break;
    12a6:	8a 81       	ldd	r24, Y+2	; 0x02
    12a8:	8d 56       	subi	r24, 0x6D	; 109
    12aa:	0e 94 46 06 	call	0xc8c	; 0xc8c <lcd_wr_command>
    12ae:	04 c0       	rjmp	.+8      	; 0x12b8 <lcd_cursor+0x76>
		case 4: lcd_wr_command (0xd4 + column - 1); break;
    12b0:	8a 81       	ldd	r24, Y+2	; 0x02
    12b2:	8d 52       	subi	r24, 0x2D	; 45
    12b4:	0e 94 46 06 	call	0xc8c	; 0xc8c <lcd_wr_command>
		default: break;
	}
}
    12b8:	0f 90       	pop	r0
    12ba:	0f 90       	pop	r0
    12bc:	0f 90       	pop	r0
    12be:	0f 90       	pop	r0
    12c0:	cf 91       	pop	r28
    12c2:	df 91       	pop	r29
    12c4:	08 95       	ret

000012c6 <lcd_print>:

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
    12c6:	df 93       	push	r29
    12c8:	cf 93       	push	r28
    12ca:	cd b7       	in	r28, 0x3d	; 61
    12cc:	de b7       	in	r29, 0x3e	; 62
    12ce:	27 97       	sbiw	r28, 0x07	; 7
    12d0:	0f b6       	in	r0, 0x3f	; 63
    12d2:	f8 94       	cli
    12d4:	de bf       	out	0x3e, r29	; 62
    12d6:	0f be       	out	0x3f, r0	; 63
    12d8:	cd bf       	out	0x3d, r28	; 61
    12da:	8a 83       	std	Y+2, r24	; 0x02
    12dc:	6b 83       	std	Y+3, r22	; 0x03
    12de:	5d 83       	std	Y+5, r21	; 0x05
    12e0:	4c 83       	std	Y+4, r20	; 0x04
    12e2:	3f 83       	std	Y+7, r19	; 0x07
    12e4:	2e 83       	std	Y+6, r18	; 0x06
	unsigned char flag=0;
    12e6:	19 82       	std	Y+1, r1	; 0x01
	if(row==0||coloumn==0)
    12e8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ea:	88 23       	and	r24, r24
    12ec:	19 f0       	breq	.+6      	; 0x12f4 <lcd_print+0x2e>
    12ee:	8b 81       	ldd	r24, Y+3	; 0x03
    12f0:	88 23       	and	r24, r24
    12f2:	19 f4       	brne	.+6      	; 0x12fa <lcd_print+0x34>
	{
		lcd_home();
    12f4:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <lcd_home>
    12f8:	04 c0       	rjmp	.+8      	; 0x1302 <lcd_print+0x3c>
	}
	else
	{
		lcd_cursor(row,coloumn);
    12fa:	8a 81       	ldd	r24, Y+2	; 0x02
    12fc:	6b 81       	ldd	r22, Y+3	; 0x03
    12fe:	0e 94 21 09 	call	0x1242	; 0x1242 <lcd_cursor>
	}
	if(digits==5 || flag==1)
    1302:	8e 81       	ldd	r24, Y+6	; 0x06
    1304:	9f 81       	ldd	r25, Y+7	; 0x07
    1306:	85 30       	cpi	r24, 0x05	; 5
    1308:	91 05       	cpc	r25, r1
    130a:	19 f0       	breq	.+6      	; 0x1312 <lcd_print+0x4c>
    130c:	89 81       	ldd	r24, Y+1	; 0x01
    130e:	81 30       	cpi	r24, 0x01	; 1
    1310:	a9 f4       	brne	.+42     	; 0x133c <lcd_print+0x76>
	{
		million=value/10000+48;
    1312:	8c 81       	ldd	r24, Y+4	; 0x04
    1314:	9d 81       	ldd	r25, Y+5	; 0x05
    1316:	20 e1       	ldi	r18, 0x10	; 16
    1318:	37 e2       	ldi	r19, 0x27	; 39
    131a:	b9 01       	movw	r22, r18
    131c:	0e 94 cf 20 	call	0x419e	; 0x419e <__udivmodhi4>
    1320:	cb 01       	movw	r24, r22
    1322:	c0 96       	adiw	r24, 0x30	; 48
    1324:	90 93 09 06 	sts	0x0609, r25
    1328:	80 93 08 06 	sts	0x0608, r24
		lcd_wr_char(million);
    132c:	80 91 08 06 	lds	r24, 0x0608
    1330:	90 91 09 06 	lds	r25, 0x0609
    1334:	0e 94 a0 07 	call	0xf40	; 0xf40 <lcd_wr_char>
		flag=1;
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==4 || flag==1)
    133c:	8e 81       	ldd	r24, Y+6	; 0x06
    133e:	9f 81       	ldd	r25, Y+7	; 0x07
    1340:	84 30       	cpi	r24, 0x04	; 4
    1342:	91 05       	cpc	r25, r1
    1344:	19 f0       	breq	.+6      	; 0x134c <lcd_print+0x86>
    1346:	89 81       	ldd	r24, Y+1	; 0x01
    1348:	81 30       	cpi	r24, 0x01	; 1
    134a:	11 f5       	brne	.+68     	; 0x1390 <lcd_print+0xca>
	{
		temp = value/1000;
    134c:	8c 81       	ldd	r24, Y+4	; 0x04
    134e:	9d 81       	ldd	r25, Y+5	; 0x05
    1350:	28 ee       	ldi	r18, 0xE8	; 232
    1352:	33 e0       	ldi	r19, 0x03	; 3
    1354:	b9 01       	movw	r22, r18
    1356:	0e 94 cf 20 	call	0x419e	; 0x419e <__udivmodhi4>
    135a:	cb 01       	movw	r24, r22
    135c:	90 93 0b 06 	sts	0x060B, r25
    1360:	80 93 0a 06 	sts	0x060A, r24
		thousand = temp%10 + 48;
    1364:	80 91 0a 06 	lds	r24, 0x060A
    1368:	90 91 0b 06 	lds	r25, 0x060B
    136c:	2a e0       	ldi	r18, 0x0A	; 10
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	b9 01       	movw	r22, r18
    1372:	0e 94 cf 20 	call	0x419e	; 0x419e <__udivmodhi4>
    1376:	c0 96       	adiw	r24, 0x30	; 48
    1378:	90 93 13 06 	sts	0x0613, r25
    137c:	80 93 12 06 	sts	0x0612, r24
		lcd_wr_char(thousand);
    1380:	80 91 12 06 	lds	r24, 0x0612
    1384:	90 91 13 06 	lds	r25, 0x0613
    1388:	0e 94 a0 07 	call	0xf40	; 0xf40 <lcd_wr_char>
		flag=1;
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==3 || flag==1)
    1390:	8e 81       	ldd	r24, Y+6	; 0x06
    1392:	9f 81       	ldd	r25, Y+7	; 0x07
    1394:	83 30       	cpi	r24, 0x03	; 3
    1396:	91 05       	cpc	r25, r1
    1398:	19 f0       	breq	.+6      	; 0x13a0 <lcd_print+0xda>
    139a:	89 81       	ldd	r24, Y+1	; 0x01
    139c:	81 30       	cpi	r24, 0x01	; 1
    139e:	11 f5       	brne	.+68     	; 0x13e4 <lcd_print+0x11e>
	{
		temp = value/100;
    13a0:	8c 81       	ldd	r24, Y+4	; 0x04
    13a2:	9d 81       	ldd	r25, Y+5	; 0x05
    13a4:	24 e6       	ldi	r18, 0x64	; 100
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	b9 01       	movw	r22, r18
    13aa:	0e 94 cf 20 	call	0x419e	; 0x419e <__udivmodhi4>
    13ae:	cb 01       	movw	r24, r22
    13b0:	90 93 0b 06 	sts	0x060B, r25
    13b4:	80 93 0a 06 	sts	0x060A, r24
		hundred = temp%10 + 48;
    13b8:	80 91 0a 06 	lds	r24, 0x060A
    13bc:	90 91 0b 06 	lds	r25, 0x060B
    13c0:	2a e0       	ldi	r18, 0x0A	; 10
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	b9 01       	movw	r22, r18
    13c6:	0e 94 cf 20 	call	0x419e	; 0x419e <__udivmodhi4>
    13ca:	c0 96       	adiw	r24, 0x30	; 48
    13cc:	90 93 0f 06 	sts	0x060F, r25
    13d0:	80 93 0e 06 	sts	0x060E, r24
		lcd_wr_char(hundred);
    13d4:	80 91 0e 06 	lds	r24, 0x060E
    13d8:	90 91 0f 06 	lds	r25, 0x060F
    13dc:	0e 94 a0 07 	call	0xf40	; 0xf40 <lcd_wr_char>
		flag=1;
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==2 || flag==1)
    13e4:	8e 81       	ldd	r24, Y+6	; 0x06
    13e6:	9f 81       	ldd	r25, Y+7	; 0x07
    13e8:	82 30       	cpi	r24, 0x02	; 2
    13ea:	91 05       	cpc	r25, r1
    13ec:	19 f0       	breq	.+6      	; 0x13f4 <lcd_print+0x12e>
    13ee:	89 81       	ldd	r24, Y+1	; 0x01
    13f0:	81 30       	cpi	r24, 0x01	; 1
    13f2:	11 f5       	brne	.+68     	; 0x1438 <lcd_print+0x172>
	{
		temp = value/10;
    13f4:	8c 81       	ldd	r24, Y+4	; 0x04
    13f6:	9d 81       	ldd	r25, Y+5	; 0x05
    13f8:	2a e0       	ldi	r18, 0x0A	; 10
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	b9 01       	movw	r22, r18
    13fe:	0e 94 cf 20 	call	0x419e	; 0x419e <__udivmodhi4>
    1402:	cb 01       	movw	r24, r22
    1404:	90 93 0b 06 	sts	0x060B, r25
    1408:	80 93 0a 06 	sts	0x060A, r24
		tens = temp%10 + 48;
    140c:	80 91 0a 06 	lds	r24, 0x060A
    1410:	90 91 0b 06 	lds	r25, 0x060B
    1414:	2a e0       	ldi	r18, 0x0A	; 10
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	b9 01       	movw	r22, r18
    141a:	0e 94 cf 20 	call	0x419e	; 0x419e <__udivmodhi4>
    141e:	c0 96       	adiw	r24, 0x30	; 48
    1420:	90 93 0d 06 	sts	0x060D, r25
    1424:	80 93 0c 06 	sts	0x060C, r24
		lcd_wr_char(tens);
    1428:	80 91 0c 06 	lds	r24, 0x060C
    142c:	90 91 0d 06 	lds	r25, 0x060D
    1430:	0e 94 a0 07 	call	0xf40	; 0xf40 <lcd_wr_char>
		flag=1;
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==1 || flag==1)
    1438:	8e 81       	ldd	r24, Y+6	; 0x06
    143a:	9f 81       	ldd	r25, Y+7	; 0x07
    143c:	81 30       	cpi	r24, 0x01	; 1
    143e:	91 05       	cpc	r25, r1
    1440:	19 f0       	breq	.+6      	; 0x1448 <lcd_print+0x182>
    1442:	89 81       	ldd	r24, Y+1	; 0x01
    1444:	81 30       	cpi	r24, 0x01	; 1
    1446:	91 f4       	brne	.+36     	; 0x146c <lcd_print+0x1a6>
	{
		unit = value%10 + 48;
    1448:	8c 81       	ldd	r24, Y+4	; 0x04
    144a:	9d 81       	ldd	r25, Y+5	; 0x05
    144c:	2a e0       	ldi	r18, 0x0A	; 10
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	b9 01       	movw	r22, r18
    1452:	0e 94 cf 20 	call	0x419e	; 0x419e <__udivmodhi4>
    1456:	c0 96       	adiw	r24, 0x30	; 48
    1458:	90 93 11 06 	sts	0x0611, r25
    145c:	80 93 10 06 	sts	0x0610, r24
		lcd_wr_char(unit);
    1460:	80 91 10 06 	lds	r24, 0x0610
    1464:	90 91 11 06 	lds	r25, 0x0611
    1468:	0e 94 a0 07 	call	0xf40	; 0xf40 <lcd_wr_char>
	}
	if(digits>5)
    146c:	8e 81       	ldd	r24, Y+6	; 0x06
    146e:	9f 81       	ldd	r25, Y+7	; 0x07
    1470:	86 30       	cpi	r24, 0x06	; 6
    1472:	91 05       	cpc	r25, r1
    1474:	1c f0       	brlt	.+6      	; 0x147c <lcd_print+0x1b6>
	{
		lcd_wr_char('E');
    1476:	85 e4       	ldi	r24, 0x45	; 69
    1478:	0e 94 a0 07 	call	0xf40	; 0xf40 <lcd_wr_char>
	}
	
}
    147c:	27 96       	adiw	r28, 0x07	; 7
    147e:	0f b6       	in	r0, 0x3f	; 63
    1480:	f8 94       	cli
    1482:	de bf       	out	0x3e, r29	; 62
    1484:	0f be       	out	0x3f, r0	; 63
    1486:	cd bf       	out	0x3d, r28	; 61
    1488:	cf 91       	pop	r28
    148a:	df 91       	pop	r29
    148c:	08 95       	ret

0000148e <init_devices>:

void init_devices (void)
{
    148e:	df 93       	push	r29
    1490:	cf 93       	push	r28
    1492:	cd b7       	in	r28, 0x3d	; 61
    1494:	de b7       	in	r29, 0x3e	; 62
 cli(); //Clears the global interrupts
    1496:	f8 94       	cli
 sei();   //Enables the global interrupts
    1498:	78 94       	sei
}		
    149a:	cf 91       	pop	r28
    149c:	df 91       	pop	r29
    149e:	08 95       	ret

000014a0 <INIT_USRT_0>:

/**
 * XBee wireless trans-receiver initiator
 */
void INIT_USRT_0 ()
{
    14a0:	df 93       	push	r29
    14a2:	cf 93       	push	r28
    14a4:	cd b7       	in	r28, 0x3d	; 61
    14a6:	de b7       	in	r29, 0x3e	; 62
	UCSR0B = 0x00;
    14a8:	e1 ec       	ldi	r30, 0xC1	; 193
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	10 82       	st	Z, r1
	UCSR0A = 0x00;
    14ae:	e0 ec       	ldi	r30, 0xC0	; 192
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	10 82       	st	Z, r1
	UCSR0C = 0x06;
    14b4:	e2 ec       	ldi	r30, 0xC2	; 194
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	86 e0       	ldi	r24, 0x06	; 6
    14ba:	80 83       	st	Z, r24
	UBRR0L = 0x47; //use baud rate low
    14bc:	e4 ec       	ldi	r30, 0xC4	; 196
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	87 e4       	ldi	r24, 0x47	; 71
    14c2:	80 83       	st	Z, r24
	UBRR0H = 0x00; //use baud rate high
    14c4:	e5 ec       	ldi	r30, 0xC5	; 197
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	10 82       	st	Z, r1
	UCSR0B = 0x98; 
    14ca:	e1 ec       	ldi	r30, 0xC1	; 193
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	88 e9       	ldi	r24, 0x98	; 152
    14d0:	80 83       	st	Z, r24
}
    14d2:	cf 91       	pop	r28
    14d4:	df 91       	pop	r29
    14d6:	08 95       	ret

000014d8 <INIT_USRT_1>:

/**
 * Serial port RS232D initiator
 */
void INIT_USRT_1 ()
{
    14d8:	df 93       	push	r29
    14da:	cf 93       	push	r28
    14dc:	cd b7       	in	r28, 0x3d	; 61
    14de:	de b7       	in	r29, 0x3e	; 62
	UCSR1B = 0x00;
    14e0:	e9 ec       	ldi	r30, 0xC9	; 201
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	10 82       	st	Z, r1
	UCSR1A = 0x00;
    14e6:	e8 ec       	ldi	r30, 0xC8	; 200
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	10 82       	st	Z, r1
	UCSR1C = 0x06;
    14ec:	ea ec       	ldi	r30, 0xCA	; 202
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	86 e0       	ldi	r24, 0x06	; 6
    14f2:	80 83       	st	Z, r24
	UBRR1L = 0x47; //use baud rate low
    14f4:	ec ec       	ldi	r30, 0xCC	; 204
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	87 e4       	ldi	r24, 0x47	; 71
    14fa:	80 83       	st	Z, r24
	UBRR1H = 0x00; //use baud rate high
    14fc:	ed ec       	ldi	r30, 0xCD	; 205
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	10 82       	st	Z, r1
	UCSR1B = 0x98; 
    1502:	e9 ec       	ldi	r30, 0xC9	; 201
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	88 e9       	ldi	r24, 0x98	; 152
    1508:	80 83       	st	Z, r24
}
    150a:	cf 91       	pop	r28
    150c:	df 91       	pop	r29
    150e:	08 95       	ret

00001510 <INIT_PORTS>:

/**
 * Initiate other ports
 */
void INIT_PORTS()
{
    1510:	df 93       	push	r29
    1512:	cf 93       	push	r28
    1514:	cd b7       	in	r28, 0x3d	; 61
    1516:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0x0F;	//set 0-3 pins as output value
    1518:	e1 e2       	ldi	r30, 0x21	; 33
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	8f e0       	ldi	r24, 0x0F	; 15
    151e:	80 83       	st	Z, r24
	PORTA=0x00;		// Port A init
    1520:	e2 e2       	ldi	r30, 0x22	; 34
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	10 82       	st	Z, r1
	DDRL = 0x18;
    1526:	ea e0       	ldi	r30, 0x0A	; 10
    1528:	f1 e0       	ldi	r31, 0x01	; 1
    152a:	88 e1       	ldi	r24, 0x18	; 24
    152c:	80 83       	st	Z, r24
	PORTL = 0x18;
    152e:	eb e0       	ldi	r30, 0x0B	; 11
    1530:	f1 e0       	ldi	r31, 0x01	; 1
    1532:	88 e1       	ldi	r24, 0x18	; 24
    1534:	80 83       	st	Z, r24
	DDRE = 0x00; 	// PORT E is set for input
    1536:	ed e2       	ldi	r30, 0x2D	; 45
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	10 82       	st	Z, r1
	PORTE = 0x00;
    153c:	ee e2       	ldi	r30, 0x2E	; 46
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	10 82       	st	Z, r1

	//Configure PORTB 5 pin for servo motor 1 operation
	DDRB  = DDRB | 0x20;  //making PORTB 5 pin output
    1542:	a4 e2       	ldi	r26, 0x24	; 36
    1544:	b0 e0       	ldi	r27, 0x00	; 0
    1546:	e4 e2       	ldi	r30, 0x24	; 36
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	80 81       	ld	r24, Z
    154c:	80 62       	ori	r24, 0x20	; 32
    154e:	8c 93       	st	X, r24
	PORTB = PORTB | 0x20; //setting PORTB 5 pin to logic 1
    1550:	a5 e2       	ldi	r26, 0x25	; 37
    1552:	b0 e0       	ldi	r27, 0x00	; 0
    1554:	e5 e2       	ldi	r30, 0x25	; 37
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	80 81       	ld	r24, Z
    155a:	80 62       	ori	r24, 0x20	; 32
    155c:	8c 93       	st	X, r24

	//Configure PORTB 6 pin for servo motor 2 operation
	DDRB  = DDRB | 0x40;  //making PORTB 6 pin output
    155e:	a4 e2       	ldi	r26, 0x24	; 36
    1560:	b0 e0       	ldi	r27, 0x00	; 0
    1562:	e4 e2       	ldi	r30, 0x24	; 36
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	80 81       	ld	r24, Z
    1568:	80 64       	ori	r24, 0x40	; 64
    156a:	8c 93       	st	X, r24
	PORTB = PORTB | 0x40; //setting PORTB 6 pin to logic 1
    156c:	a5 e2       	ldi	r26, 0x25	; 37
    156e:	b0 e0       	ldi	r27, 0x00	; 0
    1570:	e5 e2       	ldi	r30, 0x25	; 37
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	80 81       	ld	r24, Z
    1576:	80 64       	ori	r24, 0x40	; 64
    1578:	8c 93       	st	X, r24
	
	DDRE = DDRE & 0x7F;  //PORTE 7 pin set as input   
    157a:	ad e2       	ldi	r26, 0x2D	; 45
    157c:	b0 e0       	ldi	r27, 0x00	; 0
    157e:	ed e2       	ldi	r30, 0x2D	; 45
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	80 81       	ld	r24, Z
    1584:	8f 77       	andi	r24, 0x7F	; 127
    1586:	8c 93       	st	X, r24
	PORTE = PORTE | 0x80; //PORTE7 internal pull-up enabled 
    1588:	ae e2       	ldi	r26, 0x2E	; 46
    158a:	b0 e0       	ldi	r27, 0x00	; 0
    158c:	ee e2       	ldi	r30, 0x2E	; 46
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	80 81       	ld	r24, Z
    1592:	80 68       	ori	r24, 0x80	; 128
    1594:	8c 93       	st	X, r24
}
    1596:	cf 91       	pop	r28
    1598:	df 91       	pop	r29
    159a:	08 95       	ret

0000159c <INIT_PWM>:

/**
 * Initiate PWM
 */
void INIT_PWM ()
{
    159c:	df 93       	push	r29
    159e:	cf 93       	push	r28
    15a0:	cd b7       	in	r28, 0x3d	; 61
    15a2:	de b7       	in	r29, 0x3e	; 62
	// For Servo Motors
	TCCR1B = 0x00; 	//stop
    15a4:	e1 e8       	ldi	r30, 0x81	; 129
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	10 82       	st	Z, r1
	TCNT1H = 0xFC; 	//Counter high value to which OCR1xH value is to be compared with
    15aa:	e5 e8       	ldi	r30, 0x85	; 133
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	8c ef       	ldi	r24, 0xFC	; 252
    15b0:	80 83       	st	Z, r24
	TCNT1L = 0x01;	//Counter low value to which OCR1xH value is to be compared with
    15b2:	e4 e8       	ldi	r30, 0x84	; 132
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	81 e0       	ldi	r24, 0x01	; 1
    15b8:	80 83       	st	Z, r24
	OCR1AH = 0x03;	//Output compare eegister high value for servo 1
    15ba:	e9 e8       	ldi	r30, 0x89	; 137
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	83 e0       	ldi	r24, 0x03	; 3
    15c0:	80 83       	st	Z, r24
	OCR1AL = 0xFF;	//Output Compare Register low Value For servo 1
    15c2:	e8 e8       	ldi	r30, 0x88	; 136
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	8f ef       	ldi	r24, 0xFF	; 255
    15c8:	80 83       	st	Z, r24
	OCR1BH = 0x03;	//Output compare eegister high value for servo 2
    15ca:	eb e8       	ldi	r30, 0x8B	; 139
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	83 e0       	ldi	r24, 0x03	; 3
    15d0:	80 83       	st	Z, r24
	OCR1BL = 0xFF;	//Output Compare Register low Value For servo 2
    15d2:	ea e8       	ldi	r30, 0x8A	; 138
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	8f ef       	ldi	r24, 0xFF	; 255
    15d8:	80 83       	st	Z, r24
	OCR1CH = 0x03;	//Output compare eegister high value for servo 3
    15da:	ed e8       	ldi	r30, 0x8D	; 141
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	83 e0       	ldi	r24, 0x03	; 3
    15e0:	80 83       	st	Z, r24
	OCR1CL = 0xFF;	//Output Compare Register low Value For servo 3
    15e2:	ec e8       	ldi	r30, 0x8C	; 140
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	8f ef       	ldi	r24, 0xFF	; 255
    15e8:	80 83       	st	Z, r24
	ICR1H  = 0x03;	
    15ea:	e7 e8       	ldi	r30, 0x87	; 135
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	83 e0       	ldi	r24, 0x03	; 3
    15f0:	80 83       	st	Z, r24
	ICR1L  = 0xFF;
    15f2:	e6 e8       	ldi	r30, 0x86	; 134
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	8f ef       	ldi	r24, 0xFF	; 255
    15f8:	80 83       	st	Z, r24
	TCCR1A = 0xAB; /*{COM1A1=1, COM1A0=0; COM1B1=1, COM1B0=0; COM1C1=1 COM1C0=0}
    15fa:	e0 e8       	ldi	r30, 0x80	; 128
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	8b ea       	ldi	r24, 0xAB	; 171
    1600:	80 83       	st	Z, r24
						For Overriding normal port functionalit to OCRnA outputs.
				  {WGM11=1, WGM10=1} Along With WGM12 in TCCR1B for Selecting FAST PWM Mode*/
	TCCR1C = 0x00;
    1602:	e2 e8       	ldi	r30, 0x82	; 130
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	10 82       	st	Z, r1
	TCCR1B = 0x0C; //WGM12=1; CS12=1, CS11=0, CS10=0 (Prescaler=256)	
    1608:	e1 e8       	ldi	r30, 0x81	; 129
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	8c e0       	ldi	r24, 0x0C	; 12
    160e:	80 83       	st	Z, r24

	// For DC Motors
	TCCR5B = 0x00;
    1610:	e1 e2       	ldi	r30, 0x21	; 33
    1612:	f1 e0       	ldi	r31, 0x01	; 1
    1614:	10 82       	st	Z, r1
	TCCR5A = 0xA1;
    1616:	e0 e2       	ldi	r30, 0x20	; 32
    1618:	f1 e0       	ldi	r31, 0x01	; 1
    161a:	81 ea       	ldi	r24, 0xA1	; 161
    161c:	80 83       	st	Z, r24
	TCCR5B = 0x0B;
    161e:	e1 e2       	ldi	r30, 0x21	; 33
    1620:	f1 e0       	ldi	r31, 0x01	; 1
    1622:	8b e0       	ldi	r24, 0x0B	; 11
    1624:	80 83       	st	Z, r24
	
	OCR5AL = RIGHTAVGSPEED;
    1626:	e8 e2       	ldi	r30, 0x28	; 40
    1628:	f1 e0       	ldi	r31, 0x01	; 1
    162a:	83 e7       	ldi	r24, 0x73	; 115
    162c:	80 83       	st	Z, r24
	OCR5BL = LEFTAVGSPEED;
    162e:	ea e2       	ldi	r30, 0x2A	; 42
    1630:	f1 e0       	ldi	r31, 0x01	; 1
    1632:	83 e7       	ldi	r24, 0x73	; 115
    1634:	80 83       	st	Z, r24
}
    1636:	cf 91       	pop	r28
    1638:	df 91       	pop	r29
    163a:	08 95       	ret

0000163c <INIT_INT>:

/**
 * Initiate interrupt system
 */
void INIT_INT ()
{
    163c:	df 93       	push	r29
    163e:	cf 93       	push	r28
    1640:	cd b7       	in	r28, 0x3d	; 61
    1642:	de b7       	in	r29, 0x3e	; 62
	cli();
    1644:	f8 94       	cli
	EICRB = 0x0A; // Enable interrupt at falling edge for both wheels.
    1646:	ea e6       	ldi	r30, 0x6A	; 106
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	8a e0       	ldi	r24, 0x0A	; 10
    164c:	80 83       	st	Z, r24
	EIMSK = 0x30; // Enable interrupt for both the wheels.
    164e:	ed e3       	ldi	r30, 0x3D	; 61
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	80 e3       	ldi	r24, 0x30	; 48
    1654:	80 83       	st	Z, r24
	sei(); // Set global interrupt.
    1656:	78 94       	sei
}
    1658:	cf 91       	pop	r28
    165a:	df 91       	pop	r29
    165c:	08 95       	ret

0000165e <__vector_5>:

/**
 * Interrupt Service Routine for right motor (in the opposite configuration)
 */
ISR(INT4_vect)
{
    165e:	1f 92       	push	r1
    1660:	0f 92       	push	r0
    1662:	0f b6       	in	r0, 0x3f	; 63
    1664:	0f 92       	push	r0
    1666:	11 24       	eor	r1, r1
    1668:	8f 93       	push	r24
    166a:	9f 93       	push	r25
    166c:	df 93       	push	r29
    166e:	cf 93       	push	r28
    1670:	cd b7       	in	r28, 0x3d	; 61
    1672:	de b7       	in	r29, 0x3e	; 62
	right_shaft_count++; // Inverted purposefully in opposite configuration
    1674:	80 91 a4 03 	lds	r24, 0x03A4
    1678:	90 91 a5 03 	lds	r25, 0x03A5
    167c:	01 96       	adiw	r24, 0x01	; 1
    167e:	90 93 a5 03 	sts	0x03A5, r25
    1682:	80 93 a4 03 	sts	0x03A4, r24
}
    1686:	cf 91       	pop	r28
    1688:	df 91       	pop	r29
    168a:	9f 91       	pop	r25
    168c:	8f 91       	pop	r24
    168e:	0f 90       	pop	r0
    1690:	0f be       	out	0x3f, r0	; 63
    1692:	0f 90       	pop	r0
    1694:	1f 90       	pop	r1
    1696:	18 95       	reti

00001698 <__vector_6>:

/**
 * Interrupt Service Routine for left motor (in the opposite configuration)
 */
ISR(INT5_vect)
{
    1698:	1f 92       	push	r1
    169a:	0f 92       	push	r0
    169c:	0f b6       	in	r0, 0x3f	; 63
    169e:	0f 92       	push	r0
    16a0:	11 24       	eor	r1, r1
    16a2:	8f 93       	push	r24
    16a4:	9f 93       	push	r25
    16a6:	df 93       	push	r29
    16a8:	cf 93       	push	r28
    16aa:	cd b7       	in	r28, 0x3d	; 61
    16ac:	de b7       	in	r29, 0x3e	; 62
	left_shaft_count++; // Inverted purposefully in opposite configuration
    16ae:	80 91 a2 03 	lds	r24, 0x03A2
    16b2:	90 91 a3 03 	lds	r25, 0x03A3
    16b6:	01 96       	adiw	r24, 0x01	; 1
    16b8:	90 93 a3 03 	sts	0x03A3, r25
    16bc:	80 93 a2 03 	sts	0x03A2, r24
}
    16c0:	cf 91       	pop	r28
    16c2:	df 91       	pop	r29
    16c4:	9f 91       	pop	r25
    16c6:	8f 91       	pop	r24
    16c8:	0f 90       	pop	r0
    16ca:	0f be       	out	0x3f, r0	; 63
    16cc:	0f 90       	pop	r0
    16ce:	1f 90       	pop	r1
    16d0:	18 95       	reti

000016d2 <servo_1>:

/**
 * Rotate panning servo by a specified angle in the multiples of 2.25 degrees
 */
void servo_1(unsigned char degrees)
{
    16d2:	0f 93       	push	r16
    16d4:	1f 93       	push	r17
    16d6:	df 93       	push	r29
    16d8:	cf 93       	push	r28
    16da:	00 d0       	rcall	.+0      	; 0x16dc <servo_1+0xa>
    16dc:	0f 92       	push	r0
    16de:	0f 92       	push	r0
    16e0:	cd b7       	in	r28, 0x3d	; 61
    16e2:	de b7       	in	r29, 0x3e	; 62
    16e4:	8d 83       	std	Y+5, r24	; 0x05
	float PositionPanServo = 0;
    16e6:	80 e0       	ldi	r24, 0x00	; 0
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	a0 e0       	ldi	r26, 0x00	; 0
    16ec:	b0 e0       	ldi	r27, 0x00	; 0
    16ee:	89 83       	std	Y+1, r24	; 0x01
    16f0:	9a 83       	std	Y+2, r25	; 0x02
    16f2:	ab 83       	std	Y+3, r26	; 0x03
    16f4:	bc 83       	std	Y+4, r27	; 0x04
	PositionPanServo = ((float)degrees / 2.25) + 21.0;
    16f6:	8d 81       	ldd	r24, Y+5	; 0x05
    16f8:	88 2f       	mov	r24, r24
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	a0 e0       	ldi	r26, 0x00	; 0
    16fe:	b0 e0       	ldi	r27, 0x00	; 0
    1700:	bc 01       	movw	r22, r24
    1702:	cd 01       	movw	r24, r26
    1704:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <__floatunsisf>
    1708:	dc 01       	movw	r26, r24
    170a:	cb 01       	movw	r24, r22
    170c:	bc 01       	movw	r22, r24
    170e:	cd 01       	movw	r24, r26
    1710:	20 e0       	ldi	r18, 0x00	; 0
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	40 e1       	ldi	r20, 0x10	; 16
    1716:	50 e4       	ldi	r21, 0x40	; 64
    1718:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <__divsf3>
    171c:	dc 01       	movw	r26, r24
    171e:	cb 01       	movw	r24, r22
    1720:	bc 01       	movw	r22, r24
    1722:	cd 01       	movw	r24, r26
    1724:	20 e0       	ldi	r18, 0x00	; 0
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	48 ea       	ldi	r20, 0xA8	; 168
    172a:	51 e4       	ldi	r21, 0x41	; 65
    172c:	0e 94 4c 1b 	call	0x3698	; 0x3698 <__addsf3>
    1730:	dc 01       	movw	r26, r24
    1732:	cb 01       	movw	r24, r22
    1734:	89 83       	std	Y+1, r24	; 0x01
    1736:	9a 83       	std	Y+2, r25	; 0x02
    1738:	ab 83       	std	Y+3, r26	; 0x03
    173a:	bc 83       	std	Y+4, r27	; 0x04
	OCR1AH = 0x00;
    173c:	e9 e8       	ldi	r30, 0x89	; 137
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	10 82       	st	Z, r1
	OCR1AL = (unsigned char) PositionPanServo;
    1742:	08 e8       	ldi	r16, 0x88	; 136
    1744:	10 e0       	ldi	r17, 0x00	; 0
    1746:	69 81       	ldd	r22, Y+1	; 0x01
    1748:	7a 81       	ldd	r23, Y+2	; 0x02
    174a:	8b 81       	ldd	r24, Y+3	; 0x03
    174c:	9c 81       	ldd	r25, Y+4	; 0x04
    174e:	0e 94 a3 19 	call	0x3346	; 0x3346 <__fixunssfsi>
    1752:	dc 01       	movw	r26, r24
    1754:	cb 01       	movw	r24, r22
    1756:	f8 01       	movw	r30, r16
    1758:	80 83       	st	Z, r24
}
    175a:	0f 90       	pop	r0
    175c:	0f 90       	pop	r0
    175e:	0f 90       	pop	r0
    1760:	0f 90       	pop	r0
    1762:	0f 90       	pop	r0
    1764:	cf 91       	pop	r28
    1766:	df 91       	pop	r29
    1768:	1f 91       	pop	r17
    176a:	0f 91       	pop	r16
    176c:	08 95       	ret

0000176e <servo_2>:

/**
 * Rotate pen controller servo by a specified angle in the multiples of 2.25 degrees
 */
void servo_2(unsigned char degrees)
{
    176e:	0f 93       	push	r16
    1770:	1f 93       	push	r17
    1772:	df 93       	push	r29
    1774:	cf 93       	push	r28
    1776:	00 d0       	rcall	.+0      	; 0x1778 <servo_2+0xa>
    1778:	0f 92       	push	r0
    177a:	0f 92       	push	r0
    177c:	cd b7       	in	r28, 0x3d	; 61
    177e:	de b7       	in	r29, 0x3e	; 62
    1780:	8d 83       	std	Y+5, r24	; 0x05
	float PositionTiltServo = 0;
    1782:	80 e0       	ldi	r24, 0x00	; 0
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	a0 e0       	ldi	r26, 0x00	; 0
    1788:	b0 e0       	ldi	r27, 0x00	; 0
    178a:	89 83       	std	Y+1, r24	; 0x01
    178c:	9a 83       	std	Y+2, r25	; 0x02
    178e:	ab 83       	std	Y+3, r26	; 0x03
    1790:	bc 83       	std	Y+4, r27	; 0x04
	PositionTiltServo = ((float)degrees / 2.25) + 21.0;
    1792:	8d 81       	ldd	r24, Y+5	; 0x05
    1794:	88 2f       	mov	r24, r24
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	a0 e0       	ldi	r26, 0x00	; 0
    179a:	b0 e0       	ldi	r27, 0x00	; 0
    179c:	bc 01       	movw	r22, r24
    179e:	cd 01       	movw	r24, r26
    17a0:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <__floatunsisf>
    17a4:	dc 01       	movw	r26, r24
    17a6:	cb 01       	movw	r24, r22
    17a8:	bc 01       	movw	r22, r24
    17aa:	cd 01       	movw	r24, r26
    17ac:	20 e0       	ldi	r18, 0x00	; 0
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	40 e1       	ldi	r20, 0x10	; 16
    17b2:	50 e4       	ldi	r21, 0x40	; 64
    17b4:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <__divsf3>
    17b8:	dc 01       	movw	r26, r24
    17ba:	cb 01       	movw	r24, r22
    17bc:	bc 01       	movw	r22, r24
    17be:	cd 01       	movw	r24, r26
    17c0:	20 e0       	ldi	r18, 0x00	; 0
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	48 ea       	ldi	r20, 0xA8	; 168
    17c6:	51 e4       	ldi	r21, 0x41	; 65
    17c8:	0e 94 4c 1b 	call	0x3698	; 0x3698 <__addsf3>
    17cc:	dc 01       	movw	r26, r24
    17ce:	cb 01       	movw	r24, r22
    17d0:	89 83       	std	Y+1, r24	; 0x01
    17d2:	9a 83       	std	Y+2, r25	; 0x02
    17d4:	ab 83       	std	Y+3, r26	; 0x03
    17d6:	bc 83       	std	Y+4, r27	; 0x04
	OCR1BH = 0x00;
    17d8:	eb e8       	ldi	r30, 0x8B	; 139
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	10 82       	st	Z, r1
	OCR1BL = (unsigned char) PositionTiltServo;
    17de:	0a e8       	ldi	r16, 0x8A	; 138
    17e0:	10 e0       	ldi	r17, 0x00	; 0
    17e2:	69 81       	ldd	r22, Y+1	; 0x01
    17e4:	7a 81       	ldd	r23, Y+2	; 0x02
    17e6:	8b 81       	ldd	r24, Y+3	; 0x03
    17e8:	9c 81       	ldd	r25, Y+4	; 0x04
    17ea:	0e 94 a3 19 	call	0x3346	; 0x3346 <__fixunssfsi>
    17ee:	dc 01       	movw	r26, r24
    17f0:	cb 01       	movw	r24, r22
    17f2:	f8 01       	movw	r30, r16
    17f4:	80 83       	st	Z, r24
}
    17f6:	0f 90       	pop	r0
    17f8:	0f 90       	pop	r0
    17fa:	0f 90       	pop	r0
    17fc:	0f 90       	pop	r0
    17fe:	0f 90       	pop	r0
    1800:	cf 91       	pop	r28
    1802:	df 91       	pop	r29
    1804:	1f 91       	pop	r17
    1806:	0f 91       	pop	r16
    1808:	08 95       	ret

0000180a <servo_1_free>:

/**
 * Free the panning servo
 */
void servo_1_free (void) //makes servo 1 free rotating
{
    180a:	df 93       	push	r29
    180c:	cf 93       	push	r28
    180e:	cd b7       	in	r28, 0x3d	; 61
    1810:	de b7       	in	r29, 0x3e	; 62
	OCR1AH = 0x03; 
    1812:	e9 e8       	ldi	r30, 0x89	; 137
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	83 e0       	ldi	r24, 0x03	; 3
    1818:	80 83       	st	Z, r24
	OCR1AL = 0xFF; //Servo 1 off
    181a:	e8 e8       	ldi	r30, 0x88	; 136
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	8f ef       	ldi	r24, 0xFF	; 255
    1820:	80 83       	st	Z, r24
}
    1822:	cf 91       	pop	r28
    1824:	df 91       	pop	r29
    1826:	08 95       	ret

00001828 <servo_2_free>:

/**
 * Free the pen controller servo
 */
void servo_2_free (void) //makes servo 2 free rotating
{
    1828:	df 93       	push	r29
    182a:	cf 93       	push	r28
    182c:	cd b7       	in	r28, 0x3d	; 61
    182e:	de b7       	in	r29, 0x3e	; 62
	OCR1BH = 0x03;
    1830:	eb e8       	ldi	r30, 0x8B	; 139
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	83 e0       	ldi	r24, 0x03	; 3
    1836:	80 83       	st	Z, r24
	OCR1BL = 0xFF; //Servo 2 off
    1838:	ea e8       	ldi	r30, 0x8A	; 138
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	8f ef       	ldi	r24, 0xFF	; 255
    183e:	80 83       	st	Z, r24
}
    1840:	cf 91       	pop	r28
    1842:	df 91       	pop	r29
    1844:	08 95       	ret

00001846 <display_shaft_count>:

/**
 * Display shaft count on LCD
 */
void display_shaft_count()
{
    1846:	df 93       	push	r29
    1848:	cf 93       	push	r28
    184a:	cd b7       	in	r28, 0x3d	; 61
    184c:	de b7       	in	r29, 0x3e	; 62
	//Display left shaft count
	lcd_cursor(1,1);
    184e:	81 e0       	ldi	r24, 0x01	; 1
    1850:	61 e0       	ldi	r22, 0x01	; 1
    1852:	0e 94 21 09 	call	0x1242	; 0x1242 <lcd_cursor>
	lcd_wr_char('L');
    1856:	8c e4       	ldi	r24, 0x4C	; 76
    1858:	0e 94 a0 07 	call	0xf40	; 0xf40 <lcd_wr_char>
	lcd_print (1,2,left_shaft_count,3);
    185c:	80 91 a2 03 	lds	r24, 0x03A2
    1860:	90 91 a3 03 	lds	r25, 0x03A3
    1864:	9c 01       	movw	r18, r24
    1866:	81 e0       	ldi	r24, 0x01	; 1
    1868:	62 e0       	ldi	r22, 0x02	; 2
    186a:	a9 01       	movw	r20, r18
    186c:	23 e0       	ldi	r18, 0x03	; 3
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	0e 94 63 09 	call	0x12c6	; 0x12c6 <lcd_print>

	//Display right shaft count
	lcd_cursor(1,6);
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	66 e0       	ldi	r22, 0x06	; 6
    1878:	0e 94 21 09 	call	0x1242	; 0x1242 <lcd_cursor>
	lcd_wr_char('R');
    187c:	82 e5       	ldi	r24, 0x52	; 82
    187e:	0e 94 a0 07 	call	0xf40	; 0xf40 <lcd_wr_char>
	lcd_print (1,7,right_shaft_count,3);
    1882:	80 91 a4 03 	lds	r24, 0x03A4
    1886:	90 91 a5 03 	lds	r25, 0x03A5
    188a:	9c 01       	movw	r18, r24
    188c:	81 e0       	ldi	r24, 0x01	; 1
    188e:	67 e0       	ldi	r22, 0x07	; 7
    1890:	a9 01       	movw	r20, r18
    1892:	23 e0       	ldi	r18, 0x03	; 3
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	0e 94 63 09 	call	0x12c6	; 0x12c6 <lcd_print>
}
    189a:	cf 91       	pop	r28
    189c:	df 91       	pop	r29
    189e:	08 95       	ret

000018a0 <bothMotorForward>:

/**
 * Move both motor forward
 */
void bothMotorForward()
{
    18a0:	df 93       	push	r29
    18a2:	cf 93       	push	r28
    18a4:	cd b7       	in	r28, 0x3d	; 61
    18a6:	de b7       	in	r29, 0x3e	; 62
	PORTA = 0x09; //Orginal Config: PORTA = 0x06;
    18a8:	e2 e2       	ldi	r30, 0x22	; 34
    18aa:	f0 e0       	ldi	r31, 0x00	; 0
    18ac:	89 e0       	ldi	r24, 0x09	; 9
    18ae:	80 83       	st	Z, r24
}
    18b0:	cf 91       	pop	r28
    18b2:	df 91       	pop	r29
    18b4:	08 95       	ret

000018b6 <bothMotorBackward>:

/**
 * Move both motor backward
 */
void bothMotorBackward()
{
    18b6:	df 93       	push	r29
    18b8:	cf 93       	push	r28
    18ba:	cd b7       	in	r28, 0x3d	; 61
    18bc:	de b7       	in	r29, 0x3e	; 62
	PORTA = 0x06; //Opp Config
    18be:	e2 e2       	ldi	r30, 0x22	; 34
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	86 e0       	ldi	r24, 0x06	; 6
    18c4:	80 83       	st	Z, r24
}
    18c6:	cf 91       	pop	r28
    18c8:	df 91       	pop	r29
    18ca:	08 95       	ret

000018cc <rightMotorForward>:

/**
 * Move right motor forward
 */
void rightMotorForward()
{
    18cc:	df 93       	push	r29
    18ce:	cf 93       	push	r28
    18d0:	cd b7       	in	r28, 0x3d	; 61
    18d2:	de b7       	in	r29, 0x3e	; 62
	PORTA = 0x01; //Orginal Config: PORTA = 0x04;
    18d4:	e2 e2       	ldi	r30, 0x22	; 34
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	80 83       	st	Z, r24
}
    18dc:	cf 91       	pop	r28
    18de:	df 91       	pop	r29
    18e0:	08 95       	ret

000018e2 <rightMotorBackward>:

/**
 * Move right motor backward
 */
void rightMotorBackward()
{
    18e2:	df 93       	push	r29
    18e4:	cf 93       	push	r28
    18e6:	cd b7       	in	r28, 0x3d	; 61
    18e8:	de b7       	in	r29, 0x3e	; 62
	PORTA = 0x02; //Opp Config
    18ea:	e2 e2       	ldi	r30, 0x22	; 34
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	82 e0       	ldi	r24, 0x02	; 2
    18f0:	80 83       	st	Z, r24
}
    18f2:	cf 91       	pop	r28
    18f4:	df 91       	pop	r29
    18f6:	08 95       	ret

000018f8 <leftMotorForward>:

/**
 * Move left motor forward
 */
void leftMotorForward()
{
    18f8:	df 93       	push	r29
    18fa:	cf 93       	push	r28
    18fc:	cd b7       	in	r28, 0x3d	; 61
    18fe:	de b7       	in	r29, 0x3e	; 62
	PORTA = 0x08; //Orginal Config: PORTA = 0x02;
    1900:	e2 e2       	ldi	r30, 0x22	; 34
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	88 e0       	ldi	r24, 0x08	; 8
    1906:	80 83       	st	Z, r24
}
    1908:	cf 91       	pop	r28
    190a:	df 91       	pop	r29
    190c:	08 95       	ret

0000190e <leftMotorBackward>:

/**
 * Move left motor backward
 */
void leftMotorBackward()
{
    190e:	df 93       	push	r29
    1910:	cf 93       	push	r28
    1912:	cd b7       	in	r28, 0x3d	; 61
    1914:	de b7       	in	r29, 0x3e	; 62
	PORTA = 0x04; //Opp Config
    1916:	e2 e2       	ldi	r30, 0x22	; 34
    1918:	f0 e0       	ldi	r31, 0x00	; 0
    191a:	84 e0       	ldi	r24, 0x04	; 4
    191c:	80 83       	st	Z, r24
}
    191e:	cf 91       	pop	r28
    1920:	df 91       	pop	r29
    1922:	08 95       	ret

00001924 <rightMotorForwardLeftMotorBackward>:

/**
 * Move right motor forward and left motor backward
 */
void rightMotorForwardLeftMotorBackward()
{
    1924:	df 93       	push	r29
    1926:	cf 93       	push	r28
    1928:	cd b7       	in	r28, 0x3d	; 61
    192a:	de b7       	in	r29, 0x3e	; 62
	PORTA = 0x05; // This is opposite config
    192c:	e2 e2       	ldi	r30, 0x22	; 34
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	85 e0       	ldi	r24, 0x05	; 5
    1932:	80 83       	st	Z, r24
}
    1934:	cf 91       	pop	r28
    1936:	df 91       	pop	r29
    1938:	08 95       	ret

0000193a <leftMotorForwardRightMotorBackward>:

/**
 * Move right motor backward and left motor forward
 */
void leftMotorForwardRightMotorBackward()
{
    193a:	df 93       	push	r29
    193c:	cf 93       	push	r28
    193e:	cd b7       	in	r28, 0x3d	; 61
    1940:	de b7       	in	r29, 0x3e	; 62
	PORTA = 0x0A; // This is opposite config
    1942:	e2 e2       	ldi	r30, 0x22	; 34
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	8a e0       	ldi	r24, 0x0A	; 10
    1948:	80 83       	st	Z, r24
}
    194a:	cf 91       	pop	r28
    194c:	df 91       	pop	r29
    194e:	08 95       	ret

00001950 <forward>:
/**
 * Move forward by a certain distance by synchronising the motors STEP wise
 * @param distance distance should be in cm
 */
void forward (float distance) // distance in cm
{
    1950:	df 93       	push	r29
    1952:	cf 93       	push	r28
    1954:	cd b7       	in	r28, 0x3d	; 61
    1956:	de b7       	in	r29, 0x3e	; 62
    1958:	2a 97       	sbiw	r28, 0x0a	; 10
    195a:	0f b6       	in	r0, 0x3f	; 63
    195c:	f8 94       	cli
    195e:	de bf       	out	0x3e, r29	; 62
    1960:	0f be       	out	0x3f, r0	; 63
    1962:	cd bf       	out	0x3d, r28	; 61
    1964:	6f 83       	std	Y+7, r22	; 0x07
    1966:	78 87       	std	Y+8, r23	; 0x08
    1968:	89 87       	std	Y+9, r24	; 0x09
    196a:	9a 87       	std	Y+10, r25	; 0x0a
	int interimLeftCountLimit = STEP, interimRightCountLimit = STEP;
    196c:	81 e0       	ldi	r24, 0x01	; 1
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	9e 83       	std	Y+6, r25	; 0x06
    1972:	8d 83       	std	Y+5, r24	; 0x05
    1974:	81 e0       	ldi	r24, 0x01	; 1
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	9c 83       	std	Y+4, r25	; 0x04
    197a:	8b 83       	std	Y+3, r24	; 0x03
	int spokeCount = 1.854 * distance; // 1.854 = 30 / 16.18cm where 16.18cm is the circumference of the wheel
    197c:	6f 81       	ldd	r22, Y+7	; 0x07
    197e:	78 85       	ldd	r23, Y+8	; 0x08
    1980:	89 85       	ldd	r24, Y+9	; 0x09
    1982:	9a 85       	ldd	r25, Y+10	; 0x0a
    1984:	2f ed       	ldi	r18, 0xDF	; 223
    1986:	3f e4       	ldi	r19, 0x4F	; 79
    1988:	4d ee       	ldi	r20, 0xED	; 237
    198a:	5f e3       	ldi	r21, 0x3F	; 63
    198c:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__mulsf3>
    1990:	dc 01       	movw	r26, r24
    1992:	cb 01       	movw	r24, r22
    1994:	bc 01       	movw	r22, r24
    1996:	cd 01       	movw	r24, r26
    1998:	0e 94 0d 1e 	call	0x3c1a	; 0x3c1a <__fixsfsi>
    199c:	dc 01       	movw	r26, r24
    199e:	cb 01       	movw	r24, r22
    19a0:	9a 83       	std	Y+2, r25	; 0x02
    19a2:	89 83       	std	Y+1, r24	; 0x01
	left_shaft_count = 0;
    19a4:	10 92 a3 03 	sts	0x03A3, r1
    19a8:	10 92 a2 03 	sts	0x03A2, r1
	right_shaft_count = 0;
    19ac:	10 92 a5 03 	sts	0x03A5, r1
    19b0:	10 92 a4 03 	sts	0x03A4, r1
	do
	{
		display_shaft_count();
    19b4:	0e 94 23 0c 	call	0x1846	; 0x1846 <display_shaft_count>

	
		bothMotorForward();
    19b8:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <bothMotorForward>
				interimRightCountLimit = spokeCount;
			else
				interimRightCountLimit += STEP;
		}*/
		//stop();
	}while(left_shaft_count < spokeCount && right_shaft_count < spokeCount);
    19bc:	20 91 a2 03 	lds	r18, 0x03A2
    19c0:	30 91 a3 03 	lds	r19, 0x03A3
    19c4:	89 81       	ldd	r24, Y+1	; 0x01
    19c6:	9a 81       	ldd	r25, Y+2	; 0x02
    19c8:	28 17       	cp	r18, r24
    19ca:	39 07       	cpc	r19, r25
    19cc:	4c f4       	brge	.+18     	; 0x19e0 <forward+0x90>
    19ce:	20 91 a4 03 	lds	r18, 0x03A4
    19d2:	30 91 a5 03 	lds	r19, 0x03A5
    19d6:	89 81       	ldd	r24, Y+1	; 0x01
    19d8:	9a 81       	ldd	r25, Y+2	; 0x02
    19da:	28 17       	cp	r18, r24
    19dc:	39 07       	cpc	r19, r25
    19de:	54 f3       	brlt	.-44     	; 0x19b4 <forward+0x64>

	stop();
    19e0:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <stop>
	display_shaft_count();
    19e4:	0e 94 23 0c 	call	0x1846	; 0x1846 <display_shaft_count>
}
    19e8:	2a 96       	adiw	r28, 0x0a	; 10
    19ea:	0f b6       	in	r0, 0x3f	; 63
    19ec:	f8 94       	cli
    19ee:	de bf       	out	0x3e, r29	; 62
    19f0:	0f be       	out	0x3f, r0	; 63
    19f2:	cd bf       	out	0x3d, r28	; 61
    19f4:	cf 91       	pop	r28
    19f6:	df 91       	pop	r29
    19f8:	08 95       	ret

000019fa <backward>:
/**
 * Move backward by a certain distance by synchronising the motors STEP wise
 * @param distance distance should be in cm
 */
void backward (float distance)
{
    19fa:	df 93       	push	r29
    19fc:	cf 93       	push	r28
    19fe:	cd b7       	in	r28, 0x3d	; 61
    1a00:	de b7       	in	r29, 0x3e	; 62
    1a02:	2a 97       	sbiw	r28, 0x0a	; 10
    1a04:	0f b6       	in	r0, 0x3f	; 63
    1a06:	f8 94       	cli
    1a08:	de bf       	out	0x3e, r29	; 62
    1a0a:	0f be       	out	0x3f, r0	; 63
    1a0c:	cd bf       	out	0x3d, r28	; 61
    1a0e:	6f 83       	std	Y+7, r22	; 0x07
    1a10:	78 87       	std	Y+8, r23	; 0x08
    1a12:	89 87       	std	Y+9, r24	; 0x09
    1a14:	9a 87       	std	Y+10, r25	; 0x0a
	int interimLeftCountLimit = STEP, interimRightCountLimit = STEP;
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	9e 83       	std	Y+6, r25	; 0x06
    1a1c:	8d 83       	std	Y+5, r24	; 0x05
    1a1e:	81 e0       	ldi	r24, 0x01	; 1
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	9c 83       	std	Y+4, r25	; 0x04
    1a24:	8b 83       	std	Y+3, r24	; 0x03
	int spokeCount = 1.854 * distance; // 1.854 = 30 / 16.18cm where 16.18cm is the circumference of the wheel
    1a26:	6f 81       	ldd	r22, Y+7	; 0x07
    1a28:	78 85       	ldd	r23, Y+8	; 0x08
    1a2a:	89 85       	ldd	r24, Y+9	; 0x09
    1a2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a2e:	2f ed       	ldi	r18, 0xDF	; 223
    1a30:	3f e4       	ldi	r19, 0x4F	; 79
    1a32:	4d ee       	ldi	r20, 0xED	; 237
    1a34:	5f e3       	ldi	r21, 0x3F	; 63
    1a36:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__mulsf3>
    1a3a:	dc 01       	movw	r26, r24
    1a3c:	cb 01       	movw	r24, r22
    1a3e:	bc 01       	movw	r22, r24
    1a40:	cd 01       	movw	r24, r26
    1a42:	0e 94 0d 1e 	call	0x3c1a	; 0x3c1a <__fixsfsi>
    1a46:	dc 01       	movw	r26, r24
    1a48:	cb 01       	movw	r24, r22
    1a4a:	9a 83       	std	Y+2, r25	; 0x02
    1a4c:	89 83       	std	Y+1, r24	; 0x01
	left_shaft_count = 0;
    1a4e:	10 92 a3 03 	sts	0x03A3, r1
    1a52:	10 92 a2 03 	sts	0x03A2, r1
	right_shaft_count = 0;
    1a56:	10 92 a5 03 	sts	0x03A5, r1
    1a5a:	10 92 a4 03 	sts	0x03A4, r1
	do
	{
		display_shaft_count();
    1a5e:	0e 94 23 0c 	call	0x1846	; 0x1846 <display_shaft_count>
		
		bothMotorBackward();
    1a62:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <bothMotorBackward>
				interimRightCountLimit = spokeCount;
			else
				interimRightCountLimit += STEP;
		}
		stop();*/
	}while(left_shaft_count < spokeCount && right_shaft_count < spokeCount);
    1a66:	20 91 a2 03 	lds	r18, 0x03A2
    1a6a:	30 91 a3 03 	lds	r19, 0x03A3
    1a6e:	89 81       	ldd	r24, Y+1	; 0x01
    1a70:	9a 81       	ldd	r25, Y+2	; 0x02
    1a72:	28 17       	cp	r18, r24
    1a74:	39 07       	cpc	r19, r25
    1a76:	4c f4       	brge	.+18     	; 0x1a8a <backward+0x90>
    1a78:	20 91 a4 03 	lds	r18, 0x03A4
    1a7c:	30 91 a5 03 	lds	r19, 0x03A5
    1a80:	89 81       	ldd	r24, Y+1	; 0x01
    1a82:	9a 81       	ldd	r25, Y+2	; 0x02
    1a84:	28 17       	cp	r18, r24
    1a86:	39 07       	cpc	r19, r25
    1a88:	54 f3       	brlt	.-44     	; 0x1a5e <backward+0x64>

	stop();
    1a8a:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <stop>
	display_shaft_count();
    1a8e:	0e 94 23 0c 	call	0x1846	; 0x1846 <display_shaft_count>
}
    1a92:	2a 96       	adiw	r28, 0x0a	; 10
    1a94:	0f b6       	in	r0, 0x3f	; 63
    1a96:	f8 94       	cli
    1a98:	de bf       	out	0x3e, r29	; 62
    1a9a:	0f be       	out	0x3f, r0	; 63
    1a9c:	cd bf       	out	0x3d, r28	; 61
    1a9e:	cf 91       	pop	r28
    1aa0:	df 91       	pop	r29
    1aa2:	08 95       	ret

00001aa4 <hard_left_turn>:
/**
 * Turn left by a certain distance by synchronising the motors TURNSTEP wise
 * @param angle angle should be in degrees
 */
void hard_left_turn (float angle)
{
    1aa4:	df 93       	push	r29
    1aa6:	cf 93       	push	r28
    1aa8:	cd b7       	in	r28, 0x3d	; 61
    1aaa:	de b7       	in	r29, 0x3e	; 62
    1aac:	2a 97       	sbiw	r28, 0x0a	; 10
    1aae:	0f b6       	in	r0, 0x3f	; 63
    1ab0:	f8 94       	cli
    1ab2:	de bf       	out	0x3e, r29	; 62
    1ab4:	0f be       	out	0x3f, r0	; 63
    1ab6:	cd bf       	out	0x3d, r28	; 61
    1ab8:	6f 83       	std	Y+7, r22	; 0x07
    1aba:	78 87       	std	Y+8, r23	; 0x08
    1abc:	89 87       	std	Y+9, r24	; 0x09
    1abe:	9a 87       	std	Y+10, r25	; 0x0a
	int interimLeftCountLimit, interimRightCountLimit;
	int spokeCount = angle / 3.95; // Experimental
    1ac0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ac2:	78 85       	ldd	r23, Y+8	; 0x08
    1ac4:	89 85       	ldd	r24, Y+9	; 0x09
    1ac6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ac8:	2d ec       	ldi	r18, 0xCD	; 205
    1aca:	3c ec       	ldi	r19, 0xCC	; 204
    1acc:	4c e7       	ldi	r20, 0x7C	; 124
    1ace:	50 e4       	ldi	r21, 0x40	; 64
    1ad0:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <__divsf3>
    1ad4:	dc 01       	movw	r26, r24
    1ad6:	cb 01       	movw	r24, r22
    1ad8:	bc 01       	movw	r22, r24
    1ada:	cd 01       	movw	r24, r26
    1adc:	0e 94 0d 1e 	call	0x3c1a	; 0x3c1a <__fixsfsi>
    1ae0:	dc 01       	movw	r26, r24
    1ae2:	cb 01       	movw	r24, r22
    1ae4:	9a 83       	std	Y+2, r25	; 0x02
    1ae6:	89 83       	std	Y+1, r24	; 0x01
	static int c = 0;
	left_shaft_count = 0;
    1ae8:	10 92 a3 03 	sts	0x03A3, r1
    1aec:	10 92 a2 03 	sts	0x03A2, r1
	right_shaft_count = 0;
    1af0:	10 92 a5 03 	sts	0x03A5, r1
    1af4:	10 92 a4 03 	sts	0x03A4, r1
	if(spokeCount < TURNSTEP)
    1af8:	89 81       	ldd	r24, Y+1	; 0x01
    1afa:	9a 81       	ldd	r25, Y+2	; 0x02
    1afc:	83 30       	cpi	r24, 0x03	; 3
    1afe:	91 05       	cpc	r25, r1
    1b00:	4c f4       	brge	.+18     	; 0x1b14 <hard_left_turn+0x70>
	{
		interimLeftCountLimit = interimRightCountLimit = spokeCount;
    1b02:	89 81       	ldd	r24, Y+1	; 0x01
    1b04:	9a 81       	ldd	r25, Y+2	; 0x02
    1b06:	9c 83       	std	Y+4, r25	; 0x04
    1b08:	8b 83       	std	Y+3, r24	; 0x03
    1b0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b0e:	9e 83       	std	Y+6, r25	; 0x06
    1b10:	8d 83       	std	Y+5, r24	; 0x05
    1b12:	08 c0       	rjmp	.+16     	; 0x1b24 <hard_left_turn+0x80>
	}
	else
	{
		interimLeftCountLimit = interimRightCountLimit = TURNSTEP;
    1b14:	83 e0       	ldi	r24, 0x03	; 3
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	9c 83       	std	Y+4, r25	; 0x04
    1b1a:	8b 83       	std	Y+3, r24	; 0x03
    1b1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b20:	9e 83       	std	Y+6, r25	; 0x06
    1b22:	8d 83       	std	Y+5, r24	; 0x05
		if( c % 2 == 0 )
			spokeCount++; // Experimental adjustments
	}*/
	do
	{
		display_shaft_count();
    1b24:	0e 94 23 0c 	call	0x1846	; 0x1846 <display_shaft_count>
    1b28:	02 c0       	rjmp	.+4      	; 0x1b2e <hard_left_turn+0x8a>
			//rightMotorForwardLeftMotorBackward();

		while(left_shaft_count < interimLeftCountLimit && right_shaft_count < interimRightCountLimit)
		{
			rightMotorForwardLeftMotorBackward();
    1b2a:	0e 94 92 0c 	call	0x1924	; 0x1924 <rightMotorForwardLeftMotorBackward>
	do
	{
		display_shaft_count();
			//rightMotorForwardLeftMotorBackward();

		while(left_shaft_count < interimLeftCountLimit && right_shaft_count < interimRightCountLimit)
    1b2e:	20 91 a2 03 	lds	r18, 0x03A2
    1b32:	30 91 a3 03 	lds	r19, 0x03A3
    1b36:	8d 81       	ldd	r24, Y+5	; 0x05
    1b38:	9e 81       	ldd	r25, Y+6	; 0x06
    1b3a:	28 17       	cp	r18, r24
    1b3c:	39 07       	cpc	r19, r25
    1b3e:	64 f4       	brge	.+24     	; 0x1b58 <hard_left_turn+0xb4>
    1b40:	20 91 a4 03 	lds	r18, 0x03A4
    1b44:	30 91 a5 03 	lds	r19, 0x03A5
    1b48:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b4c:	28 17       	cp	r18, r24
    1b4e:	39 07       	cpc	r19, r25
    1b50:	64 f3       	brlt	.-40     	; 0x1b2a <hard_left_turn+0x86>
    1b52:	02 c0       	rjmp	.+4      	; 0x1b58 <hard_left_turn+0xb4>
		{
			rightMotorForwardLeftMotorBackward();
		}
		while(left_shaft_count < interimLeftCountLimit)
		{
			leftMotorBackward();
    1b54:	0e 94 87 0c 	call	0x190e	; 0x190e <leftMotorBackward>

		while(left_shaft_count < interimLeftCountLimit && right_shaft_count < interimRightCountLimit)
		{
			rightMotorForwardLeftMotorBackward();
		}
		while(left_shaft_count < interimLeftCountLimit)
    1b58:	20 91 a2 03 	lds	r18, 0x03A2
    1b5c:	30 91 a3 03 	lds	r19, 0x03A3
    1b60:	8d 81       	ldd	r24, Y+5	; 0x05
    1b62:	9e 81       	ldd	r25, Y+6	; 0x06
    1b64:	28 17       	cp	r18, r24
    1b66:	39 07       	cpc	r19, r25
    1b68:	ac f3       	brlt	.-22     	; 0x1b54 <hard_left_turn+0xb0>
    1b6a:	02 c0       	rjmp	.+4      	; 0x1b70 <hard_left_turn+0xcc>
		{
			leftMotorBackward();
		}
		while(right_shaft_count < interimRightCountLimit)
		{
			rightMotorForward();
    1b6c:	0e 94 66 0c 	call	0x18cc	; 0x18cc <rightMotorForward>
		}
		while(left_shaft_count < interimLeftCountLimit)
		{
			leftMotorBackward();
		}
		while(right_shaft_count < interimRightCountLimit)
    1b70:	20 91 a4 03 	lds	r18, 0x03A4
    1b74:	30 91 a5 03 	lds	r19, 0x03A5
    1b78:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b7c:	28 17       	cp	r18, r24
    1b7e:	39 07       	cpc	r19, r25
    1b80:	ac f3       	brlt	.-22     	; 0x1b6c <hard_left_turn+0xc8>
		{
			rightMotorForward();
		}

		// Increase Interim Values
		if(left_shaft_count < spokeCount)
    1b82:	20 91 a2 03 	lds	r18, 0x03A2
    1b86:	30 91 a3 03 	lds	r19, 0x03A3
    1b8a:	89 81       	ldd	r24, Y+1	; 0x01
    1b8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b8e:	28 17       	cp	r18, r24
    1b90:	39 07       	cpc	r19, r25
    1b92:	bc f4       	brge	.+46     	; 0x1bc2 <hard_left_turn+0x11e>
		{
			if(spokeCount - left_shaft_count < TURNSTEP)
    1b94:	80 91 a2 03 	lds	r24, 0x03A2
    1b98:	90 91 a3 03 	lds	r25, 0x03A3
    1b9c:	29 81       	ldd	r18, Y+1	; 0x01
    1b9e:	3a 81       	ldd	r19, Y+2	; 0x02
    1ba0:	a9 01       	movw	r20, r18
    1ba2:	48 1b       	sub	r20, r24
    1ba4:	59 0b       	sbc	r21, r25
    1ba6:	ca 01       	movw	r24, r20
    1ba8:	83 30       	cpi	r24, 0x03	; 3
    1baa:	91 05       	cpc	r25, r1
    1bac:	2c f4       	brge	.+10     	; 0x1bb8 <hard_left_turn+0x114>
				interimLeftCountLimit = spokeCount;
    1bae:	89 81       	ldd	r24, Y+1	; 0x01
    1bb0:	9a 81       	ldd	r25, Y+2	; 0x02
    1bb2:	9e 83       	std	Y+6, r25	; 0x06
    1bb4:	8d 83       	std	Y+5, r24	; 0x05
    1bb6:	05 c0       	rjmp	.+10     	; 0x1bc2 <hard_left_turn+0x11e>
			else
				interimLeftCountLimit += TURNSTEP;
    1bb8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bba:	9e 81       	ldd	r25, Y+6	; 0x06
    1bbc:	03 96       	adiw	r24, 0x03	; 3
    1bbe:	9e 83       	std	Y+6, r25	; 0x06
    1bc0:	8d 83       	std	Y+5, r24	; 0x05
		}
		if(right_shaft_count < spokeCount)
    1bc2:	20 91 a4 03 	lds	r18, 0x03A4
    1bc6:	30 91 a5 03 	lds	r19, 0x03A5
    1bca:	89 81       	ldd	r24, Y+1	; 0x01
    1bcc:	9a 81       	ldd	r25, Y+2	; 0x02
    1bce:	28 17       	cp	r18, r24
    1bd0:	39 07       	cpc	r19, r25
    1bd2:	bc f4       	brge	.+46     	; 0x1c02 <hard_left_turn+0x15e>
		{
			if(spokeCount - right_shaft_count < TURNSTEP)
    1bd4:	80 91 a4 03 	lds	r24, 0x03A4
    1bd8:	90 91 a5 03 	lds	r25, 0x03A5
    1bdc:	29 81       	ldd	r18, Y+1	; 0x01
    1bde:	3a 81       	ldd	r19, Y+2	; 0x02
    1be0:	a9 01       	movw	r20, r18
    1be2:	48 1b       	sub	r20, r24
    1be4:	59 0b       	sbc	r21, r25
    1be6:	ca 01       	movw	r24, r20
    1be8:	83 30       	cpi	r24, 0x03	; 3
    1bea:	91 05       	cpc	r25, r1
    1bec:	2c f4       	brge	.+10     	; 0x1bf8 <hard_left_turn+0x154>
				interimRightCountLimit = spokeCount;
    1bee:	89 81       	ldd	r24, Y+1	; 0x01
    1bf0:	9a 81       	ldd	r25, Y+2	; 0x02
    1bf2:	9c 83       	std	Y+4, r25	; 0x04
    1bf4:	8b 83       	std	Y+3, r24	; 0x03
    1bf6:	05 c0       	rjmp	.+10     	; 0x1c02 <hard_left_turn+0x15e>
			else
				interimRightCountLimit += TURNSTEP;
    1bf8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfa:	9c 81       	ldd	r25, Y+4	; 0x04
    1bfc:	03 96       	adiw	r24, 0x03	; 3
    1bfe:	9c 83       	std	Y+4, r25	; 0x04
    1c00:	8b 83       	std	Y+3, r24	; 0x03
		}
		stop();
    1c02:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <stop>
	}while(left_shaft_count < spokeCount && right_shaft_count < spokeCount);
    1c06:	20 91 a2 03 	lds	r18, 0x03A2
    1c0a:	30 91 a3 03 	lds	r19, 0x03A3
    1c0e:	89 81       	ldd	r24, Y+1	; 0x01
    1c10:	9a 81       	ldd	r25, Y+2	; 0x02
    1c12:	28 17       	cp	r18, r24
    1c14:	39 07       	cpc	r19, r25
    1c16:	54 f4       	brge	.+20     	; 0x1c2c <hard_left_turn+0x188>
    1c18:	20 91 a4 03 	lds	r18, 0x03A4
    1c1c:	30 91 a5 03 	lds	r19, 0x03A5
    1c20:	89 81       	ldd	r24, Y+1	; 0x01
    1c22:	9a 81       	ldd	r25, Y+2	; 0x02
    1c24:	28 17       	cp	r18, r24
    1c26:	39 07       	cpc	r19, r25
    1c28:	0c f4       	brge	.+2      	; 0x1c2c <hard_left_turn+0x188>
    1c2a:	7c cf       	rjmp	.-264    	; 0x1b24 <hard_left_turn+0x80>

	stop();
    1c2c:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <stop>
	display_shaft_count();
    1c30:	0e 94 23 0c 	call	0x1846	; 0x1846 <display_shaft_count>

}
    1c34:	2a 96       	adiw	r28, 0x0a	; 10
    1c36:	0f b6       	in	r0, 0x3f	; 63
    1c38:	f8 94       	cli
    1c3a:	de bf       	out	0x3e, r29	; 62
    1c3c:	0f be       	out	0x3f, r0	; 63
    1c3e:	cd bf       	out	0x3d, r28	; 61
    1c40:	cf 91       	pop	r28
    1c42:	df 91       	pop	r29
    1c44:	08 95       	ret

00001c46 <hard_right_turn>:
/**
 * Turn right by a certain distance by synchronising the motors TURNSTEP wise
 * @param angle angle should be in degrees
 */
void hard_right_turn (float angle)
{
    1c46:	df 93       	push	r29
    1c48:	cf 93       	push	r28
    1c4a:	cd b7       	in	r28, 0x3d	; 61
    1c4c:	de b7       	in	r29, 0x3e	; 62
    1c4e:	2a 97       	sbiw	r28, 0x0a	; 10
    1c50:	0f b6       	in	r0, 0x3f	; 63
    1c52:	f8 94       	cli
    1c54:	de bf       	out	0x3e, r29	; 62
    1c56:	0f be       	out	0x3f, r0	; 63
    1c58:	cd bf       	out	0x3d, r28	; 61
    1c5a:	6f 83       	std	Y+7, r22	; 0x07
    1c5c:	78 87       	std	Y+8, r23	; 0x08
    1c5e:	89 87       	std	Y+9, r24	; 0x09
    1c60:	9a 87       	std	Y+10, r25	; 0x0a
	int interimLeftCountLimit, interimRightCountLimit;
	int spokeCount = angle / 3.95; // Explain the calculations here
    1c62:	6f 81       	ldd	r22, Y+7	; 0x07
    1c64:	78 85       	ldd	r23, Y+8	; 0x08
    1c66:	89 85       	ldd	r24, Y+9	; 0x09
    1c68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c6a:	2d ec       	ldi	r18, 0xCD	; 205
    1c6c:	3c ec       	ldi	r19, 0xCC	; 204
    1c6e:	4c e7       	ldi	r20, 0x7C	; 124
    1c70:	50 e4       	ldi	r21, 0x40	; 64
    1c72:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <__divsf3>
    1c76:	dc 01       	movw	r26, r24
    1c78:	cb 01       	movw	r24, r22
    1c7a:	bc 01       	movw	r22, r24
    1c7c:	cd 01       	movw	r24, r26
    1c7e:	0e 94 0d 1e 	call	0x3c1a	; 0x3c1a <__fixsfsi>
    1c82:	dc 01       	movw	r26, r24
    1c84:	cb 01       	movw	r24, r22
    1c86:	9a 83       	std	Y+2, r25	; 0x02
    1c88:	89 83       	std	Y+1, r24	; 0x01
	static int c = 0;
	left_shaft_count = 0;
    1c8a:	10 92 a3 03 	sts	0x03A3, r1
    1c8e:	10 92 a2 03 	sts	0x03A2, r1
	right_shaft_count = 0;
    1c92:	10 92 a5 03 	sts	0x03A5, r1
    1c96:	10 92 a4 03 	sts	0x03A4, r1
	if(spokeCount < TURNSTEP)
    1c9a:	89 81       	ldd	r24, Y+1	; 0x01
    1c9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c9e:	83 30       	cpi	r24, 0x03	; 3
    1ca0:	91 05       	cpc	r25, r1
    1ca2:	4c f4       	brge	.+18     	; 0x1cb6 <hard_right_turn+0x70>
	{
		interimLeftCountLimit = interimRightCountLimit = spokeCount;
    1ca4:	89 81       	ldd	r24, Y+1	; 0x01
    1ca6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ca8:	9c 83       	std	Y+4, r25	; 0x04
    1caa:	8b 83       	std	Y+3, r24	; 0x03
    1cac:	8b 81       	ldd	r24, Y+3	; 0x03
    1cae:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb0:	9e 83       	std	Y+6, r25	; 0x06
    1cb2:	8d 83       	std	Y+5, r24	; 0x05
    1cb4:	08 c0       	rjmp	.+16     	; 0x1cc6 <hard_right_turn+0x80>
	}
	else
	{
		interimLeftCountLimit = interimRightCountLimit = TURNSTEP;
    1cb6:	83 e0       	ldi	r24, 0x03	; 3
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	9c 83       	std	Y+4, r25	; 0x04
    1cbc:	8b 83       	std	Y+3, r24	; 0x03
    1cbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc2:	9e 83       	std	Y+6, r25	; 0x06
    1cc4:	8d 83       	std	Y+5, r24	; 0x05
		if( c % 2 == 0 )
			spokeCount++; // Experimental adjustments
	}*/
	do
	{
		display_shaft_count();
    1cc6:	0e 94 23 0c 	call	0x1846	; 0x1846 <display_shaft_count>
    1cca:	02 c0       	rjmp	.+4      	; 0x1cd0 <hard_right_turn+0x8a>

			//leftMotorForwardRightMotorBackward();

		while(left_shaft_count < interimLeftCountLimit && right_shaft_count < interimRightCountLimit)
		{
			leftMotorForwardRightMotorBackward();
    1ccc:	0e 94 9d 0c 	call	0x193a	; 0x193a <leftMotorForwardRightMotorBackward>
	{
		display_shaft_count();

			//leftMotorForwardRightMotorBackward();

		while(left_shaft_count < interimLeftCountLimit && right_shaft_count < interimRightCountLimit)
    1cd0:	20 91 a2 03 	lds	r18, 0x03A2
    1cd4:	30 91 a3 03 	lds	r19, 0x03A3
    1cd8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cda:	9e 81       	ldd	r25, Y+6	; 0x06
    1cdc:	28 17       	cp	r18, r24
    1cde:	39 07       	cpc	r19, r25
    1ce0:	64 f4       	brge	.+24     	; 0x1cfa <hard_right_turn+0xb4>
    1ce2:	20 91 a4 03 	lds	r18, 0x03A4
    1ce6:	30 91 a5 03 	lds	r19, 0x03A5
    1cea:	8b 81       	ldd	r24, Y+3	; 0x03
    1cec:	9c 81       	ldd	r25, Y+4	; 0x04
    1cee:	28 17       	cp	r18, r24
    1cf0:	39 07       	cpc	r19, r25
    1cf2:	64 f3       	brlt	.-40     	; 0x1ccc <hard_right_turn+0x86>
    1cf4:	02 c0       	rjmp	.+4      	; 0x1cfa <hard_right_turn+0xb4>
		{
			leftMotorForwardRightMotorBackward();
		}
		while(left_shaft_count < interimLeftCountLimit)
		{
			leftMotorForward();
    1cf6:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <leftMotorForward>

		while(left_shaft_count < interimLeftCountLimit && right_shaft_count < interimRightCountLimit)
		{
			leftMotorForwardRightMotorBackward();
		}
		while(left_shaft_count < interimLeftCountLimit)
    1cfa:	20 91 a2 03 	lds	r18, 0x03A2
    1cfe:	30 91 a3 03 	lds	r19, 0x03A3
    1d02:	8d 81       	ldd	r24, Y+5	; 0x05
    1d04:	9e 81       	ldd	r25, Y+6	; 0x06
    1d06:	28 17       	cp	r18, r24
    1d08:	39 07       	cpc	r19, r25
    1d0a:	ac f3       	brlt	.-22     	; 0x1cf6 <hard_right_turn+0xb0>
    1d0c:	02 c0       	rjmp	.+4      	; 0x1d12 <hard_right_turn+0xcc>
		{
			leftMotorForward();
		}
		while(right_shaft_count < interimRightCountLimit)
		{
			rightMotorBackward();
    1d0e:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <rightMotorBackward>
		}
		while(left_shaft_count < interimLeftCountLimit)
		{
			leftMotorForward();
		}
		while(right_shaft_count < interimRightCountLimit)
    1d12:	20 91 a4 03 	lds	r18, 0x03A4
    1d16:	30 91 a5 03 	lds	r19, 0x03A5
    1d1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d1e:	28 17       	cp	r18, r24
    1d20:	39 07       	cpc	r19, r25
    1d22:	ac f3       	brlt	.-22     	; 0x1d0e <hard_right_turn+0xc8>
		{
			rightMotorBackward();
		}

		// Increase Interim Values
		if(left_shaft_count < spokeCount)
    1d24:	20 91 a2 03 	lds	r18, 0x03A2
    1d28:	30 91 a3 03 	lds	r19, 0x03A3
    1d2c:	89 81       	ldd	r24, Y+1	; 0x01
    1d2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d30:	28 17       	cp	r18, r24
    1d32:	39 07       	cpc	r19, r25
    1d34:	bc f4       	brge	.+46     	; 0x1d64 <hard_right_turn+0x11e>
		{
			if(spokeCount - left_shaft_count < TURNSTEP)
    1d36:	80 91 a2 03 	lds	r24, 0x03A2
    1d3a:	90 91 a3 03 	lds	r25, 0x03A3
    1d3e:	29 81       	ldd	r18, Y+1	; 0x01
    1d40:	3a 81       	ldd	r19, Y+2	; 0x02
    1d42:	a9 01       	movw	r20, r18
    1d44:	48 1b       	sub	r20, r24
    1d46:	59 0b       	sbc	r21, r25
    1d48:	ca 01       	movw	r24, r20
    1d4a:	83 30       	cpi	r24, 0x03	; 3
    1d4c:	91 05       	cpc	r25, r1
    1d4e:	2c f4       	brge	.+10     	; 0x1d5a <hard_right_turn+0x114>
				interimLeftCountLimit = spokeCount;
    1d50:	89 81       	ldd	r24, Y+1	; 0x01
    1d52:	9a 81       	ldd	r25, Y+2	; 0x02
    1d54:	9e 83       	std	Y+6, r25	; 0x06
    1d56:	8d 83       	std	Y+5, r24	; 0x05
    1d58:	05 c0       	rjmp	.+10     	; 0x1d64 <hard_right_turn+0x11e>
			else
				interimLeftCountLimit += TURNSTEP;
    1d5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d5c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d5e:	03 96       	adiw	r24, 0x03	; 3
    1d60:	9e 83       	std	Y+6, r25	; 0x06
    1d62:	8d 83       	std	Y+5, r24	; 0x05
		}
		if(right_shaft_count < spokeCount)
    1d64:	20 91 a4 03 	lds	r18, 0x03A4
    1d68:	30 91 a5 03 	lds	r19, 0x03A5
    1d6c:	89 81       	ldd	r24, Y+1	; 0x01
    1d6e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d70:	28 17       	cp	r18, r24
    1d72:	39 07       	cpc	r19, r25
    1d74:	bc f4       	brge	.+46     	; 0x1da4 <hard_right_turn+0x15e>
		{
			if(spokeCount - right_shaft_count < TURNSTEP)
    1d76:	80 91 a4 03 	lds	r24, 0x03A4
    1d7a:	90 91 a5 03 	lds	r25, 0x03A5
    1d7e:	29 81       	ldd	r18, Y+1	; 0x01
    1d80:	3a 81       	ldd	r19, Y+2	; 0x02
    1d82:	a9 01       	movw	r20, r18
    1d84:	48 1b       	sub	r20, r24
    1d86:	59 0b       	sbc	r21, r25
    1d88:	ca 01       	movw	r24, r20
    1d8a:	83 30       	cpi	r24, 0x03	; 3
    1d8c:	91 05       	cpc	r25, r1
    1d8e:	2c f4       	brge	.+10     	; 0x1d9a <hard_right_turn+0x154>
				interimRightCountLimit = spokeCount;
    1d90:	89 81       	ldd	r24, Y+1	; 0x01
    1d92:	9a 81       	ldd	r25, Y+2	; 0x02
    1d94:	9c 83       	std	Y+4, r25	; 0x04
    1d96:	8b 83       	std	Y+3, r24	; 0x03
    1d98:	05 c0       	rjmp	.+10     	; 0x1da4 <hard_right_turn+0x15e>
			else
				interimRightCountLimit += TURNSTEP;
    1d9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d9e:	03 96       	adiw	r24, 0x03	; 3
    1da0:	9c 83       	std	Y+4, r25	; 0x04
    1da2:	8b 83       	std	Y+3, r24	; 0x03
		}
		stop();
    1da4:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <stop>
	}while(left_shaft_count < spokeCount && right_shaft_count < spokeCount);
    1da8:	20 91 a2 03 	lds	r18, 0x03A2
    1dac:	30 91 a3 03 	lds	r19, 0x03A3
    1db0:	89 81       	ldd	r24, Y+1	; 0x01
    1db2:	9a 81       	ldd	r25, Y+2	; 0x02
    1db4:	28 17       	cp	r18, r24
    1db6:	39 07       	cpc	r19, r25
    1db8:	54 f4       	brge	.+20     	; 0x1dce <hard_right_turn+0x188>
    1dba:	20 91 a4 03 	lds	r18, 0x03A4
    1dbe:	30 91 a5 03 	lds	r19, 0x03A5
    1dc2:	89 81       	ldd	r24, Y+1	; 0x01
    1dc4:	9a 81       	ldd	r25, Y+2	; 0x02
    1dc6:	28 17       	cp	r18, r24
    1dc8:	39 07       	cpc	r19, r25
    1dca:	0c f4       	brge	.+2      	; 0x1dce <hard_right_turn+0x188>
    1dcc:	7c cf       	rjmp	.-264    	; 0x1cc6 <hard_right_turn+0x80>

	stop();
    1dce:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <stop>
	display_shaft_count();
    1dd2:	0e 94 23 0c 	call	0x1846	; 0x1846 <display_shaft_count>
}
    1dd6:	2a 96       	adiw	r28, 0x0a	; 10
    1dd8:	0f b6       	in	r0, 0x3f	; 63
    1dda:	f8 94       	cli
    1ddc:	de bf       	out	0x3e, r29	; 62
    1dde:	0f be       	out	0x3f, r0	; 63
    1de0:	cd bf       	out	0x3d, r28	; 61
    1de2:	cf 91       	pop	r28
    1de4:	df 91       	pop	r29
    1de6:	08 95       	ret

00001de8 <stop>:

/**
 * Stop the motors
 */
void stop ()
{
    1de8:	df 93       	push	r29
    1dea:	cf 93       	push	r28
    1dec:	cd b7       	in	r28, 0x3d	; 61
    1dee:	de b7       	in	r29, 0x3e	; 62
	PORTA = 0x00;
    1df0:	e2 e2       	ldi	r30, 0x22	; 34
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	10 82       	st	Z, r1
}
    1df6:	cf 91       	pop	r28
    1df8:	df 91       	pop	r29
    1dfa:	08 95       	ret

00001dfc <penUp>:

/**
 * Lift the pen
 */
void penUp()
{
    1dfc:	df 93       	push	r29
    1dfe:	cf 93       	push	r28
    1e00:	cd b7       	in	r28, 0x3d	; 61
    1e02:	de b7       	in	r29, 0x3e	; 62
    1e04:	2e 97       	sbiw	r28, 0x0e	; 14
    1e06:	0f b6       	in	r0, 0x3f	; 63
    1e08:	f8 94       	cli
    1e0a:	de bf       	out	0x3e, r29	; 62
    1e0c:	0f be       	out	0x3f, r0	; 63
    1e0e:	cd bf       	out	0x3d, r28	; 61
	servo_2(110);
    1e10:	8e e6       	ldi	r24, 0x6E	; 110
    1e12:	0e 94 b7 0b 	call	0x176e	; 0x176e <servo_2>
    1e16:	80 e0       	ldi	r24, 0x00	; 0
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	a8 ec       	ldi	r26, 0xC8	; 200
    1e1c:	b2 e4       	ldi	r27, 0x42	; 66
    1e1e:	8b 87       	std	Y+11, r24	; 0x0b
    1e20:	9c 87       	std	Y+12, r25	; 0x0c
    1e22:	ad 87       	std	Y+13, r26	; 0x0d
    1e24:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e26:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e28:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e2e:	2d ec       	ldi	r18, 0xCD	; 205
    1e30:	3c ec       	ldi	r19, 0xCC	; 204
    1e32:	4c e2       	ldi	r20, 0x2C	; 44
    1e34:	55 e4       	ldi	r21, 0x45	; 69
    1e36:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__mulsf3>
    1e3a:	dc 01       	movw	r26, r24
    1e3c:	cb 01       	movw	r24, r22
    1e3e:	8f 83       	std	Y+7, r24	; 0x07
    1e40:	98 87       	std	Y+8, r25	; 0x08
    1e42:	a9 87       	std	Y+9, r26	; 0x09
    1e44:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e46:	6f 81       	ldd	r22, Y+7	; 0x07
    1e48:	78 85       	ldd	r23, Y+8	; 0x08
    1e4a:	89 85       	ldd	r24, Y+9	; 0x09
    1e4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e4e:	20 e0       	ldi	r18, 0x00	; 0
    1e50:	30 e0       	ldi	r19, 0x00	; 0
    1e52:	40 e8       	ldi	r20, 0x80	; 128
    1e54:	5f e3       	ldi	r21, 0x3F	; 63
    1e56:	0e 94 7f 1d 	call	0x3afe	; 0x3afe <__ltsf2>
    1e5a:	88 23       	and	r24, r24
    1e5c:	2c f4       	brge	.+10     	; 0x1e68 <penUp+0x6c>
		__ticks = 1;
    1e5e:	81 e0       	ldi	r24, 0x01	; 1
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	9e 83       	std	Y+6, r25	; 0x06
    1e64:	8d 83       	std	Y+5, r24	; 0x05
    1e66:	3f c0       	rjmp	.+126    	; 0x1ee6 <penUp+0xea>
	else if (__tmp > 65535)
    1e68:	6f 81       	ldd	r22, Y+7	; 0x07
    1e6a:	78 85       	ldd	r23, Y+8	; 0x08
    1e6c:	89 85       	ldd	r24, Y+9	; 0x09
    1e6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e70:	20 e0       	ldi	r18, 0x00	; 0
    1e72:	3f ef       	ldi	r19, 0xFF	; 255
    1e74:	4f e7       	ldi	r20, 0x7F	; 127
    1e76:	57 e4       	ldi	r21, 0x47	; 71
    1e78:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <__gtsf2>
    1e7c:	18 16       	cp	r1, r24
    1e7e:	4c f5       	brge	.+82     	; 0x1ed2 <penUp+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e80:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e82:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e84:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e86:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e88:	20 e0       	ldi	r18, 0x00	; 0
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	40 e2       	ldi	r20, 0x20	; 32
    1e8e:	51 e4       	ldi	r21, 0x41	; 65
    1e90:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__mulsf3>
    1e94:	dc 01       	movw	r26, r24
    1e96:	cb 01       	movw	r24, r22
    1e98:	bc 01       	movw	r22, r24
    1e9a:	cd 01       	movw	r24, r26
    1e9c:	0e 94 a3 19 	call	0x3346	; 0x3346 <__fixunssfsi>
    1ea0:	dc 01       	movw	r26, r24
    1ea2:	cb 01       	movw	r24, r22
    1ea4:	9e 83       	std	Y+6, r25	; 0x06
    1ea6:	8d 83       	std	Y+5, r24	; 0x05
    1ea8:	0f c0       	rjmp	.+30     	; 0x1ec8 <penUp+0xcc>
    1eaa:	84 e1       	ldi	r24, 0x14	; 20
    1eac:	91 e0       	ldi	r25, 0x01	; 1
    1eae:	9c 83       	std	Y+4, r25	; 0x04
    1eb0:	8b 83       	std	Y+3, r24	; 0x03
    1eb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb4:	9c 81       	ldd	r25, Y+4	; 0x04
    1eb6:	01 97       	sbiw	r24, 0x01	; 1
    1eb8:	f1 f7       	brne	.-4      	; 0x1eb6 <penUp+0xba>
    1eba:	9c 83       	std	Y+4, r25	; 0x04
    1ebc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ebe:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec2:	01 97       	sbiw	r24, 0x01	; 1
    1ec4:	9e 83       	std	Y+6, r25	; 0x06
    1ec6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ec8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eca:	9e 81       	ldd	r25, Y+6	; 0x06
    1ecc:	00 97       	sbiw	r24, 0x00	; 0
    1ece:	69 f7       	brne	.-38     	; 0x1eaa <penUp+0xae>
    1ed0:	14 c0       	rjmp	.+40     	; 0x1efa <penUp+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ed2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ed4:	78 85       	ldd	r23, Y+8	; 0x08
    1ed6:	89 85       	ldd	r24, Y+9	; 0x09
    1ed8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eda:	0e 94 a3 19 	call	0x3346	; 0x3346 <__fixunssfsi>
    1ede:	dc 01       	movw	r26, r24
    1ee0:	cb 01       	movw	r24, r22
    1ee2:	9e 83       	std	Y+6, r25	; 0x06
    1ee4:	8d 83       	std	Y+5, r24	; 0x05
    1ee6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee8:	9e 81       	ldd	r25, Y+6	; 0x06
    1eea:	9a 83       	std	Y+2, r25	; 0x02
    1eec:	89 83       	std	Y+1, r24	; 0x01
    1eee:	89 81       	ldd	r24, Y+1	; 0x01
    1ef0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef2:	01 97       	sbiw	r24, 0x01	; 1
    1ef4:	f1 f7       	brne	.-4      	; 0x1ef2 <penUp+0xf6>
    1ef6:	9a 83       	std	Y+2, r25	; 0x02
    1ef8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
}
    1efa:	2e 96       	adiw	r28, 0x0e	; 14
    1efc:	0f b6       	in	r0, 0x3f	; 63
    1efe:	f8 94       	cli
    1f00:	de bf       	out	0x3e, r29	; 62
    1f02:	0f be       	out	0x3f, r0	; 63
    1f04:	cd bf       	out	0x3d, r28	; 61
    1f06:	cf 91       	pop	r28
    1f08:	df 91       	pop	r29
    1f0a:	08 95       	ret

00001f0c <penDown>:

/**
 * Put down the pen
 */
void penDown()
{
    1f0c:	df 93       	push	r29
    1f0e:	cf 93       	push	r28
    1f10:	cd b7       	in	r28, 0x3d	; 61
    1f12:	de b7       	in	r29, 0x3e	; 62
    1f14:	2e 97       	sbiw	r28, 0x0e	; 14
    1f16:	0f b6       	in	r0, 0x3f	; 63
    1f18:	f8 94       	cli
    1f1a:	de bf       	out	0x3e, r29	; 62
    1f1c:	0f be       	out	0x3f, r0	; 63
    1f1e:	cd bf       	out	0x3d, r28	; 61
	servo_2(135);
    1f20:	87 e8       	ldi	r24, 0x87	; 135
    1f22:	0e 94 b7 0b 	call	0x176e	; 0x176e <servo_2>
    1f26:	80 e0       	ldi	r24, 0x00	; 0
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	a8 ec       	ldi	r26, 0xC8	; 200
    1f2c:	b2 e4       	ldi	r27, 0x42	; 66
    1f2e:	8b 87       	std	Y+11, r24	; 0x0b
    1f30:	9c 87       	std	Y+12, r25	; 0x0c
    1f32:	ad 87       	std	Y+13, r26	; 0x0d
    1f34:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f36:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f38:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f3e:	2d ec       	ldi	r18, 0xCD	; 205
    1f40:	3c ec       	ldi	r19, 0xCC	; 204
    1f42:	4c e2       	ldi	r20, 0x2C	; 44
    1f44:	55 e4       	ldi	r21, 0x45	; 69
    1f46:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__mulsf3>
    1f4a:	dc 01       	movw	r26, r24
    1f4c:	cb 01       	movw	r24, r22
    1f4e:	8f 83       	std	Y+7, r24	; 0x07
    1f50:	98 87       	std	Y+8, r25	; 0x08
    1f52:	a9 87       	std	Y+9, r26	; 0x09
    1f54:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f56:	6f 81       	ldd	r22, Y+7	; 0x07
    1f58:	78 85       	ldd	r23, Y+8	; 0x08
    1f5a:	89 85       	ldd	r24, Y+9	; 0x09
    1f5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f5e:	20 e0       	ldi	r18, 0x00	; 0
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	40 e8       	ldi	r20, 0x80	; 128
    1f64:	5f e3       	ldi	r21, 0x3F	; 63
    1f66:	0e 94 7f 1d 	call	0x3afe	; 0x3afe <__ltsf2>
    1f6a:	88 23       	and	r24, r24
    1f6c:	2c f4       	brge	.+10     	; 0x1f78 <penDown+0x6c>
		__ticks = 1;
    1f6e:	81 e0       	ldi	r24, 0x01	; 1
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	9e 83       	std	Y+6, r25	; 0x06
    1f74:	8d 83       	std	Y+5, r24	; 0x05
    1f76:	3f c0       	rjmp	.+126    	; 0x1ff6 <penDown+0xea>
	else if (__tmp > 65535)
    1f78:	6f 81       	ldd	r22, Y+7	; 0x07
    1f7a:	78 85       	ldd	r23, Y+8	; 0x08
    1f7c:	89 85       	ldd	r24, Y+9	; 0x09
    1f7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f80:	20 e0       	ldi	r18, 0x00	; 0
    1f82:	3f ef       	ldi	r19, 0xFF	; 255
    1f84:	4f e7       	ldi	r20, 0x7F	; 127
    1f86:	57 e4       	ldi	r21, 0x47	; 71
    1f88:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <__gtsf2>
    1f8c:	18 16       	cp	r1, r24
    1f8e:	4c f5       	brge	.+82     	; 0x1fe2 <penDown+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f90:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f92:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f94:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f96:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f98:	20 e0       	ldi	r18, 0x00	; 0
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
    1f9c:	40 e2       	ldi	r20, 0x20	; 32
    1f9e:	51 e4       	ldi	r21, 0x41	; 65
    1fa0:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__mulsf3>
    1fa4:	dc 01       	movw	r26, r24
    1fa6:	cb 01       	movw	r24, r22
    1fa8:	bc 01       	movw	r22, r24
    1faa:	cd 01       	movw	r24, r26
    1fac:	0e 94 a3 19 	call	0x3346	; 0x3346 <__fixunssfsi>
    1fb0:	dc 01       	movw	r26, r24
    1fb2:	cb 01       	movw	r24, r22
    1fb4:	9e 83       	std	Y+6, r25	; 0x06
    1fb6:	8d 83       	std	Y+5, r24	; 0x05
    1fb8:	0f c0       	rjmp	.+30     	; 0x1fd8 <penDown+0xcc>
    1fba:	84 e1       	ldi	r24, 0x14	; 20
    1fbc:	91 e0       	ldi	r25, 0x01	; 1
    1fbe:	9c 83       	std	Y+4, r25	; 0x04
    1fc0:	8b 83       	std	Y+3, r24	; 0x03
    1fc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc4:	9c 81       	ldd	r25, Y+4	; 0x04
    1fc6:	01 97       	sbiw	r24, 0x01	; 1
    1fc8:	f1 f7       	brne	.-4      	; 0x1fc6 <penDown+0xba>
    1fca:	9c 83       	std	Y+4, r25	; 0x04
    1fcc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fce:	8d 81       	ldd	r24, Y+5	; 0x05
    1fd0:	9e 81       	ldd	r25, Y+6	; 0x06
    1fd2:	01 97       	sbiw	r24, 0x01	; 1
    1fd4:	9e 83       	std	Y+6, r25	; 0x06
    1fd6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fd8:	8d 81       	ldd	r24, Y+5	; 0x05
    1fda:	9e 81       	ldd	r25, Y+6	; 0x06
    1fdc:	00 97       	sbiw	r24, 0x00	; 0
    1fde:	69 f7       	brne	.-38     	; 0x1fba <penDown+0xae>
    1fe0:	14 c0       	rjmp	.+40     	; 0x200a <penDown+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fe2:	6f 81       	ldd	r22, Y+7	; 0x07
    1fe4:	78 85       	ldd	r23, Y+8	; 0x08
    1fe6:	89 85       	ldd	r24, Y+9	; 0x09
    1fe8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fea:	0e 94 a3 19 	call	0x3346	; 0x3346 <__fixunssfsi>
    1fee:	dc 01       	movw	r26, r24
    1ff0:	cb 01       	movw	r24, r22
    1ff2:	9e 83       	std	Y+6, r25	; 0x06
    1ff4:	8d 83       	std	Y+5, r24	; 0x05
    1ff6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ff8:	9e 81       	ldd	r25, Y+6	; 0x06
    1ffa:	9a 83       	std	Y+2, r25	; 0x02
    1ffc:	89 83       	std	Y+1, r24	; 0x01
    1ffe:	89 81       	ldd	r24, Y+1	; 0x01
    2000:	9a 81       	ldd	r25, Y+2	; 0x02
    2002:	01 97       	sbiw	r24, 0x01	; 1
    2004:	f1 f7       	brne	.-4      	; 0x2002 <penDown+0xf6>
    2006:	9a 83       	std	Y+2, r25	; 0x02
    2008:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
}
    200a:	2e 96       	adiw	r28, 0x0e	; 14
    200c:	0f b6       	in	r0, 0x3f	; 63
    200e:	f8 94       	cli
    2010:	de bf       	out	0x3e, r29	; 62
    2012:	0f be       	out	0x3f, r0	; 63
    2014:	cd bf       	out	0x3d, r28	; 61
    2016:	cf 91       	pop	r28
    2018:	df 91       	pop	r29
    201a:	08 95       	ret

0000201c <turn_left>:
/**
 * Send the turning sequence moves to the robot like penup, forward, turn, backward and pendown
 * @param angle in degrees
 */
void turn_left(int angle)
{
    201c:	df 93       	push	r29
    201e:	cf 93       	push	r28
    2020:	cd b7       	in	r28, 0x3d	; 61
    2022:	de b7       	in	r29, 0x3e	; 62
    2024:	ea 97       	sbiw	r28, 0x3a	; 58
    2026:	0f b6       	in	r0, 0x3f	; 63
    2028:	f8 94       	cli
    202a:	de bf       	out	0x3e, r29	; 62
    202c:	0f be       	out	0x3f, r0	; 63
    202e:	cd bf       	out	0x3d, r28	; 61
    2030:	9a af       	std	Y+58, r25	; 0x3a
    2032:	89 af       	std	Y+57, r24	; 0x39
	penUp();
    2034:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <penUp>
    2038:	80 e0       	ldi	r24, 0x00	; 0
    203a:	90 e8       	ldi	r25, 0x80	; 128
    203c:	ab eb       	ldi	r26, 0xBB	; 187
    203e:	b4 e4       	ldi	r27, 0x44	; 68
    2040:	8d ab       	std	Y+53, r24	; 0x35
    2042:	9e ab       	std	Y+54, r25	; 0x36
    2044:	af ab       	std	Y+55, r26	; 0x37
    2046:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2048:	6d a9       	ldd	r22, Y+53	; 0x35
    204a:	7e a9       	ldd	r23, Y+54	; 0x36
    204c:	8f a9       	ldd	r24, Y+55	; 0x37
    204e:	98 ad       	ldd	r25, Y+56	; 0x38
    2050:	2d ec       	ldi	r18, 0xCD	; 205
    2052:	3c ec       	ldi	r19, 0xCC	; 204
    2054:	4c e2       	ldi	r20, 0x2C	; 44
    2056:	55 e4       	ldi	r21, 0x45	; 69
    2058:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__mulsf3>
    205c:	dc 01       	movw	r26, r24
    205e:	cb 01       	movw	r24, r22
    2060:	89 ab       	std	Y+49, r24	; 0x31
    2062:	9a ab       	std	Y+50, r25	; 0x32
    2064:	ab ab       	std	Y+51, r26	; 0x33
    2066:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2068:	69 a9       	ldd	r22, Y+49	; 0x31
    206a:	7a a9       	ldd	r23, Y+50	; 0x32
    206c:	8b a9       	ldd	r24, Y+51	; 0x33
    206e:	9c a9       	ldd	r25, Y+52	; 0x34
    2070:	20 e0       	ldi	r18, 0x00	; 0
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	40 e8       	ldi	r20, 0x80	; 128
    2076:	5f e3       	ldi	r21, 0x3F	; 63
    2078:	0e 94 7f 1d 	call	0x3afe	; 0x3afe <__ltsf2>
    207c:	88 23       	and	r24, r24
    207e:	2c f4       	brge	.+10     	; 0x208a <turn_left+0x6e>
		__ticks = 1;
    2080:	81 e0       	ldi	r24, 0x01	; 1
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	98 ab       	std	Y+48, r25	; 0x30
    2086:	8f a7       	std	Y+47, r24	; 0x2f
    2088:	3f c0       	rjmp	.+126    	; 0x2108 <turn_left+0xec>
	else if (__tmp > 65535)
    208a:	69 a9       	ldd	r22, Y+49	; 0x31
    208c:	7a a9       	ldd	r23, Y+50	; 0x32
    208e:	8b a9       	ldd	r24, Y+51	; 0x33
    2090:	9c a9       	ldd	r25, Y+52	; 0x34
    2092:	20 e0       	ldi	r18, 0x00	; 0
    2094:	3f ef       	ldi	r19, 0xFF	; 255
    2096:	4f e7       	ldi	r20, 0x7F	; 127
    2098:	57 e4       	ldi	r21, 0x47	; 71
    209a:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <__gtsf2>
    209e:	18 16       	cp	r1, r24
    20a0:	4c f5       	brge	.+82     	; 0x20f4 <turn_left+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20a2:	6d a9       	ldd	r22, Y+53	; 0x35
    20a4:	7e a9       	ldd	r23, Y+54	; 0x36
    20a6:	8f a9       	ldd	r24, Y+55	; 0x37
    20a8:	98 ad       	ldd	r25, Y+56	; 0x38
    20aa:	20 e0       	ldi	r18, 0x00	; 0
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	40 e2       	ldi	r20, 0x20	; 32
    20b0:	51 e4       	ldi	r21, 0x41	; 65
    20b2:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__mulsf3>
    20b6:	dc 01       	movw	r26, r24
    20b8:	cb 01       	movw	r24, r22
    20ba:	bc 01       	movw	r22, r24
    20bc:	cd 01       	movw	r24, r26
    20be:	0e 94 a3 19 	call	0x3346	; 0x3346 <__fixunssfsi>
    20c2:	dc 01       	movw	r26, r24
    20c4:	cb 01       	movw	r24, r22
    20c6:	98 ab       	std	Y+48, r25	; 0x30
    20c8:	8f a7       	std	Y+47, r24	; 0x2f
    20ca:	0f c0       	rjmp	.+30     	; 0x20ea <turn_left+0xce>
    20cc:	84 e1       	ldi	r24, 0x14	; 20
    20ce:	91 e0       	ldi	r25, 0x01	; 1
    20d0:	9e a7       	std	Y+46, r25	; 0x2e
    20d2:	8d a7       	std	Y+45, r24	; 0x2d
    20d4:	8d a5       	ldd	r24, Y+45	; 0x2d
    20d6:	9e a5       	ldd	r25, Y+46	; 0x2e
    20d8:	01 97       	sbiw	r24, 0x01	; 1
    20da:	f1 f7       	brne	.-4      	; 0x20d8 <turn_left+0xbc>
    20dc:	9e a7       	std	Y+46, r25	; 0x2e
    20de:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    20e2:	98 a9       	ldd	r25, Y+48	; 0x30
    20e4:	01 97       	sbiw	r24, 0x01	; 1
    20e6:	98 ab       	std	Y+48, r25	; 0x30
    20e8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    20ec:	98 a9       	ldd	r25, Y+48	; 0x30
    20ee:	00 97       	sbiw	r24, 0x00	; 0
    20f0:	69 f7       	brne	.-38     	; 0x20cc <turn_left+0xb0>
    20f2:	14 c0       	rjmp	.+40     	; 0x211c <turn_left+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20f4:	69 a9       	ldd	r22, Y+49	; 0x31
    20f6:	7a a9       	ldd	r23, Y+50	; 0x32
    20f8:	8b a9       	ldd	r24, Y+51	; 0x33
    20fa:	9c a9       	ldd	r25, Y+52	; 0x34
    20fc:	0e 94 a3 19 	call	0x3346	; 0x3346 <__fixunssfsi>
    2100:	dc 01       	movw	r26, r24
    2102:	cb 01       	movw	r24, r22
    2104:	98 ab       	std	Y+48, r25	; 0x30
    2106:	8f a7       	std	Y+47, r24	; 0x2f
    2108:	8f a5       	ldd	r24, Y+47	; 0x2f
    210a:	98 a9       	ldd	r25, Y+48	; 0x30
    210c:	9c a7       	std	Y+44, r25	; 0x2c
    210e:	8b a7       	std	Y+43, r24	; 0x2b
    2110:	8b a5       	ldd	r24, Y+43	; 0x2b
    2112:	9c a5       	ldd	r25, Y+44	; 0x2c
    2114:	01 97       	sbiw	r24, 0x01	; 1
    2116:	f1 f7       	brne	.-4      	; 0x2114 <turn_left+0xf8>
    2118:	9c a7       	std	Y+44, r25	; 0x2c
    211a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(DELAY1);
	forward(2.0);
    211c:	60 e0       	ldi	r22, 0x00	; 0
    211e:	70 e0       	ldi	r23, 0x00	; 0
    2120:	80 e0       	ldi	r24, 0x00	; 0
    2122:	90 e4       	ldi	r25, 0x40	; 64
    2124:	0e 94 a8 0c 	call	0x1950	; 0x1950 <forward>
    2128:	80 e0       	ldi	r24, 0x00	; 0
    212a:	90 e8       	ldi	r25, 0x80	; 128
    212c:	ab eb       	ldi	r26, 0xBB	; 187
    212e:	b4 e4       	ldi	r27, 0x44	; 68
    2130:	8f a3       	std	Y+39, r24	; 0x27
    2132:	98 a7       	std	Y+40, r25	; 0x28
    2134:	a9 a7       	std	Y+41, r26	; 0x29
    2136:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2138:	6f a1       	ldd	r22, Y+39	; 0x27
    213a:	78 a5       	ldd	r23, Y+40	; 0x28
    213c:	89 a5       	ldd	r24, Y+41	; 0x29
    213e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2140:	2d ec       	ldi	r18, 0xCD	; 205
    2142:	3c ec       	ldi	r19, 0xCC	; 204
    2144:	4c e2       	ldi	r20, 0x2C	; 44
    2146:	55 e4       	ldi	r21, 0x45	; 69
    2148:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__mulsf3>
    214c:	dc 01       	movw	r26, r24
    214e:	cb 01       	movw	r24, r22
    2150:	8b a3       	std	Y+35, r24	; 0x23
    2152:	9c a3       	std	Y+36, r25	; 0x24
    2154:	ad a3       	std	Y+37, r26	; 0x25
    2156:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2158:	6b a1       	ldd	r22, Y+35	; 0x23
    215a:	7c a1       	ldd	r23, Y+36	; 0x24
    215c:	8d a1       	ldd	r24, Y+37	; 0x25
    215e:	9e a1       	ldd	r25, Y+38	; 0x26
    2160:	20 e0       	ldi	r18, 0x00	; 0
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	40 e8       	ldi	r20, 0x80	; 128
    2166:	5f e3       	ldi	r21, 0x3F	; 63
    2168:	0e 94 7f 1d 	call	0x3afe	; 0x3afe <__ltsf2>
    216c:	88 23       	and	r24, r24
    216e:	2c f4       	brge	.+10     	; 0x217a <turn_left+0x15e>
		__ticks = 1;
    2170:	81 e0       	ldi	r24, 0x01	; 1
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	9a a3       	std	Y+34, r25	; 0x22
    2176:	89 a3       	std	Y+33, r24	; 0x21
    2178:	3f c0       	rjmp	.+126    	; 0x21f8 <turn_left+0x1dc>
	else if (__tmp > 65535)
    217a:	6b a1       	ldd	r22, Y+35	; 0x23
    217c:	7c a1       	ldd	r23, Y+36	; 0x24
    217e:	8d a1       	ldd	r24, Y+37	; 0x25
    2180:	9e a1       	ldd	r25, Y+38	; 0x26
    2182:	20 e0       	ldi	r18, 0x00	; 0
    2184:	3f ef       	ldi	r19, 0xFF	; 255
    2186:	4f e7       	ldi	r20, 0x7F	; 127
    2188:	57 e4       	ldi	r21, 0x47	; 71
    218a:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <__gtsf2>
    218e:	18 16       	cp	r1, r24
    2190:	4c f5       	brge	.+82     	; 0x21e4 <turn_left+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2192:	6f a1       	ldd	r22, Y+39	; 0x27
    2194:	78 a5       	ldd	r23, Y+40	; 0x28
    2196:	89 a5       	ldd	r24, Y+41	; 0x29
    2198:	9a a5       	ldd	r25, Y+42	; 0x2a
    219a:	20 e0       	ldi	r18, 0x00	; 0
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	40 e2       	ldi	r20, 0x20	; 32
    21a0:	51 e4       	ldi	r21, 0x41	; 65
    21a2:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__mulsf3>
    21a6:	dc 01       	movw	r26, r24
    21a8:	cb 01       	movw	r24, r22
    21aa:	bc 01       	movw	r22, r24
    21ac:	cd 01       	movw	r24, r26
    21ae:	0e 94 a3 19 	call	0x3346	; 0x3346 <__fixunssfsi>
    21b2:	dc 01       	movw	r26, r24
    21b4:	cb 01       	movw	r24, r22
    21b6:	9a a3       	std	Y+34, r25	; 0x22
    21b8:	89 a3       	std	Y+33, r24	; 0x21
    21ba:	0f c0       	rjmp	.+30     	; 0x21da <turn_left+0x1be>
    21bc:	84 e1       	ldi	r24, 0x14	; 20
    21be:	91 e0       	ldi	r25, 0x01	; 1
    21c0:	98 a3       	std	Y+32, r25	; 0x20
    21c2:	8f 8f       	std	Y+31, r24	; 0x1f
    21c4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21c6:	98 a1       	ldd	r25, Y+32	; 0x20
    21c8:	01 97       	sbiw	r24, 0x01	; 1
    21ca:	f1 f7       	brne	.-4      	; 0x21c8 <turn_left+0x1ac>
    21cc:	98 a3       	std	Y+32, r25	; 0x20
    21ce:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21d0:	89 a1       	ldd	r24, Y+33	; 0x21
    21d2:	9a a1       	ldd	r25, Y+34	; 0x22
    21d4:	01 97       	sbiw	r24, 0x01	; 1
    21d6:	9a a3       	std	Y+34, r25	; 0x22
    21d8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21da:	89 a1       	ldd	r24, Y+33	; 0x21
    21dc:	9a a1       	ldd	r25, Y+34	; 0x22
    21de:	00 97       	sbiw	r24, 0x00	; 0
    21e0:	69 f7       	brne	.-38     	; 0x21bc <turn_left+0x1a0>
    21e2:	14 c0       	rjmp	.+40     	; 0x220c <__stack+0xd>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21e4:	6b a1       	ldd	r22, Y+35	; 0x23
    21e6:	7c a1       	ldd	r23, Y+36	; 0x24
    21e8:	8d a1       	ldd	r24, Y+37	; 0x25
    21ea:	9e a1       	ldd	r25, Y+38	; 0x26
    21ec:	0e 94 a3 19 	call	0x3346	; 0x3346 <__fixunssfsi>
    21f0:	dc 01       	movw	r26, r24
    21f2:	cb 01       	movw	r24, r22
    21f4:	9a a3       	std	Y+34, r25	; 0x22
    21f6:	89 a3       	std	Y+33, r24	; 0x21
    21f8:	89 a1       	ldd	r24, Y+33	; 0x21
    21fa:	9a a1       	ldd	r25, Y+34	; 0x22
    21fc:	9e 8f       	std	Y+30, r25	; 0x1e
    21fe:	8d 8f       	std	Y+29, r24	; 0x1d
    2200:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2202:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2204:	01 97       	sbiw	r24, 0x01	; 1
    2206:	f1 f7       	brne	.-4      	; 0x2204 <__stack+0x5>
    2208:	9e 8f       	std	Y+30, r25	; 0x1e
    220a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(DELAY1);
	hard_left_turn(angle);
    220c:	89 ad       	ldd	r24, Y+57	; 0x39
    220e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2210:	aa 27       	eor	r26, r26
    2212:	97 fd       	sbrc	r25, 7
    2214:	a0 95       	com	r26
    2216:	ba 2f       	mov	r27, r26
    2218:	bc 01       	movw	r22, r24
    221a:	cd 01       	movw	r24, r26
    221c:	0e 94 af 1d 	call	0x3b5e	; 0x3b5e <__floatsisf>
    2220:	dc 01       	movw	r26, r24
    2222:	cb 01       	movw	r24, r22
    2224:	bc 01       	movw	r22, r24
    2226:	cd 01       	movw	r24, r26
    2228:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <hard_left_turn>
    222c:	80 e0       	ldi	r24, 0x00	; 0
    222e:	90 e8       	ldi	r25, 0x80	; 128
    2230:	ab eb       	ldi	r26, 0xBB	; 187
    2232:	b4 e4       	ldi	r27, 0x44	; 68
    2234:	89 8f       	std	Y+25, r24	; 0x19
    2236:	9a 8f       	std	Y+26, r25	; 0x1a
    2238:	ab 8f       	std	Y+27, r26	; 0x1b
    223a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    223c:	69 8d       	ldd	r22, Y+25	; 0x19
    223e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2240:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2242:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2244:	2d ec       	ldi	r18, 0xCD	; 205
    2246:	3c ec       	ldi	r19, 0xCC	; 204
    2248:	4c e2       	ldi	r20, 0x2C	; 44
    224a:	55 e4       	ldi	r21, 0x45	; 69
    224c:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__mulsf3>
    2250:	dc 01       	movw	r26, r24
    2252:	cb 01       	movw	r24, r22
    2254:	8d 8b       	std	Y+21, r24	; 0x15
    2256:	9e 8b       	std	Y+22, r25	; 0x16
    2258:	af 8b       	std	Y+23, r26	; 0x17
    225a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    225c:	6d 89       	ldd	r22, Y+21	; 0x15
    225e:	7e 89       	ldd	r23, Y+22	; 0x16
    2260:	8f 89       	ldd	r24, Y+23	; 0x17
    2262:	98 8d       	ldd	r25, Y+24	; 0x18
    2264:	20 e0       	ldi	r18, 0x00	; 0
    2266:	30 e0       	ldi	r19, 0x00	; 0
    2268:	40 e8       	ldi	r20, 0x80	; 128
    226a:	5f e3       	ldi	r21, 0x3F	; 63
    226c:	0e 94 7f 1d 	call	0x3afe	; 0x3afe <__ltsf2>
    2270:	88 23       	and	r24, r24
    2272:	2c f4       	brge	.+10     	; 0x227e <__stack+0x7f>
		__ticks = 1;
    2274:	81 e0       	ldi	r24, 0x01	; 1
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	9c 8b       	std	Y+20, r25	; 0x14
    227a:	8b 8b       	std	Y+19, r24	; 0x13
    227c:	3f c0       	rjmp	.+126    	; 0x22fc <__stack+0xfd>
	else if (__tmp > 65535)
    227e:	6d 89       	ldd	r22, Y+21	; 0x15
    2280:	7e 89       	ldd	r23, Y+22	; 0x16
    2282:	8f 89       	ldd	r24, Y+23	; 0x17
    2284:	98 8d       	ldd	r25, Y+24	; 0x18
    2286:	20 e0       	ldi	r18, 0x00	; 0
    2288:	3f ef       	ldi	r19, 0xFF	; 255
    228a:	4f e7       	ldi	r20, 0x7F	; 127
    228c:	57 e4       	ldi	r21, 0x47	; 71
    228e:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <__gtsf2>
    2292:	18 16       	cp	r1, r24
    2294:	4c f5       	brge	.+82     	; 0x22e8 <__stack+0xe9>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2296:	69 8d       	ldd	r22, Y+25	; 0x19
    2298:	7a 8d       	ldd	r23, Y+26	; 0x1a
    229a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    229c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    229e:	20 e0       	ldi	r18, 0x00	; 0
    22a0:	30 e0       	ldi	r19, 0x00	; 0
    22a2:	40 e2       	ldi	r20, 0x20	; 32
    22a4:	51 e4       	ldi	r21, 0x41	; 65
    22a6:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__mulsf3>
    22aa:	dc 01       	movw	r26, r24
    22ac:	cb 01       	movw	r24, r22
    22ae:	bc 01       	movw	r22, r24
    22b0:	cd 01       	movw	r24, r26
    22b2:	0e 94 a3 19 	call	0x3346	; 0x3346 <__fixunssfsi>
    22b6:	dc 01       	movw	r26, r24
    22b8:	cb 01       	movw	r24, r22
    22ba:	9c 8b       	std	Y+20, r25	; 0x14
    22bc:	8b 8b       	std	Y+19, r24	; 0x13
    22be:	0f c0       	rjmp	.+30     	; 0x22de <__stack+0xdf>
    22c0:	84 e1       	ldi	r24, 0x14	; 20
    22c2:	91 e0       	ldi	r25, 0x01	; 1
    22c4:	9a 8b       	std	Y+18, r25	; 0x12
    22c6:	89 8b       	std	Y+17, r24	; 0x11
    22c8:	89 89       	ldd	r24, Y+17	; 0x11
    22ca:	9a 89       	ldd	r25, Y+18	; 0x12
    22cc:	01 97       	sbiw	r24, 0x01	; 1
    22ce:	f1 f7       	brne	.-4      	; 0x22cc <__stack+0xcd>
    22d0:	9a 8b       	std	Y+18, r25	; 0x12
    22d2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22d4:	8b 89       	ldd	r24, Y+19	; 0x13
    22d6:	9c 89       	ldd	r25, Y+20	; 0x14
    22d8:	01 97       	sbiw	r24, 0x01	; 1
    22da:	9c 8b       	std	Y+20, r25	; 0x14
    22dc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22de:	8b 89       	ldd	r24, Y+19	; 0x13
    22e0:	9c 89       	ldd	r25, Y+20	; 0x14
    22e2:	00 97       	sbiw	r24, 0x00	; 0
    22e4:	69 f7       	brne	.-38     	; 0x22c0 <__stack+0xc1>
    22e6:	14 c0       	rjmp	.+40     	; 0x2310 <__stack+0x111>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22e8:	6d 89       	ldd	r22, Y+21	; 0x15
    22ea:	7e 89       	ldd	r23, Y+22	; 0x16
    22ec:	8f 89       	ldd	r24, Y+23	; 0x17
    22ee:	98 8d       	ldd	r25, Y+24	; 0x18
    22f0:	0e 94 a3 19 	call	0x3346	; 0x3346 <__fixunssfsi>
    22f4:	dc 01       	movw	r26, r24
    22f6:	cb 01       	movw	r24, r22
    22f8:	9c 8b       	std	Y+20, r25	; 0x14
    22fa:	8b 8b       	std	Y+19, r24	; 0x13
    22fc:	8b 89       	ldd	r24, Y+19	; 0x13
    22fe:	9c 89       	ldd	r25, Y+20	; 0x14
    2300:	98 8b       	std	Y+16, r25	; 0x10
    2302:	8f 87       	std	Y+15, r24	; 0x0f
    2304:	8f 85       	ldd	r24, Y+15	; 0x0f
    2306:	98 89       	ldd	r25, Y+16	; 0x10
    2308:	01 97       	sbiw	r24, 0x01	; 1
    230a:	f1 f7       	brne	.-4      	; 0x2308 <__stack+0x109>
    230c:	98 8b       	std	Y+16, r25	; 0x10
    230e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(DELAY1);
	backward(1.0);
    2310:	60 e0       	ldi	r22, 0x00	; 0
    2312:	70 e0       	ldi	r23, 0x00	; 0
    2314:	80 e8       	ldi	r24, 0x80	; 128
    2316:	9f e3       	ldi	r25, 0x3F	; 63
    2318:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <backward>
    231c:	80 e0       	ldi	r24, 0x00	; 0
    231e:	90 e8       	ldi	r25, 0x80	; 128
    2320:	ab eb       	ldi	r26, 0xBB	; 187
    2322:	b4 e4       	ldi	r27, 0x44	; 68
    2324:	8b 87       	std	Y+11, r24	; 0x0b
    2326:	9c 87       	std	Y+12, r25	; 0x0c
    2328:	ad 87       	std	Y+13, r26	; 0x0d
    232a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    232c:	6b 85       	ldd	r22, Y+11	; 0x0b
    232e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2330:	8d 85       	ldd	r24, Y+13	; 0x0d
    2332:	9e 85       	ldd	r25, Y+14	; 0x0e
    2334:	2d ec       	ldi	r18, 0xCD	; 205
    2336:	3c ec       	ldi	r19, 0xCC	; 204
    2338:	4c e2       	ldi	r20, 0x2C	; 44
    233a:	55 e4       	ldi	r21, 0x45	; 69
    233c:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__mulsf3>
    2340:	dc 01       	movw	r26, r24
    2342:	cb 01       	movw	r24, r22
    2344:	8f 83       	std	Y+7, r24	; 0x07
    2346:	98 87       	std	Y+8, r25	; 0x08
    2348:	a9 87       	std	Y+9, r26	; 0x09
    234a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    234c:	6f 81       	ldd	r22, Y+7	; 0x07
    234e:	78 85       	ldd	r23, Y+8	; 0x08
    2350:	89 85       	ldd	r24, Y+9	; 0x09
    2352:	9a 85       	ldd	r25, Y+10	; 0x0a
    2354:	20 e0       	ldi	r18, 0x00	; 0
    2356:	30 e0       	ldi	r19, 0x00	; 0
    2358:	40 e8       	ldi	r20, 0x80	; 128
    235a:	5f e3       	ldi	r21, 0x3F	; 63
    235c:	0e 94 7f 1d 	call	0x3afe	; 0x3afe <__ltsf2>
    2360:	88 23       	and	r24, r24
    2362:	2c f4       	brge	.+10     	; 0x236e <__stack+0x16f>
		__ticks = 1;
    2364:	81 e0       	ldi	r24, 0x01	; 1
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	9e 83       	std	Y+6, r25	; 0x06
    236a:	8d 83       	std	Y+5, r24	; 0x05
    236c:	3f c0       	rjmp	.+126    	; 0x23ec <__stack+0x1ed>
	else if (__tmp > 65535)
    236e:	6f 81       	ldd	r22, Y+7	; 0x07
    2370:	78 85       	ldd	r23, Y+8	; 0x08
    2372:	89 85       	ldd	r24, Y+9	; 0x09
    2374:	9a 85       	ldd	r25, Y+10	; 0x0a
    2376:	20 e0       	ldi	r18, 0x00	; 0
    2378:	3f ef       	ldi	r19, 0xFF	; 255
    237a:	4f e7       	ldi	r20, 0x7F	; 127
    237c:	57 e4       	ldi	r21, 0x47	; 71
    237e:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <__gtsf2>
    2382:	18 16       	cp	r1, r24
    2384:	4c f5       	brge	.+82     	; 0x23d8 <__stack+0x1d9>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2386:	6b 85       	ldd	r22, Y+11	; 0x0b
    2388:	7c 85       	ldd	r23, Y+12	; 0x0c
    238a:	8d 85       	ldd	r24, Y+13	; 0x0d
    238c:	9e 85       	ldd	r25, Y+14	; 0x0e
    238e:	20 e0       	ldi	r18, 0x00	; 0
    2390:	30 e0       	ldi	r19, 0x00	; 0
    2392:	40 e2       	ldi	r20, 0x20	; 32
    2394:	51 e4       	ldi	r21, 0x41	; 65
    2396:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__mulsf3>
    239a:	dc 01       	movw	r26, r24
    239c:	cb 01       	movw	r24, r22
    239e:	bc 01       	movw	r22, r24
    23a0:	cd 01       	movw	r24, r26
    23a2:	0e 94 a3 19 	call	0x3346	; 0x3346 <__fixunssfsi>
    23a6:	dc 01       	movw	r26, r24
    23a8:	cb 01       	movw	r24, r22
    23aa:	9e 83       	std	Y+6, r25	; 0x06
    23ac:	8d 83       	std	Y+5, r24	; 0x05
    23ae:	0f c0       	rjmp	.+30     	; 0x23ce <__stack+0x1cf>
    23b0:	84 e1       	ldi	r24, 0x14	; 20
    23b2:	91 e0       	ldi	r25, 0x01	; 1
    23b4:	9c 83       	std	Y+4, r25	; 0x04
    23b6:	8b 83       	std	Y+3, r24	; 0x03
    23b8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ba:	9c 81       	ldd	r25, Y+4	; 0x04
    23bc:	01 97       	sbiw	r24, 0x01	; 1
    23be:	f1 f7       	brne	.-4      	; 0x23bc <__stack+0x1bd>
    23c0:	9c 83       	std	Y+4, r25	; 0x04
    23c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23c4:	8d 81       	ldd	r24, Y+5	; 0x05
    23c6:	9e 81       	ldd	r25, Y+6	; 0x06
    23c8:	01 97       	sbiw	r24, 0x01	; 1
    23ca:	9e 83       	std	Y+6, r25	; 0x06
    23cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ce:	8d 81       	ldd	r24, Y+5	; 0x05
    23d0:	9e 81       	ldd	r25, Y+6	; 0x06
    23d2:	00 97       	sbiw	r24, 0x00	; 0
    23d4:	69 f7       	brne	.-38     	; 0x23b0 <__stack+0x1b1>
    23d6:	14 c0       	rjmp	.+40     	; 0x2400 <__stack+0x201>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23d8:	6f 81       	ldd	r22, Y+7	; 0x07
    23da:	78 85       	ldd	r23, Y+8	; 0x08
    23dc:	89 85       	ldd	r24, Y+9	; 0x09
    23de:	9a 85       	ldd	r25, Y+10	; 0x0a
    23e0:	0e 94 a3 19 	call	0x3346	; 0x3346 <__fixunssfsi>
    23e4:	dc 01       	movw	r26, r24
    23e6:	cb 01       	movw	r24, r22
    23e8:	9e 83       	std	Y+6, r25	; 0x06
    23ea:	8d 83       	std	Y+5, r24	; 0x05
    23ec:	8d 81       	ldd	r24, Y+5	; 0x05
    23ee:	9e 81       	ldd	r25, Y+6	; 0x06
    23f0:	9a 83       	std	Y+2, r25	; 0x02
    23f2:	89 83       	std	Y+1, r24	; 0x01
    23f4:	89 81       	ldd	r24, Y+1	; 0x01
    23f6:	9a 81       	ldd	r25, Y+2	; 0x02
    23f8:	01 97       	sbiw	r24, 0x01	; 1
    23fa:	f1 f7       	brne	.-4      	; 0x23f8 <__stack+0x1f9>
    23fc:	9a 83       	std	Y+2, r25	; 0x02
    23fe:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(DELAY1);
	penDown();
    2400:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <penDown>
}
    2404:	ea 96       	adiw	r28, 0x3a	; 58
    2406:	0f b6       	in	r0, 0x3f	; 63
    2408:	f8 94       	cli
    240a:	de bf       	out	0x3e, r29	; 62
    240c:	0f be       	out	0x3f, r0	; 63
    240e:	cd bf       	out	0x3d, r28	; 61
    2410:	cf 91       	pop	r28
    2412:	df 91       	pop	r29
    2414:	08 95       	ret

00002416 <turn_right>:
/**
 * Send the turning sequence moves to the robot like penup, forward, turn, backward and pendown
 * @param angle in degrees
 */
void turn_right(int angle) // angle in degrees
{
    2416:	df 93       	push	r29
    2418:	cf 93       	push	r28
    241a:	cd b7       	in	r28, 0x3d	; 61
    241c:	de b7       	in	r29, 0x3e	; 62
    241e:	ea 97       	sbiw	r28, 0x3a	; 58
    2420:	0f b6       	in	r0, 0x3f	; 63
    2422:	f8 94       	cli
    2424:	de bf       	out	0x3e, r29	; 62
    2426:	0f be       	out	0x3f, r0	; 63
    2428:	cd bf       	out	0x3d, r28	; 61
    242a:	9a af       	std	Y+58, r25	; 0x3a
    242c:	89 af       	std	Y+57, r24	; 0x39
	penUp();
    242e:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <penUp>
    2432:	80 e0       	ldi	r24, 0x00	; 0
    2434:	90 e8       	ldi	r25, 0x80	; 128
    2436:	ab eb       	ldi	r26, 0xBB	; 187
    2438:	b4 e4       	ldi	r27, 0x44	; 68
    243a:	8d ab       	std	Y+53, r24	; 0x35
    243c:	9e ab       	std	Y+54, r25	; 0x36
    243e:	af ab       	std	Y+55, r26	; 0x37
    2440:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2442:	6d a9       	ldd	r22, Y+53	; 0x35
    2444:	7e a9       	ldd	r23, Y+54	; 0x36
    2446:	8f a9       	ldd	r24, Y+55	; 0x37
    2448:	98 ad       	ldd	r25, Y+56	; 0x38
    244a:	2d ec       	ldi	r18, 0xCD	; 205
    244c:	3c ec       	ldi	r19, 0xCC	; 204
    244e:	4c e2       	ldi	r20, 0x2C	; 44
    2450:	55 e4       	ldi	r21, 0x45	; 69
    2452:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__mulsf3>
    2456:	dc 01       	movw	r26, r24
    2458:	cb 01       	movw	r24, r22
    245a:	89 ab       	std	Y+49, r24	; 0x31
    245c:	9a ab       	std	Y+50, r25	; 0x32
    245e:	ab ab       	std	Y+51, r26	; 0x33
    2460:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2462:	69 a9       	ldd	r22, Y+49	; 0x31
    2464:	7a a9       	ldd	r23, Y+50	; 0x32
    2466:	8b a9       	ldd	r24, Y+51	; 0x33
    2468:	9c a9       	ldd	r25, Y+52	; 0x34
    246a:	20 e0       	ldi	r18, 0x00	; 0
    246c:	30 e0       	ldi	r19, 0x00	; 0
    246e:	40 e8       	ldi	r20, 0x80	; 128
    2470:	5f e3       	ldi	r21, 0x3F	; 63
    2472:	0e 94 7f 1d 	call	0x3afe	; 0x3afe <__ltsf2>
    2476:	88 23       	and	r24, r24
    2478:	2c f4       	brge	.+10     	; 0x2484 <turn_right+0x6e>
		__ticks = 1;
    247a:	81 e0       	ldi	r24, 0x01	; 1
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	98 ab       	std	Y+48, r25	; 0x30
    2480:	8f a7       	std	Y+47, r24	; 0x2f
    2482:	3f c0       	rjmp	.+126    	; 0x2502 <turn_right+0xec>
	else if (__tmp > 65535)
    2484:	69 a9       	ldd	r22, Y+49	; 0x31
    2486:	7a a9       	ldd	r23, Y+50	; 0x32
    2488:	8b a9       	ldd	r24, Y+51	; 0x33
    248a:	9c a9       	ldd	r25, Y+52	; 0x34
    248c:	20 e0       	ldi	r18, 0x00	; 0
    248e:	3f ef       	ldi	r19, 0xFF	; 255
    2490:	4f e7       	ldi	r20, 0x7F	; 127
    2492:	57 e4       	ldi	r21, 0x47	; 71
    2494:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <__gtsf2>
    2498:	18 16       	cp	r1, r24
    249a:	4c f5       	brge	.+82     	; 0x24ee <turn_right+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    249c:	6d a9       	ldd	r22, Y+53	; 0x35
    249e:	7e a9       	ldd	r23, Y+54	; 0x36
    24a0:	8f a9       	ldd	r24, Y+55	; 0x37
    24a2:	98 ad       	ldd	r25, Y+56	; 0x38
    24a4:	20 e0       	ldi	r18, 0x00	; 0
    24a6:	30 e0       	ldi	r19, 0x00	; 0
    24a8:	40 e2       	ldi	r20, 0x20	; 32
    24aa:	51 e4       	ldi	r21, 0x41	; 65
    24ac:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__mulsf3>
    24b0:	dc 01       	movw	r26, r24
    24b2:	cb 01       	movw	r24, r22
    24b4:	bc 01       	movw	r22, r24
    24b6:	cd 01       	movw	r24, r26
    24b8:	0e 94 a3 19 	call	0x3346	; 0x3346 <__fixunssfsi>
    24bc:	dc 01       	movw	r26, r24
    24be:	cb 01       	movw	r24, r22
    24c0:	98 ab       	std	Y+48, r25	; 0x30
    24c2:	8f a7       	std	Y+47, r24	; 0x2f
    24c4:	0f c0       	rjmp	.+30     	; 0x24e4 <turn_right+0xce>
    24c6:	84 e1       	ldi	r24, 0x14	; 20
    24c8:	91 e0       	ldi	r25, 0x01	; 1
    24ca:	9e a7       	std	Y+46, r25	; 0x2e
    24cc:	8d a7       	std	Y+45, r24	; 0x2d
    24ce:	8d a5       	ldd	r24, Y+45	; 0x2d
    24d0:	9e a5       	ldd	r25, Y+46	; 0x2e
    24d2:	01 97       	sbiw	r24, 0x01	; 1
    24d4:	f1 f7       	brne	.-4      	; 0x24d2 <turn_right+0xbc>
    24d6:	9e a7       	std	Y+46, r25	; 0x2e
    24d8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24da:	8f a5       	ldd	r24, Y+47	; 0x2f
    24dc:	98 a9       	ldd	r25, Y+48	; 0x30
    24de:	01 97       	sbiw	r24, 0x01	; 1
    24e0:	98 ab       	std	Y+48, r25	; 0x30
    24e2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24e4:	8f a5       	ldd	r24, Y+47	; 0x2f
    24e6:	98 a9       	ldd	r25, Y+48	; 0x30
    24e8:	00 97       	sbiw	r24, 0x00	; 0
    24ea:	69 f7       	brne	.-38     	; 0x24c6 <turn_right+0xb0>
    24ec:	14 c0       	rjmp	.+40     	; 0x2516 <turn_right+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ee:	69 a9       	ldd	r22, Y+49	; 0x31
    24f0:	7a a9       	ldd	r23, Y+50	; 0x32
    24f2:	8b a9       	ldd	r24, Y+51	; 0x33
    24f4:	9c a9       	ldd	r25, Y+52	; 0x34
    24f6:	0e 94 a3 19 	call	0x3346	; 0x3346 <__fixunssfsi>
    24fa:	dc 01       	movw	r26, r24
    24fc:	cb 01       	movw	r24, r22
    24fe:	98 ab       	std	Y+48, r25	; 0x30
    2500:	8f a7       	std	Y+47, r24	; 0x2f
    2502:	8f a5       	ldd	r24, Y+47	; 0x2f
    2504:	98 a9       	ldd	r25, Y+48	; 0x30
    2506:	9c a7       	std	Y+44, r25	; 0x2c
    2508:	8b a7       	std	Y+43, r24	; 0x2b
    250a:	8b a5       	ldd	r24, Y+43	; 0x2b
    250c:	9c a5       	ldd	r25, Y+44	; 0x2c
    250e:	01 97       	sbiw	r24, 0x01	; 1
    2510:	f1 f7       	brne	.-4      	; 0x250e <turn_right+0xf8>
    2512:	9c a7       	std	Y+44, r25	; 0x2c
    2514:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(DELAY1);
	forward(1.5);
    2516:	60 e0       	ldi	r22, 0x00	; 0
    2518:	70 e0       	ldi	r23, 0x00	; 0
    251a:	80 ec       	ldi	r24, 0xC0	; 192
    251c:	9f e3       	ldi	r25, 0x3F	; 63
    251e:	0e 94 a8 0c 	call	0x1950	; 0x1950 <forward>
    2522:	80 e0       	ldi	r24, 0x00	; 0
    2524:	90 e8       	ldi	r25, 0x80	; 128
    2526:	ab eb       	ldi	r26, 0xBB	; 187
    2528:	b4 e4       	ldi	r27, 0x44	; 68
    252a:	8f a3       	std	Y+39, r24	; 0x27
    252c:	98 a7       	std	Y+40, r25	; 0x28
    252e:	a9 a7       	std	Y+41, r26	; 0x29
    2530:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2532:	6f a1       	ldd	r22, Y+39	; 0x27
    2534:	78 a5       	ldd	r23, Y+40	; 0x28
    2536:	89 a5       	ldd	r24, Y+41	; 0x29
    2538:	9a a5       	ldd	r25, Y+42	; 0x2a
    253a:	2d ec       	ldi	r18, 0xCD	; 205
    253c:	3c ec       	ldi	r19, 0xCC	; 204
    253e:	4c e2       	ldi	r20, 0x2C	; 44
    2540:	55 e4       	ldi	r21, 0x45	; 69
    2542:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__mulsf3>
    2546:	dc 01       	movw	r26, r24
    2548:	cb 01       	movw	r24, r22
    254a:	8b a3       	std	Y+35, r24	; 0x23
    254c:	9c a3       	std	Y+36, r25	; 0x24
    254e:	ad a3       	std	Y+37, r26	; 0x25
    2550:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2552:	6b a1       	ldd	r22, Y+35	; 0x23
    2554:	7c a1       	ldd	r23, Y+36	; 0x24
    2556:	8d a1       	ldd	r24, Y+37	; 0x25
    2558:	9e a1       	ldd	r25, Y+38	; 0x26
    255a:	20 e0       	ldi	r18, 0x00	; 0
    255c:	30 e0       	ldi	r19, 0x00	; 0
    255e:	40 e8       	ldi	r20, 0x80	; 128
    2560:	5f e3       	ldi	r21, 0x3F	; 63
    2562:	0e 94 7f 1d 	call	0x3afe	; 0x3afe <__ltsf2>
    2566:	88 23       	and	r24, r24
    2568:	2c f4       	brge	.+10     	; 0x2574 <turn_right+0x15e>
		__ticks = 1;
    256a:	81 e0       	ldi	r24, 0x01	; 1
    256c:	90 e0       	ldi	r25, 0x00	; 0
    256e:	9a a3       	std	Y+34, r25	; 0x22
    2570:	89 a3       	std	Y+33, r24	; 0x21
    2572:	3f c0       	rjmp	.+126    	; 0x25f2 <turn_right+0x1dc>
	else if (__tmp > 65535)
    2574:	6b a1       	ldd	r22, Y+35	; 0x23
    2576:	7c a1       	ldd	r23, Y+36	; 0x24
    2578:	8d a1       	ldd	r24, Y+37	; 0x25
    257a:	9e a1       	ldd	r25, Y+38	; 0x26
    257c:	20 e0       	ldi	r18, 0x00	; 0
    257e:	3f ef       	ldi	r19, 0xFF	; 255
    2580:	4f e7       	ldi	r20, 0x7F	; 127
    2582:	57 e4       	ldi	r21, 0x47	; 71
    2584:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <__gtsf2>
    2588:	18 16       	cp	r1, r24
    258a:	4c f5       	brge	.+82     	; 0x25de <turn_right+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    258c:	6f a1       	ldd	r22, Y+39	; 0x27
    258e:	78 a5       	ldd	r23, Y+40	; 0x28
    2590:	89 a5       	ldd	r24, Y+41	; 0x29
    2592:	9a a5       	ldd	r25, Y+42	; 0x2a
    2594:	20 e0       	ldi	r18, 0x00	; 0
    2596:	30 e0       	ldi	r19, 0x00	; 0
    2598:	40 e2       	ldi	r20, 0x20	; 32
    259a:	51 e4       	ldi	r21, 0x41	; 65
    259c:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__mulsf3>
    25a0:	dc 01       	movw	r26, r24
    25a2:	cb 01       	movw	r24, r22
    25a4:	bc 01       	movw	r22, r24
    25a6:	cd 01       	movw	r24, r26
    25a8:	0e 94 a3 19 	call	0x3346	; 0x3346 <__fixunssfsi>
    25ac:	dc 01       	movw	r26, r24
    25ae:	cb 01       	movw	r24, r22
    25b0:	9a a3       	std	Y+34, r25	; 0x22
    25b2:	89 a3       	std	Y+33, r24	; 0x21
    25b4:	0f c0       	rjmp	.+30     	; 0x25d4 <turn_right+0x1be>
    25b6:	84 e1       	ldi	r24, 0x14	; 20
    25b8:	91 e0       	ldi	r25, 0x01	; 1
    25ba:	98 a3       	std	Y+32, r25	; 0x20
    25bc:	8f 8f       	std	Y+31, r24	; 0x1f
    25be:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25c0:	98 a1       	ldd	r25, Y+32	; 0x20
    25c2:	01 97       	sbiw	r24, 0x01	; 1
    25c4:	f1 f7       	brne	.-4      	; 0x25c2 <turn_right+0x1ac>
    25c6:	98 a3       	std	Y+32, r25	; 0x20
    25c8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25ca:	89 a1       	ldd	r24, Y+33	; 0x21
    25cc:	9a a1       	ldd	r25, Y+34	; 0x22
    25ce:	01 97       	sbiw	r24, 0x01	; 1
    25d0:	9a a3       	std	Y+34, r25	; 0x22
    25d2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25d4:	89 a1       	ldd	r24, Y+33	; 0x21
    25d6:	9a a1       	ldd	r25, Y+34	; 0x22
    25d8:	00 97       	sbiw	r24, 0x00	; 0
    25da:	69 f7       	brne	.-38     	; 0x25b6 <turn_right+0x1a0>
    25dc:	14 c0       	rjmp	.+40     	; 0x2606 <turn_right+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25de:	6b a1       	ldd	r22, Y+35	; 0x23
    25e0:	7c a1       	ldd	r23, Y+36	; 0x24
    25e2:	8d a1       	ldd	r24, Y+37	; 0x25
    25e4:	9e a1       	ldd	r25, Y+38	; 0x26
    25e6:	0e 94 a3 19 	call	0x3346	; 0x3346 <__fixunssfsi>
    25ea:	dc 01       	movw	r26, r24
    25ec:	cb 01       	movw	r24, r22
    25ee:	9a a3       	std	Y+34, r25	; 0x22
    25f0:	89 a3       	std	Y+33, r24	; 0x21
    25f2:	89 a1       	ldd	r24, Y+33	; 0x21
    25f4:	9a a1       	ldd	r25, Y+34	; 0x22
    25f6:	9e 8f       	std	Y+30, r25	; 0x1e
    25f8:	8d 8f       	std	Y+29, r24	; 0x1d
    25fa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25fc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25fe:	01 97       	sbiw	r24, 0x01	; 1
    2600:	f1 f7       	brne	.-4      	; 0x25fe <turn_right+0x1e8>
    2602:	9e 8f       	std	Y+30, r25	; 0x1e
    2604:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(DELAY1);
	hard_right_turn(angle);
    2606:	89 ad       	ldd	r24, Y+57	; 0x39
    2608:	9a ad       	ldd	r25, Y+58	; 0x3a
    260a:	aa 27       	eor	r26, r26
    260c:	97 fd       	sbrc	r25, 7
    260e:	a0 95       	com	r26
    2610:	ba 2f       	mov	r27, r26
    2612:	bc 01       	movw	r22, r24
    2614:	cd 01       	movw	r24, r26
    2616:	0e 94 af 1d 	call	0x3b5e	; 0x3b5e <__floatsisf>
    261a:	dc 01       	movw	r26, r24
    261c:	cb 01       	movw	r24, r22
    261e:	bc 01       	movw	r22, r24
    2620:	cd 01       	movw	r24, r26
    2622:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <hard_right_turn>
    2626:	80 e0       	ldi	r24, 0x00	; 0
    2628:	90 e8       	ldi	r25, 0x80	; 128
    262a:	ab eb       	ldi	r26, 0xBB	; 187
    262c:	b4 e4       	ldi	r27, 0x44	; 68
    262e:	89 8f       	std	Y+25, r24	; 0x19
    2630:	9a 8f       	std	Y+26, r25	; 0x1a
    2632:	ab 8f       	std	Y+27, r26	; 0x1b
    2634:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2636:	69 8d       	ldd	r22, Y+25	; 0x19
    2638:	7a 8d       	ldd	r23, Y+26	; 0x1a
    263a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    263c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    263e:	2d ec       	ldi	r18, 0xCD	; 205
    2640:	3c ec       	ldi	r19, 0xCC	; 204
    2642:	4c e2       	ldi	r20, 0x2C	; 44
    2644:	55 e4       	ldi	r21, 0x45	; 69
    2646:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__mulsf3>
    264a:	dc 01       	movw	r26, r24
    264c:	cb 01       	movw	r24, r22
    264e:	8d 8b       	std	Y+21, r24	; 0x15
    2650:	9e 8b       	std	Y+22, r25	; 0x16
    2652:	af 8b       	std	Y+23, r26	; 0x17
    2654:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2656:	6d 89       	ldd	r22, Y+21	; 0x15
    2658:	7e 89       	ldd	r23, Y+22	; 0x16
    265a:	8f 89       	ldd	r24, Y+23	; 0x17
    265c:	98 8d       	ldd	r25, Y+24	; 0x18
    265e:	20 e0       	ldi	r18, 0x00	; 0
    2660:	30 e0       	ldi	r19, 0x00	; 0
    2662:	40 e8       	ldi	r20, 0x80	; 128
    2664:	5f e3       	ldi	r21, 0x3F	; 63
    2666:	0e 94 7f 1d 	call	0x3afe	; 0x3afe <__ltsf2>
    266a:	88 23       	and	r24, r24
    266c:	2c f4       	brge	.+10     	; 0x2678 <turn_right+0x262>
		__ticks = 1;
    266e:	81 e0       	ldi	r24, 0x01	; 1
    2670:	90 e0       	ldi	r25, 0x00	; 0
    2672:	9c 8b       	std	Y+20, r25	; 0x14
    2674:	8b 8b       	std	Y+19, r24	; 0x13
    2676:	3f c0       	rjmp	.+126    	; 0x26f6 <turn_right+0x2e0>
	else if (__tmp > 65535)
    2678:	6d 89       	ldd	r22, Y+21	; 0x15
    267a:	7e 89       	ldd	r23, Y+22	; 0x16
    267c:	8f 89       	ldd	r24, Y+23	; 0x17
    267e:	98 8d       	ldd	r25, Y+24	; 0x18
    2680:	20 e0       	ldi	r18, 0x00	; 0
    2682:	3f ef       	ldi	r19, 0xFF	; 255
    2684:	4f e7       	ldi	r20, 0x7F	; 127
    2686:	57 e4       	ldi	r21, 0x47	; 71
    2688:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <__gtsf2>
    268c:	18 16       	cp	r1, r24
    268e:	4c f5       	brge	.+82     	; 0x26e2 <turn_right+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2690:	69 8d       	ldd	r22, Y+25	; 0x19
    2692:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2694:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2696:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2698:	20 e0       	ldi	r18, 0x00	; 0
    269a:	30 e0       	ldi	r19, 0x00	; 0
    269c:	40 e2       	ldi	r20, 0x20	; 32
    269e:	51 e4       	ldi	r21, 0x41	; 65
    26a0:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__mulsf3>
    26a4:	dc 01       	movw	r26, r24
    26a6:	cb 01       	movw	r24, r22
    26a8:	bc 01       	movw	r22, r24
    26aa:	cd 01       	movw	r24, r26
    26ac:	0e 94 a3 19 	call	0x3346	; 0x3346 <__fixunssfsi>
    26b0:	dc 01       	movw	r26, r24
    26b2:	cb 01       	movw	r24, r22
    26b4:	9c 8b       	std	Y+20, r25	; 0x14
    26b6:	8b 8b       	std	Y+19, r24	; 0x13
    26b8:	0f c0       	rjmp	.+30     	; 0x26d8 <turn_right+0x2c2>
    26ba:	84 e1       	ldi	r24, 0x14	; 20
    26bc:	91 e0       	ldi	r25, 0x01	; 1
    26be:	9a 8b       	std	Y+18, r25	; 0x12
    26c0:	89 8b       	std	Y+17, r24	; 0x11
    26c2:	89 89       	ldd	r24, Y+17	; 0x11
    26c4:	9a 89       	ldd	r25, Y+18	; 0x12
    26c6:	01 97       	sbiw	r24, 0x01	; 1
    26c8:	f1 f7       	brne	.-4      	; 0x26c6 <turn_right+0x2b0>
    26ca:	9a 8b       	std	Y+18, r25	; 0x12
    26cc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ce:	8b 89       	ldd	r24, Y+19	; 0x13
    26d0:	9c 89       	ldd	r25, Y+20	; 0x14
    26d2:	01 97       	sbiw	r24, 0x01	; 1
    26d4:	9c 8b       	std	Y+20, r25	; 0x14
    26d6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26d8:	8b 89       	ldd	r24, Y+19	; 0x13
    26da:	9c 89       	ldd	r25, Y+20	; 0x14
    26dc:	00 97       	sbiw	r24, 0x00	; 0
    26de:	69 f7       	brne	.-38     	; 0x26ba <turn_right+0x2a4>
    26e0:	14 c0       	rjmp	.+40     	; 0x270a <turn_right+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26e2:	6d 89       	ldd	r22, Y+21	; 0x15
    26e4:	7e 89       	ldd	r23, Y+22	; 0x16
    26e6:	8f 89       	ldd	r24, Y+23	; 0x17
    26e8:	98 8d       	ldd	r25, Y+24	; 0x18
    26ea:	0e 94 a3 19 	call	0x3346	; 0x3346 <__fixunssfsi>
    26ee:	dc 01       	movw	r26, r24
    26f0:	cb 01       	movw	r24, r22
    26f2:	9c 8b       	std	Y+20, r25	; 0x14
    26f4:	8b 8b       	std	Y+19, r24	; 0x13
    26f6:	8b 89       	ldd	r24, Y+19	; 0x13
    26f8:	9c 89       	ldd	r25, Y+20	; 0x14
    26fa:	98 8b       	std	Y+16, r25	; 0x10
    26fc:	8f 87       	std	Y+15, r24	; 0x0f
    26fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2700:	98 89       	ldd	r25, Y+16	; 0x10
    2702:	01 97       	sbiw	r24, 0x01	; 1
    2704:	f1 f7       	brne	.-4      	; 0x2702 <turn_right+0x2ec>
    2706:	98 8b       	std	Y+16, r25	; 0x10
    2708:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(DELAY1);
	backward(1.5);
    270a:	60 e0       	ldi	r22, 0x00	; 0
    270c:	70 e0       	ldi	r23, 0x00	; 0
    270e:	80 ec       	ldi	r24, 0xC0	; 192
    2710:	9f e3       	ldi	r25, 0x3F	; 63
    2712:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <backward>
    2716:	80 e0       	ldi	r24, 0x00	; 0
    2718:	90 e8       	ldi	r25, 0x80	; 128
    271a:	ab eb       	ldi	r26, 0xBB	; 187
    271c:	b4 e4       	ldi	r27, 0x44	; 68
    271e:	8b 87       	std	Y+11, r24	; 0x0b
    2720:	9c 87       	std	Y+12, r25	; 0x0c
    2722:	ad 87       	std	Y+13, r26	; 0x0d
    2724:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2726:	6b 85       	ldd	r22, Y+11	; 0x0b
    2728:	7c 85       	ldd	r23, Y+12	; 0x0c
    272a:	8d 85       	ldd	r24, Y+13	; 0x0d
    272c:	9e 85       	ldd	r25, Y+14	; 0x0e
    272e:	2d ec       	ldi	r18, 0xCD	; 205
    2730:	3c ec       	ldi	r19, 0xCC	; 204
    2732:	4c e2       	ldi	r20, 0x2C	; 44
    2734:	55 e4       	ldi	r21, 0x45	; 69
    2736:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__mulsf3>
    273a:	dc 01       	movw	r26, r24
    273c:	cb 01       	movw	r24, r22
    273e:	8f 83       	std	Y+7, r24	; 0x07
    2740:	98 87       	std	Y+8, r25	; 0x08
    2742:	a9 87       	std	Y+9, r26	; 0x09
    2744:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2746:	6f 81       	ldd	r22, Y+7	; 0x07
    2748:	78 85       	ldd	r23, Y+8	; 0x08
    274a:	89 85       	ldd	r24, Y+9	; 0x09
    274c:	9a 85       	ldd	r25, Y+10	; 0x0a
    274e:	20 e0       	ldi	r18, 0x00	; 0
    2750:	30 e0       	ldi	r19, 0x00	; 0
    2752:	40 e8       	ldi	r20, 0x80	; 128
    2754:	5f e3       	ldi	r21, 0x3F	; 63
    2756:	0e 94 7f 1d 	call	0x3afe	; 0x3afe <__ltsf2>
    275a:	88 23       	and	r24, r24
    275c:	2c f4       	brge	.+10     	; 0x2768 <turn_right+0x352>
		__ticks = 1;
    275e:	81 e0       	ldi	r24, 0x01	; 1
    2760:	90 e0       	ldi	r25, 0x00	; 0
    2762:	9e 83       	std	Y+6, r25	; 0x06
    2764:	8d 83       	std	Y+5, r24	; 0x05
    2766:	3f c0       	rjmp	.+126    	; 0x27e6 <turn_right+0x3d0>
	else if (__tmp > 65535)
    2768:	6f 81       	ldd	r22, Y+7	; 0x07
    276a:	78 85       	ldd	r23, Y+8	; 0x08
    276c:	89 85       	ldd	r24, Y+9	; 0x09
    276e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2770:	20 e0       	ldi	r18, 0x00	; 0
    2772:	3f ef       	ldi	r19, 0xFF	; 255
    2774:	4f e7       	ldi	r20, 0x7F	; 127
    2776:	57 e4       	ldi	r21, 0x47	; 71
    2778:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <__gtsf2>
    277c:	18 16       	cp	r1, r24
    277e:	4c f5       	brge	.+82     	; 0x27d2 <turn_right+0x3bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2780:	6b 85       	ldd	r22, Y+11	; 0x0b
    2782:	7c 85       	ldd	r23, Y+12	; 0x0c
    2784:	8d 85       	ldd	r24, Y+13	; 0x0d
    2786:	9e 85       	ldd	r25, Y+14	; 0x0e
    2788:	20 e0       	ldi	r18, 0x00	; 0
    278a:	30 e0       	ldi	r19, 0x00	; 0
    278c:	40 e2       	ldi	r20, 0x20	; 32
    278e:	51 e4       	ldi	r21, 0x41	; 65
    2790:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__mulsf3>
    2794:	dc 01       	movw	r26, r24
    2796:	cb 01       	movw	r24, r22
    2798:	bc 01       	movw	r22, r24
    279a:	cd 01       	movw	r24, r26
    279c:	0e 94 a3 19 	call	0x3346	; 0x3346 <__fixunssfsi>
    27a0:	dc 01       	movw	r26, r24
    27a2:	cb 01       	movw	r24, r22
    27a4:	9e 83       	std	Y+6, r25	; 0x06
    27a6:	8d 83       	std	Y+5, r24	; 0x05
    27a8:	0f c0       	rjmp	.+30     	; 0x27c8 <turn_right+0x3b2>
    27aa:	84 e1       	ldi	r24, 0x14	; 20
    27ac:	91 e0       	ldi	r25, 0x01	; 1
    27ae:	9c 83       	std	Y+4, r25	; 0x04
    27b0:	8b 83       	std	Y+3, r24	; 0x03
    27b2:	8b 81       	ldd	r24, Y+3	; 0x03
    27b4:	9c 81       	ldd	r25, Y+4	; 0x04
    27b6:	01 97       	sbiw	r24, 0x01	; 1
    27b8:	f1 f7       	brne	.-4      	; 0x27b6 <turn_right+0x3a0>
    27ba:	9c 83       	std	Y+4, r25	; 0x04
    27bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27be:	8d 81       	ldd	r24, Y+5	; 0x05
    27c0:	9e 81       	ldd	r25, Y+6	; 0x06
    27c2:	01 97       	sbiw	r24, 0x01	; 1
    27c4:	9e 83       	std	Y+6, r25	; 0x06
    27c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27c8:	8d 81       	ldd	r24, Y+5	; 0x05
    27ca:	9e 81       	ldd	r25, Y+6	; 0x06
    27cc:	00 97       	sbiw	r24, 0x00	; 0
    27ce:	69 f7       	brne	.-38     	; 0x27aa <turn_right+0x394>
    27d0:	14 c0       	rjmp	.+40     	; 0x27fa <turn_right+0x3e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27d2:	6f 81       	ldd	r22, Y+7	; 0x07
    27d4:	78 85       	ldd	r23, Y+8	; 0x08
    27d6:	89 85       	ldd	r24, Y+9	; 0x09
    27d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    27da:	0e 94 a3 19 	call	0x3346	; 0x3346 <__fixunssfsi>
    27de:	dc 01       	movw	r26, r24
    27e0:	cb 01       	movw	r24, r22
    27e2:	9e 83       	std	Y+6, r25	; 0x06
    27e4:	8d 83       	std	Y+5, r24	; 0x05
    27e6:	8d 81       	ldd	r24, Y+5	; 0x05
    27e8:	9e 81       	ldd	r25, Y+6	; 0x06
    27ea:	9a 83       	std	Y+2, r25	; 0x02
    27ec:	89 83       	std	Y+1, r24	; 0x01
    27ee:	89 81       	ldd	r24, Y+1	; 0x01
    27f0:	9a 81       	ldd	r25, Y+2	; 0x02
    27f2:	01 97       	sbiw	r24, 0x01	; 1
    27f4:	f1 f7       	brne	.-4      	; 0x27f2 <turn_right+0x3dc>
    27f6:	9a 83       	std	Y+2, r25	; 0x02
    27f8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(DELAY1);
	penDown();
    27fa:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <penDown>
}
    27fe:	ea 96       	adiw	r28, 0x3a	; 58
    2800:	0f b6       	in	r0, 0x3f	; 63
    2802:	f8 94       	cli
    2804:	de bf       	out	0x3e, r29	; 62
    2806:	0f be       	out	0x3f, r0	; 63
    2808:	cd bf       	out	0x3d, r28	; 61
    280a:	cf 91       	pop	r28
    280c:	df 91       	pop	r29
    280e:	08 95       	ret

00002810 <display_data_count>:

/**
 * Display number of triplets/line segments' information received
 */
void display_data_count()
{
    2810:	df 93       	push	r29
    2812:	cf 93       	push	r28
    2814:	cd b7       	in	r28, 0x3d	; 61
    2816:	de b7       	in	r29, 0x3e	; 62
	/*if(dataRcvCount <= 1)
	{
		flashDisplay("Receiving Data..",0);
	}*/
	lcd_cursor(2,1);
    2818:	82 e0       	ldi	r24, 0x02	; 2
    281a:	61 e0       	ldi	r22, 0x01	; 1
    281c:	0e 94 21 09 	call	0x1242	; 0x1242 <lcd_cursor>
	lcd_wr_char('D');
    2820:	84 e4       	ldi	r24, 0x44	; 68
    2822:	0e 94 a0 07 	call	0xf40	; 0xf40 <lcd_wr_char>
	lcd_print (2,2,dataRcvCount,3);
    2826:	80 91 a6 03 	lds	r24, 0x03A6
    282a:	90 91 a7 03 	lds	r25, 0x03A7
    282e:	9c 01       	movw	r18, r24
    2830:	82 e0       	ldi	r24, 0x02	; 2
    2832:	62 e0       	ldi	r22, 0x02	; 2
    2834:	a9 01       	movw	r20, r18
    2836:	23 e0       	ldi	r18, 0x03	; 3
    2838:	30 e0       	ldi	r19, 0x00	; 0
    283a:	0e 94 63 09 	call	0x12c6	; 0x12c6 <lcd_print>
	lcd_cursor(2,6);
    283e:	82 e0       	ldi	r24, 0x02	; 2
    2840:	66 e0       	ldi	r22, 0x06	; 6
    2842:	0e 94 21 09 	call	0x1242	; 0x1242 <lcd_cursor>
	lcd_wr_char('T');
    2846:	84 e5       	ldi	r24, 0x54	; 84
    2848:	0e 94 a0 07 	call	0xf40	; 0xf40 <lcd_wr_char>
	lcd_print (2,7,dataType,3);
    284c:	80 91 a8 03 	lds	r24, 0x03A8
    2850:	90 91 a9 03 	lds	r25, 0x03A9
    2854:	9c 01       	movw	r18, r24
    2856:	82 e0       	ldi	r24, 0x02	; 2
    2858:	67 e0       	ldi	r22, 0x07	; 7
    285a:	a9 01       	movw	r20, r18
    285c:	23 e0       	ldi	r18, 0x03	; 3
    285e:	30 e0       	ldi	r19, 0x00	; 0
    2860:	0e 94 63 09 	call	0x12c6	; 0x12c6 <lcd_print>
}
    2864:	cf 91       	pop	r28
    2866:	df 91       	pop	r29
    2868:	08 95       	ret

0000286a <__vector_25>:

/**
 * Interrupt Service Routine for receiving XBEE data
 */
SIGNAL (SIG_USART0_RECV)
{
    286a:	1f 92       	push	r1
    286c:	0f 92       	push	r0
    286e:	0f b6       	in	r0, 0x3f	; 63
    2870:	0f 92       	push	r0
    2872:	00 90 5b 00 	lds	r0, 0x005B
    2876:	0f 92       	push	r0
    2878:	11 24       	eor	r1, r1
    287a:	2f 93       	push	r18
    287c:	3f 93       	push	r19
    287e:	4f 93       	push	r20
    2880:	5f 93       	push	r21
    2882:	6f 93       	push	r22
    2884:	7f 93       	push	r23
    2886:	8f 93       	push	r24
    2888:	9f 93       	push	r25
    288a:	af 93       	push	r26
    288c:	bf 93       	push	r27
    288e:	ef 93       	push	r30
    2890:	ff 93       	push	r31
    2892:	df 93       	push	r29
    2894:	cf 93       	push	r28
    2896:	0f 92       	push	r0
    2898:	0f 92       	push	r0
    289a:	cd b7       	in	r28, 0x3d	; 61
    289c:	de b7       	in	r29, 0x3e	; 62
	cli();
    289e:	f8 94       	cli
	unsigned int data = UDR0;
    28a0:	e6 ec       	ldi	r30, 0xC6	; 198
    28a2:	f0 e0       	ldi	r31, 0x00	; 0
    28a4:	80 81       	ld	r24, Z
    28a6:	88 2f       	mov	r24, r24
    28a8:	90 e0       	ldi	r25, 0x00	; 0
    28aa:	9a 83       	std	Y+2, r25	; 0x02
    28ac:	89 83       	std	Y+1, r24	; 0x01
	if(data == 255)
    28ae:	89 81       	ldd	r24, Y+1	; 0x01
    28b0:	9a 81       	ldd	r25, Y+2	; 0x02
    28b2:	8f 3f       	cpi	r24, 0xFF	; 255
    28b4:	91 05       	cpc	r25, r1
    28b6:	39 f4       	brne	.+14     	; 0x28c6 <__vector_25+0x5c>
		startExec = 1;
    28b8:	81 e0       	ldi	r24, 0x01	; 1
    28ba:	90 e0       	ldi	r25, 0x00	; 0
    28bc:	90 93 ab 03 	sts	0x03AB, r25
    28c0:	80 93 aa 03 	sts	0x03AA, r24
    28c4:	33 c0       	rjmp	.+102    	; 0x292c <__vector_25+0xc2>
	else if(data == 254)
    28c6:	89 81       	ldd	r24, Y+1	; 0x01
    28c8:	9a 81       	ldd	r25, Y+2	; 0x02
    28ca:	8e 3f       	cpi	r24, 0xFE	; 254
    28cc:	91 05       	cpc	r25, r1
    28ce:	71 f4       	brne	.+28     	; 0x28ec <__vector_25+0x82>
	{
		dataRcvCount++;
    28d0:	80 91 a6 03 	lds	r24, 0x03A6
    28d4:	90 91 a7 03 	lds	r25, 0x03A7
    28d8:	01 96       	adiw	r24, 0x01	; 1
    28da:	90 93 a7 03 	sts	0x03A7, r25
    28de:	80 93 a6 03 	sts	0x03A6, r24
		dataType = 0;
    28e2:	10 92 a9 03 	sts	0x03A9, r1
    28e6:	10 92 a8 03 	sts	0x03A8, r1
    28ea:	20 c0       	rjmp	.+64     	; 0x292c <__vector_25+0xc2>
	}
	else
	{
		dataRcv[dataRcvCount][dataType++] = data;
    28ec:	20 91 a6 03 	lds	r18, 0x03A6
    28f0:	30 91 a7 03 	lds	r19, 0x03A7
    28f4:	40 91 a8 03 	lds	r20, 0x03A8
    28f8:	50 91 a9 03 	lds	r21, 0x03A9
    28fc:	69 81       	ldd	r22, Y+1	; 0x01
    28fe:	7a 81       	ldd	r23, Y+2	; 0x02
    2900:	c9 01       	movw	r24, r18
    2902:	88 0f       	add	r24, r24
    2904:	99 1f       	adc	r25, r25
    2906:	82 0f       	add	r24, r18
    2908:	93 1f       	adc	r25, r19
    290a:	84 0f       	add	r24, r20
    290c:	95 1f       	adc	r25, r21
    290e:	88 0f       	add	r24, r24
    2910:	99 1f       	adc	r25, r25
    2912:	fc 01       	movw	r30, r24
    2914:	e0 55       	subi	r30, 0x50	; 80
    2916:	fc 4f       	sbci	r31, 0xFC	; 252
    2918:	71 83       	std	Z+1, r23	; 0x01
    291a:	60 83       	st	Z, r22
    291c:	ca 01       	movw	r24, r20
    291e:	01 96       	adiw	r24, 0x01	; 1
    2920:	90 93 a9 03 	sts	0x03A9, r25
    2924:	80 93 a8 03 	sts	0x03A8, r24
		display_data_count();
    2928:	0e 94 08 14 	call	0x2810	; 0x2810 <display_data_count>
	}
	display_data_count();
    292c:	0e 94 08 14 	call	0x2810	; 0x2810 <display_data_count>
	sei();
    2930:	78 94       	sei
}
    2932:	0f 90       	pop	r0
    2934:	0f 90       	pop	r0
    2936:	cf 91       	pop	r28
    2938:	df 91       	pop	r29
    293a:	ff 91       	pop	r31
    293c:	ef 91       	pop	r30
    293e:	bf 91       	pop	r27
    2940:	af 91       	pop	r26
    2942:	9f 91       	pop	r25
    2944:	8f 91       	pop	r24
    2946:	7f 91       	pop	r23
    2948:	6f 91       	pop	r22
    294a:	5f 91       	pop	r21
    294c:	4f 91       	pop	r20
    294e:	3f 91       	pop	r19
    2950:	2f 91       	pop	r18
    2952:	0f 90       	pop	r0
    2954:	00 92 5b 00 	sts	0x005B, r0
    2958:	0f 90       	pop	r0
    295a:	0f be       	out	0x3f, r0	; 63
    295c:	0f 90       	pop	r0
    295e:	1f 90       	pop	r1
    2960:	18 95       	reti

00002962 <__vector_36>:

/**
 * Interrupt Service Routine for receiving RS232D serial port data
 */
SIGNAL (SIG_USART1_RECV)
{
    2962:	1f 92       	push	r1
    2964:	0f 92       	push	r0
    2966:	0f b6       	in	r0, 0x3f	; 63
    2968:	0f 92       	push	r0
    296a:	00 90 5b 00 	lds	r0, 0x005B
    296e:	0f 92       	push	r0
    2970:	11 24       	eor	r1, r1
    2972:	2f 93       	push	r18
    2974:	3f 93       	push	r19
    2976:	4f 93       	push	r20
    2978:	5f 93       	push	r21
    297a:	6f 93       	push	r22
    297c:	7f 93       	push	r23
    297e:	8f 93       	push	r24
    2980:	9f 93       	push	r25
    2982:	af 93       	push	r26
    2984:	bf 93       	push	r27
    2986:	ef 93       	push	r30
    2988:	ff 93       	push	r31
    298a:	df 93       	push	r29
    298c:	cf 93       	push	r28
    298e:	0f 92       	push	r0
    2990:	0f 92       	push	r0
    2992:	cd b7       	in	r28, 0x3d	; 61
    2994:	de b7       	in	r29, 0x3e	; 62
	cli();
    2996:	f8 94       	cli
	unsigned int data = UDR1;
    2998:	ee ec       	ldi	r30, 0xCE	; 206
    299a:	f0 e0       	ldi	r31, 0x00	; 0
    299c:	80 81       	ld	r24, Z
    299e:	88 2f       	mov	r24, r24
    29a0:	90 e0       	ldi	r25, 0x00	; 0
    29a2:	9a 83       	std	Y+2, r25	; 0x02
    29a4:	89 83       	std	Y+1, r24	; 0x01
	if(data == 255)
    29a6:	89 81       	ldd	r24, Y+1	; 0x01
    29a8:	9a 81       	ldd	r25, Y+2	; 0x02
    29aa:	8f 3f       	cpi	r24, 0xFF	; 255
    29ac:	91 05       	cpc	r25, r1
    29ae:	39 f4       	brne	.+14     	; 0x29be <__vector_36+0x5c>
		startExec = 1;
    29b0:	81 e0       	ldi	r24, 0x01	; 1
    29b2:	90 e0       	ldi	r25, 0x00	; 0
    29b4:	90 93 ab 03 	sts	0x03AB, r25
    29b8:	80 93 aa 03 	sts	0x03AA, r24
    29bc:	33 c0       	rjmp	.+102    	; 0x2a24 <__vector_36+0xc2>
	else if(data == 254)
    29be:	89 81       	ldd	r24, Y+1	; 0x01
    29c0:	9a 81       	ldd	r25, Y+2	; 0x02
    29c2:	8e 3f       	cpi	r24, 0xFE	; 254
    29c4:	91 05       	cpc	r25, r1
    29c6:	71 f4       	brne	.+28     	; 0x29e4 <__vector_36+0x82>
	{
		dataRcvCount++;
    29c8:	80 91 a6 03 	lds	r24, 0x03A6
    29cc:	90 91 a7 03 	lds	r25, 0x03A7
    29d0:	01 96       	adiw	r24, 0x01	; 1
    29d2:	90 93 a7 03 	sts	0x03A7, r25
    29d6:	80 93 a6 03 	sts	0x03A6, r24
		dataType = 0;
    29da:	10 92 a9 03 	sts	0x03A9, r1
    29de:	10 92 a8 03 	sts	0x03A8, r1
    29e2:	20 c0       	rjmp	.+64     	; 0x2a24 <__vector_36+0xc2>
	}
	else
	{
		display_data_count();
    29e4:	0e 94 08 14 	call	0x2810	; 0x2810 <display_data_count>
		dataRcv[dataRcvCount][dataType++] = data;
    29e8:	20 91 a6 03 	lds	r18, 0x03A6
    29ec:	30 91 a7 03 	lds	r19, 0x03A7
    29f0:	40 91 a8 03 	lds	r20, 0x03A8
    29f4:	50 91 a9 03 	lds	r21, 0x03A9
    29f8:	69 81       	ldd	r22, Y+1	; 0x01
    29fa:	7a 81       	ldd	r23, Y+2	; 0x02
    29fc:	c9 01       	movw	r24, r18
    29fe:	88 0f       	add	r24, r24
    2a00:	99 1f       	adc	r25, r25
    2a02:	82 0f       	add	r24, r18
    2a04:	93 1f       	adc	r25, r19
    2a06:	84 0f       	add	r24, r20
    2a08:	95 1f       	adc	r25, r21
    2a0a:	88 0f       	add	r24, r24
    2a0c:	99 1f       	adc	r25, r25
    2a0e:	fc 01       	movw	r30, r24
    2a10:	e0 55       	subi	r30, 0x50	; 80
    2a12:	fc 4f       	sbci	r31, 0xFC	; 252
    2a14:	71 83       	std	Z+1, r23	; 0x01
    2a16:	60 83       	st	Z, r22
    2a18:	ca 01       	movw	r24, r20
    2a1a:	01 96       	adiw	r24, 0x01	; 1
    2a1c:	90 93 a9 03 	sts	0x03A9, r25
    2a20:	80 93 a8 03 	sts	0x03A8, r24
	}
	display_data_count();
    2a24:	0e 94 08 14 	call	0x2810	; 0x2810 <display_data_count>
	sei();
    2a28:	78 94       	sei
}
    2a2a:	0f 90       	pop	r0
    2a2c:	0f 90       	pop	r0
    2a2e:	cf 91       	pop	r28
    2a30:	df 91       	pop	r29
    2a32:	ff 91       	pop	r31
    2a34:	ef 91       	pop	r30
    2a36:	bf 91       	pop	r27
    2a38:	af 91       	pop	r26
    2a3a:	9f 91       	pop	r25
    2a3c:	8f 91       	pop	r24
    2a3e:	7f 91       	pop	r23
    2a40:	6f 91       	pop	r22
    2a42:	5f 91       	pop	r21
    2a44:	4f 91       	pop	r20
    2a46:	3f 91       	pop	r19
    2a48:	2f 91       	pop	r18
    2a4a:	0f 90       	pop	r0
    2a4c:	00 92 5b 00 	sts	0x005B, r0
    2a50:	0f 90       	pop	r0
    2a52:	0f be       	out	0x3f, r0	; 63
    2a54:	0f 90       	pop	r0
    2a56:	1f 90       	pop	r1
    2a58:	18 95       	reti

00002a5a <init_all>:

/**
 * Initialize all the ports and hardwares
 */
void init_all()
{	
    2a5a:	df 93       	push	r29
    2a5c:	cf 93       	push	r28
    2a5e:	cd b7       	in	r28, 0x3d	; 61
    2a60:	de b7       	in	r29, 0x3e	; 62
	INIT_INT ();
    2a62:	0e 94 1e 0b 	call	0x163c	; 0x163c <INIT_INT>
	INIT_PORTS();
    2a66:	0e 94 88 0a 	call	0x1510	; 0x1510 <INIT_PORTS>
	INIT_PWM();
    2a6a:	0e 94 ce 0a 	call	0x159c	; 0x159c <INIT_PWM>
	lcd_port_config();
    2a6e:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_port_config>
	lcd_set_4bit();
    2a72:	0e 94 b3 00 	call	0x166	; 0x166 <lcd_set_4bit>
	lcd_init();
    2a76:	0e 94 b2 05 	call	0xb64	; 0xb64 <lcd_init>

	if(XBEE)
		INIT_USRT_0();
	else
		INIT_USRT_1();
    2a7a:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <INIT_USRT_1>
}
    2a7e:	cf 91       	pop	r28
    2a80:	df 91       	pop	r29
    2a82:	08 95       	ret

00002a84 <flashDisplay>:
 * Flash a line of display on the LCD
 * @param str is the string to display
 * @param time is the time in ms to display the string
 */
void flashDisplay(char *str, int time)
{
    2a84:	df 93       	push	r29
    2a86:	cf 93       	push	r28
    2a88:	cd b7       	in	r28, 0x3d	; 61
    2a8a:	de b7       	in	r29, 0x3e	; 62
    2a8c:	62 97       	sbiw	r28, 0x12	; 18
    2a8e:	0f b6       	in	r0, 0x3f	; 63
    2a90:	f8 94       	cli
    2a92:	de bf       	out	0x3e, r29	; 62
    2a94:	0f be       	out	0x3f, r0	; 63
    2a96:	cd bf       	out	0x3d, r28	; 61
    2a98:	98 8b       	std	Y+16, r25	; 0x10
    2a9a:	8f 87       	std	Y+15, r24	; 0x0f
    2a9c:	7a 8b       	std	Y+18, r23	; 0x12
    2a9e:	69 8b       	std	Y+17, r22	; 0x11
	lcd_cursor(1,1);
    2aa0:	81 e0       	ldi	r24, 0x01	; 1
    2aa2:	61 e0       	ldi	r22, 0x01	; 1
    2aa4:	0e 94 21 09 	call	0x1242	; 0x1242 <lcd_cursor>
	lcd_string(str);
    2aa8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2aaa:	98 89       	ldd	r25, Y+16	; 0x10
    2aac:	0e 94 04 09 	call	0x1208	; 0x1208 <lcd_string>
	lcd_cursor(2,1);
    2ab0:	82 e0       	ldi	r24, 0x02	; 2
    2ab2:	61 e0       	ldi	r22, 0x01	; 1
    2ab4:	0e 94 21 09 	call	0x1242	; 0x1242 <lcd_cursor>
	lcd_string("                ");
    2ab8:	80 e0       	ldi	r24, 0x00	; 0
    2aba:	92 e0       	ldi	r25, 0x02	; 2
    2abc:	0e 94 04 09 	call	0x1208	; 0x1208 <lcd_string>
	if(time != 0)
    2ac0:	89 89       	ldd	r24, Y+17	; 0x11
    2ac2:	9a 89       	ldd	r25, Y+18	; 0x12
    2ac4:	00 97       	sbiw	r24, 0x00	; 0
    2ac6:	09 f4       	brne	.+2      	; 0x2aca <flashDisplay+0x46>
    2ac8:	82 c0       	rjmp	.+260    	; 0x2bce <flashDisplay+0x14a>
	{
		_delay_ms(time);
    2aca:	89 89       	ldd	r24, Y+17	; 0x11
    2acc:	9a 89       	ldd	r25, Y+18	; 0x12
    2ace:	aa 27       	eor	r26, r26
    2ad0:	97 fd       	sbrc	r25, 7
    2ad2:	a0 95       	com	r26
    2ad4:	ba 2f       	mov	r27, r26
    2ad6:	bc 01       	movw	r22, r24
    2ad8:	cd 01       	movw	r24, r26
    2ada:	0e 94 af 1d 	call	0x3b5e	; 0x3b5e <__floatsisf>
    2ade:	dc 01       	movw	r26, r24
    2ae0:	cb 01       	movw	r24, r22
    2ae2:	8b 87       	std	Y+11, r24	; 0x0b
    2ae4:	9c 87       	std	Y+12, r25	; 0x0c
    2ae6:	ad 87       	std	Y+13, r26	; 0x0d
    2ae8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aea:	6b 85       	ldd	r22, Y+11	; 0x0b
    2aec:	7c 85       	ldd	r23, Y+12	; 0x0c
    2aee:	8d 85       	ldd	r24, Y+13	; 0x0d
    2af0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2af2:	2d ec       	ldi	r18, 0xCD	; 205
    2af4:	3c ec       	ldi	r19, 0xCC	; 204
    2af6:	4c e2       	ldi	r20, 0x2C	; 44
    2af8:	55 e4       	ldi	r21, 0x45	; 69
    2afa:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__mulsf3>
    2afe:	dc 01       	movw	r26, r24
    2b00:	cb 01       	movw	r24, r22
    2b02:	8f 83       	std	Y+7, r24	; 0x07
    2b04:	98 87       	std	Y+8, r25	; 0x08
    2b06:	a9 87       	std	Y+9, r26	; 0x09
    2b08:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b0a:	6f 81       	ldd	r22, Y+7	; 0x07
    2b0c:	78 85       	ldd	r23, Y+8	; 0x08
    2b0e:	89 85       	ldd	r24, Y+9	; 0x09
    2b10:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b12:	20 e0       	ldi	r18, 0x00	; 0
    2b14:	30 e0       	ldi	r19, 0x00	; 0
    2b16:	40 e8       	ldi	r20, 0x80	; 128
    2b18:	5f e3       	ldi	r21, 0x3F	; 63
    2b1a:	0e 94 7f 1d 	call	0x3afe	; 0x3afe <__ltsf2>
    2b1e:	88 23       	and	r24, r24
    2b20:	2c f4       	brge	.+10     	; 0x2b2c <flashDisplay+0xa8>
		__ticks = 1;
    2b22:	81 e0       	ldi	r24, 0x01	; 1
    2b24:	90 e0       	ldi	r25, 0x00	; 0
    2b26:	9e 83       	std	Y+6, r25	; 0x06
    2b28:	8d 83       	std	Y+5, r24	; 0x05
    2b2a:	3f c0       	rjmp	.+126    	; 0x2baa <flashDisplay+0x126>
	else if (__tmp > 65535)
    2b2c:	6f 81       	ldd	r22, Y+7	; 0x07
    2b2e:	78 85       	ldd	r23, Y+8	; 0x08
    2b30:	89 85       	ldd	r24, Y+9	; 0x09
    2b32:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b34:	20 e0       	ldi	r18, 0x00	; 0
    2b36:	3f ef       	ldi	r19, 0xFF	; 255
    2b38:	4f e7       	ldi	r20, 0x7F	; 127
    2b3a:	57 e4       	ldi	r21, 0x47	; 71
    2b3c:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <__gtsf2>
    2b40:	18 16       	cp	r1, r24
    2b42:	4c f5       	brge	.+82     	; 0x2b96 <flashDisplay+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b44:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b46:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b48:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b4c:	20 e0       	ldi	r18, 0x00	; 0
    2b4e:	30 e0       	ldi	r19, 0x00	; 0
    2b50:	40 e2       	ldi	r20, 0x20	; 32
    2b52:	51 e4       	ldi	r21, 0x41	; 65
    2b54:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__mulsf3>
    2b58:	dc 01       	movw	r26, r24
    2b5a:	cb 01       	movw	r24, r22
    2b5c:	bc 01       	movw	r22, r24
    2b5e:	cd 01       	movw	r24, r26
    2b60:	0e 94 a3 19 	call	0x3346	; 0x3346 <__fixunssfsi>
    2b64:	dc 01       	movw	r26, r24
    2b66:	cb 01       	movw	r24, r22
    2b68:	9e 83       	std	Y+6, r25	; 0x06
    2b6a:	8d 83       	std	Y+5, r24	; 0x05
    2b6c:	0f c0       	rjmp	.+30     	; 0x2b8c <flashDisplay+0x108>
    2b6e:	84 e1       	ldi	r24, 0x14	; 20
    2b70:	91 e0       	ldi	r25, 0x01	; 1
    2b72:	9c 83       	std	Y+4, r25	; 0x04
    2b74:	8b 83       	std	Y+3, r24	; 0x03
    2b76:	8b 81       	ldd	r24, Y+3	; 0x03
    2b78:	9c 81       	ldd	r25, Y+4	; 0x04
    2b7a:	01 97       	sbiw	r24, 0x01	; 1
    2b7c:	f1 f7       	brne	.-4      	; 0x2b7a <flashDisplay+0xf6>
    2b7e:	9c 83       	std	Y+4, r25	; 0x04
    2b80:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b82:	8d 81       	ldd	r24, Y+5	; 0x05
    2b84:	9e 81       	ldd	r25, Y+6	; 0x06
    2b86:	01 97       	sbiw	r24, 0x01	; 1
    2b88:	9e 83       	std	Y+6, r25	; 0x06
    2b8a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b8c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b8e:	9e 81       	ldd	r25, Y+6	; 0x06
    2b90:	00 97       	sbiw	r24, 0x00	; 0
    2b92:	69 f7       	brne	.-38     	; 0x2b6e <flashDisplay+0xea>
    2b94:	14 c0       	rjmp	.+40     	; 0x2bbe <flashDisplay+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b96:	6f 81       	ldd	r22, Y+7	; 0x07
    2b98:	78 85       	ldd	r23, Y+8	; 0x08
    2b9a:	89 85       	ldd	r24, Y+9	; 0x09
    2b9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b9e:	0e 94 a3 19 	call	0x3346	; 0x3346 <__fixunssfsi>
    2ba2:	dc 01       	movw	r26, r24
    2ba4:	cb 01       	movw	r24, r22
    2ba6:	9e 83       	std	Y+6, r25	; 0x06
    2ba8:	8d 83       	std	Y+5, r24	; 0x05
    2baa:	8d 81       	ldd	r24, Y+5	; 0x05
    2bac:	9e 81       	ldd	r25, Y+6	; 0x06
    2bae:	9a 83       	std	Y+2, r25	; 0x02
    2bb0:	89 83       	std	Y+1, r24	; 0x01
    2bb2:	89 81       	ldd	r24, Y+1	; 0x01
    2bb4:	9a 81       	ldd	r25, Y+2	; 0x02
    2bb6:	01 97       	sbiw	r24, 0x01	; 1
    2bb8:	f1 f7       	brne	.-4      	; 0x2bb6 <flashDisplay+0x132>
    2bba:	9a 83       	std	Y+2, r25	; 0x02
    2bbc:	89 83       	std	Y+1, r24	; 0x01
		lcd_cursor(1,1);
    2bbe:	81 e0       	ldi	r24, 0x01	; 1
    2bc0:	61 e0       	ldi	r22, 0x01	; 1
    2bc2:	0e 94 21 09 	call	0x1242	; 0x1242 <lcd_cursor>
		lcd_string("                ");
    2bc6:	80 e0       	ldi	r24, 0x00	; 0
    2bc8:	92 e0       	ldi	r25, 0x02	; 2
    2bca:	0e 94 04 09 	call	0x1208	; 0x1208 <lcd_string>
	}
}
    2bce:	62 96       	adiw	r28, 0x12	; 18
    2bd0:	0f b6       	in	r0, 0x3f	; 63
    2bd2:	f8 94       	cli
    2bd4:	de bf       	out	0x3e, r29	; 62
    2bd6:	0f be       	out	0x3f, r0	; 63
    2bd8:	cd bf       	out	0x3d, r28	; 61
    2bda:	cf 91       	pop	r28
    2bdc:	df 91       	pop	r29
    2bde:	08 95       	ret

00002be0 <displayRcvdData>:

/**
 * Display received data
 */
void displayRcvdData(int time)
{
    2be0:	df 93       	push	r29
    2be2:	cf 93       	push	r28
    2be4:	cd b7       	in	r28, 0x3d	; 61
    2be6:	de b7       	in	r29, 0x3e	; 62
    2be8:	62 97       	sbiw	r28, 0x12	; 18
    2bea:	0f b6       	in	r0, 0x3f	; 63
    2bec:	f8 94       	cli
    2bee:	de bf       	out	0x3e, r29	; 62
    2bf0:	0f be       	out	0x3f, r0	; 63
    2bf2:	cd bf       	out	0x3d, r28	; 61
    2bf4:	9a 8b       	std	Y+18, r25	; 0x12
    2bf6:	89 8b       	std	Y+17, r24	; 0x11
	int i;
	for(i = 0; i < dataRcvCount ; i++)
    2bf8:	18 8a       	std	Y+16, r1	; 0x10
    2bfa:	1f 86       	std	Y+15, r1	; 0x0f
    2bfc:	d6 c0       	rjmp	.+428    	; 0x2daa <displayRcvdData+0x1ca>
	{
		lcd_cursor(1,1);
    2bfe:	81 e0       	ldi	r24, 0x01	; 1
    2c00:	61 e0       	ldi	r22, 0x01	; 1
    2c02:	0e 94 21 09 	call	0x1242	; 0x1242 <lcd_cursor>
		lcd_wr_char('F');
    2c06:	86 e4       	ldi	r24, 0x46	; 70
    2c08:	0e 94 a0 07 	call	0xf40	; 0xf40 <lcd_wr_char>
		lcd_print (1,2,dataRcv[i][0],3);
    2c0c:	2f 85       	ldd	r18, Y+15	; 0x0f
    2c0e:	38 89       	ldd	r19, Y+16	; 0x10
    2c10:	c9 01       	movw	r24, r18
    2c12:	88 0f       	add	r24, r24
    2c14:	99 1f       	adc	r25, r25
    2c16:	82 0f       	add	r24, r18
    2c18:	93 1f       	adc	r25, r19
    2c1a:	88 0f       	add	r24, r24
    2c1c:	99 1f       	adc	r25, r25
    2c1e:	fc 01       	movw	r30, r24
    2c20:	e0 55       	subi	r30, 0x50	; 80
    2c22:	fc 4f       	sbci	r31, 0xFC	; 252
    2c24:	80 81       	ld	r24, Z
    2c26:	91 81       	ldd	r25, Z+1	; 0x01
    2c28:	9c 01       	movw	r18, r24
    2c2a:	81 e0       	ldi	r24, 0x01	; 1
    2c2c:	62 e0       	ldi	r22, 0x02	; 2
    2c2e:	a9 01       	movw	r20, r18
    2c30:	23 e0       	ldi	r18, 0x03	; 3
    2c32:	30 e0       	ldi	r19, 0x00	; 0
    2c34:	0e 94 63 09 	call	0x12c6	; 0x12c6 <lcd_print>
		
		lcd_cursor(1,6);
    2c38:	81 e0       	ldi	r24, 0x01	; 1
    2c3a:	66 e0       	ldi	r22, 0x06	; 6
    2c3c:	0e 94 21 09 	call	0x1242	; 0x1242 <lcd_cursor>
		lcd_wr_char('V');
    2c40:	86 e5       	ldi	r24, 0x56	; 86
    2c42:	0e 94 a0 07 	call	0xf40	; 0xf40 <lcd_wr_char>
		lcd_print (1,7,dataRcv[i][1],3);
    2c46:	2f 85       	ldd	r18, Y+15	; 0x0f
    2c48:	38 89       	ldd	r19, Y+16	; 0x10
    2c4a:	c9 01       	movw	r24, r18
    2c4c:	88 0f       	add	r24, r24
    2c4e:	99 1f       	adc	r25, r25
    2c50:	82 0f       	add	r24, r18
    2c52:	93 1f       	adc	r25, r19
    2c54:	88 0f       	add	r24, r24
    2c56:	99 1f       	adc	r25, r25
    2c58:	fc 01       	movw	r30, r24
    2c5a:	ee 54       	subi	r30, 0x4E	; 78
    2c5c:	fc 4f       	sbci	r31, 0xFC	; 252
    2c5e:	80 81       	ld	r24, Z
    2c60:	91 81       	ldd	r25, Z+1	; 0x01
    2c62:	9c 01       	movw	r18, r24
    2c64:	81 e0       	ldi	r24, 0x01	; 1
    2c66:	67 e0       	ldi	r22, 0x07	; 7
    2c68:	a9 01       	movw	r20, r18
    2c6a:	23 e0       	ldi	r18, 0x03	; 3
    2c6c:	30 e0       	ldi	r19, 0x00	; 0
    2c6e:	0e 94 63 09 	call	0x12c6	; 0x12c6 <lcd_print>
		
		lcd_cursor(1,11);
    2c72:	81 e0       	ldi	r24, 0x01	; 1
    2c74:	6b e0       	ldi	r22, 0x0B	; 11
    2c76:	0e 94 21 09 	call	0x1242	; 0x1242 <lcd_cursor>
		lcd_wr_char('T');
    2c7a:	84 e5       	ldi	r24, 0x54	; 84
    2c7c:	0e 94 a0 07 	call	0xf40	; 0xf40 <lcd_wr_char>
		lcd_print (1,12,dataRcv[i][2],1);
    2c80:	2f 85       	ldd	r18, Y+15	; 0x0f
    2c82:	38 89       	ldd	r19, Y+16	; 0x10
    2c84:	c9 01       	movw	r24, r18
    2c86:	88 0f       	add	r24, r24
    2c88:	99 1f       	adc	r25, r25
    2c8a:	82 0f       	add	r24, r18
    2c8c:	93 1f       	adc	r25, r19
    2c8e:	88 0f       	add	r24, r24
    2c90:	99 1f       	adc	r25, r25
    2c92:	fc 01       	movw	r30, r24
    2c94:	ec 54       	subi	r30, 0x4C	; 76
    2c96:	fc 4f       	sbci	r31, 0xFC	; 252
    2c98:	80 81       	ld	r24, Z
    2c9a:	91 81       	ldd	r25, Z+1	; 0x01
    2c9c:	9c 01       	movw	r18, r24
    2c9e:	81 e0       	ldi	r24, 0x01	; 1
    2ca0:	6c e0       	ldi	r22, 0x0C	; 12
    2ca2:	a9 01       	movw	r20, r18
    2ca4:	21 e0       	ldi	r18, 0x01	; 1
    2ca6:	30 e0       	ldi	r19, 0x00	; 0
    2ca8:	0e 94 63 09 	call	0x12c6	; 0x12c6 <lcd_print>

		_delay_ms(time);
    2cac:	89 89       	ldd	r24, Y+17	; 0x11
    2cae:	9a 89       	ldd	r25, Y+18	; 0x12
    2cb0:	aa 27       	eor	r26, r26
    2cb2:	97 fd       	sbrc	r25, 7
    2cb4:	a0 95       	com	r26
    2cb6:	ba 2f       	mov	r27, r26
    2cb8:	bc 01       	movw	r22, r24
    2cba:	cd 01       	movw	r24, r26
    2cbc:	0e 94 af 1d 	call	0x3b5e	; 0x3b5e <__floatsisf>
    2cc0:	dc 01       	movw	r26, r24
    2cc2:	cb 01       	movw	r24, r22
    2cc4:	8b 87       	std	Y+11, r24	; 0x0b
    2cc6:	9c 87       	std	Y+12, r25	; 0x0c
    2cc8:	ad 87       	std	Y+13, r26	; 0x0d
    2cca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ccc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cce:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cd0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cd2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cd4:	2d ec       	ldi	r18, 0xCD	; 205
    2cd6:	3c ec       	ldi	r19, 0xCC	; 204
    2cd8:	4c e2       	ldi	r20, 0x2C	; 44
    2cda:	55 e4       	ldi	r21, 0x45	; 69
    2cdc:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__mulsf3>
    2ce0:	dc 01       	movw	r26, r24
    2ce2:	cb 01       	movw	r24, r22
    2ce4:	8f 83       	std	Y+7, r24	; 0x07
    2ce6:	98 87       	std	Y+8, r25	; 0x08
    2ce8:	a9 87       	std	Y+9, r26	; 0x09
    2cea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2cec:	6f 81       	ldd	r22, Y+7	; 0x07
    2cee:	78 85       	ldd	r23, Y+8	; 0x08
    2cf0:	89 85       	ldd	r24, Y+9	; 0x09
    2cf2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cf4:	20 e0       	ldi	r18, 0x00	; 0
    2cf6:	30 e0       	ldi	r19, 0x00	; 0
    2cf8:	40 e8       	ldi	r20, 0x80	; 128
    2cfa:	5f e3       	ldi	r21, 0x3F	; 63
    2cfc:	0e 94 7f 1d 	call	0x3afe	; 0x3afe <__ltsf2>
    2d00:	88 23       	and	r24, r24
    2d02:	2c f4       	brge	.+10     	; 0x2d0e <displayRcvdData+0x12e>
		__ticks = 1;
    2d04:	81 e0       	ldi	r24, 0x01	; 1
    2d06:	90 e0       	ldi	r25, 0x00	; 0
    2d08:	9e 83       	std	Y+6, r25	; 0x06
    2d0a:	8d 83       	std	Y+5, r24	; 0x05
    2d0c:	3f c0       	rjmp	.+126    	; 0x2d8c <displayRcvdData+0x1ac>
	else if (__tmp > 65535)
    2d0e:	6f 81       	ldd	r22, Y+7	; 0x07
    2d10:	78 85       	ldd	r23, Y+8	; 0x08
    2d12:	89 85       	ldd	r24, Y+9	; 0x09
    2d14:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d16:	20 e0       	ldi	r18, 0x00	; 0
    2d18:	3f ef       	ldi	r19, 0xFF	; 255
    2d1a:	4f e7       	ldi	r20, 0x7F	; 127
    2d1c:	57 e4       	ldi	r21, 0x47	; 71
    2d1e:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <__gtsf2>
    2d22:	18 16       	cp	r1, r24
    2d24:	4c f5       	brge	.+82     	; 0x2d78 <displayRcvdData+0x198>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d26:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d28:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d2e:	20 e0       	ldi	r18, 0x00	; 0
    2d30:	30 e0       	ldi	r19, 0x00	; 0
    2d32:	40 e2       	ldi	r20, 0x20	; 32
    2d34:	51 e4       	ldi	r21, 0x41	; 65
    2d36:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__mulsf3>
    2d3a:	dc 01       	movw	r26, r24
    2d3c:	cb 01       	movw	r24, r22
    2d3e:	bc 01       	movw	r22, r24
    2d40:	cd 01       	movw	r24, r26
    2d42:	0e 94 a3 19 	call	0x3346	; 0x3346 <__fixunssfsi>
    2d46:	dc 01       	movw	r26, r24
    2d48:	cb 01       	movw	r24, r22
    2d4a:	9e 83       	std	Y+6, r25	; 0x06
    2d4c:	8d 83       	std	Y+5, r24	; 0x05
    2d4e:	0f c0       	rjmp	.+30     	; 0x2d6e <displayRcvdData+0x18e>
    2d50:	84 e1       	ldi	r24, 0x14	; 20
    2d52:	91 e0       	ldi	r25, 0x01	; 1
    2d54:	9c 83       	std	Y+4, r25	; 0x04
    2d56:	8b 83       	std	Y+3, r24	; 0x03
    2d58:	8b 81       	ldd	r24, Y+3	; 0x03
    2d5a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d5c:	01 97       	sbiw	r24, 0x01	; 1
    2d5e:	f1 f7       	brne	.-4      	; 0x2d5c <displayRcvdData+0x17c>
    2d60:	9c 83       	std	Y+4, r25	; 0x04
    2d62:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d64:	8d 81       	ldd	r24, Y+5	; 0x05
    2d66:	9e 81       	ldd	r25, Y+6	; 0x06
    2d68:	01 97       	sbiw	r24, 0x01	; 1
    2d6a:	9e 83       	std	Y+6, r25	; 0x06
    2d6c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d6e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d70:	9e 81       	ldd	r25, Y+6	; 0x06
    2d72:	00 97       	sbiw	r24, 0x00	; 0
    2d74:	69 f7       	brne	.-38     	; 0x2d50 <displayRcvdData+0x170>
    2d76:	14 c0       	rjmp	.+40     	; 0x2da0 <displayRcvdData+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d78:	6f 81       	ldd	r22, Y+7	; 0x07
    2d7a:	78 85       	ldd	r23, Y+8	; 0x08
    2d7c:	89 85       	ldd	r24, Y+9	; 0x09
    2d7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d80:	0e 94 a3 19 	call	0x3346	; 0x3346 <__fixunssfsi>
    2d84:	dc 01       	movw	r26, r24
    2d86:	cb 01       	movw	r24, r22
    2d88:	9e 83       	std	Y+6, r25	; 0x06
    2d8a:	8d 83       	std	Y+5, r24	; 0x05
    2d8c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d8e:	9e 81       	ldd	r25, Y+6	; 0x06
    2d90:	9a 83       	std	Y+2, r25	; 0x02
    2d92:	89 83       	std	Y+1, r24	; 0x01
    2d94:	89 81       	ldd	r24, Y+1	; 0x01
    2d96:	9a 81       	ldd	r25, Y+2	; 0x02
    2d98:	01 97       	sbiw	r24, 0x01	; 1
    2d9a:	f1 f7       	brne	.-4      	; 0x2d98 <displayRcvdData+0x1b8>
    2d9c:	9a 83       	std	Y+2, r25	; 0x02
    2d9e:	89 83       	std	Y+1, r24	; 0x01
 * Display received data
 */
void displayRcvdData(int time)
{
	int i;
	for(i = 0; i < dataRcvCount ; i++)
    2da0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2da2:	98 89       	ldd	r25, Y+16	; 0x10
    2da4:	01 96       	adiw	r24, 0x01	; 1
    2da6:	98 8b       	std	Y+16, r25	; 0x10
    2da8:	8f 87       	std	Y+15, r24	; 0x0f
    2daa:	20 91 a6 03 	lds	r18, 0x03A6
    2dae:	30 91 a7 03 	lds	r19, 0x03A7
    2db2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2db4:	98 89       	ldd	r25, Y+16	; 0x10
    2db6:	82 17       	cp	r24, r18
    2db8:	93 07       	cpc	r25, r19
    2dba:	0c f4       	brge	.+2      	; 0x2dbe <displayRcvdData+0x1de>
    2dbc:	20 cf       	rjmp	.-448    	; 0x2bfe <displayRcvdData+0x1e>
		lcd_wr_char('T');
		lcd_print (1,12,dataRcv[i][2],1);

		_delay_ms(time);
	}
}
    2dbe:	62 96       	adiw	r28, 0x12	; 18
    2dc0:	0f b6       	in	r0, 0x3f	; 63
    2dc2:	f8 94       	cli
    2dc4:	de bf       	out	0x3e, r29	; 62
    2dc6:	0f be       	out	0x3f, r0	; 63
    2dc8:	cd bf       	out	0x3d, r28	; 61
    2dca:	cf 91       	pop	r28
    2dcc:	df 91       	pop	r29
    2dce:	08 95       	ret

00002dd0 <drawTheShape>:

/**
 * Draw the sequence of line segments as received from the PC
 */
void drawTheShape()
{
    2dd0:	df 93       	push	r29
    2dd2:	cf 93       	push	r28
    2dd4:	cd b7       	in	r28, 0x3d	; 61
    2dd6:	de b7       	in	r29, 0x3e	; 62
    2dd8:	6e 97       	sbiw	r28, 0x1e	; 30
    2dda:	0f b6       	in	r0, 0x3f	; 63
    2ddc:	f8 94       	cli
    2dde:	de bf       	out	0x3e, r29	; 62
    2de0:	0f be       	out	0x3f, r0	; 63
    2de2:	cd bf       	out	0x3d, r28	; 61
	int i;

	for(i=0;i<dataRcvCount;i++)
    2de4:	1e 8e       	std	Y+30, r1	; 0x1e
    2de6:	1d 8e       	std	Y+29, r1	; 0x1d
    2de8:	ea c1       	rjmp	.+980    	; 0x31be <drawTheShape+0x3ee>
	{
		// Moving forward
		if(dataRcv[i][0] != 0)
    2dea:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2dec:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2dee:	c9 01       	movw	r24, r18
    2df0:	88 0f       	add	r24, r24
    2df2:	99 1f       	adc	r25, r25
    2df4:	82 0f       	add	r24, r18
    2df6:	93 1f       	adc	r25, r19
    2df8:	88 0f       	add	r24, r24
    2dfa:	99 1f       	adc	r25, r25
    2dfc:	fc 01       	movw	r30, r24
    2dfe:	e0 55       	subi	r30, 0x50	; 80
    2e00:	fc 4f       	sbci	r31, 0xFC	; 252
    2e02:	80 81       	ld	r24, Z
    2e04:	91 81       	ldd	r25, Z+1	; 0x01
    2e06:	00 97       	sbiw	r24, 0x00	; 0
    2e08:	09 f4       	brne	.+2      	; 0x2e0c <drawTheShape+0x3c>
    2e0a:	ac c0       	rjmp	.+344    	; 0x2f64 <drawTheShape+0x194>
		{
			lcd_cursor(2,1);
    2e0c:	82 e0       	ldi	r24, 0x02	; 2
    2e0e:	61 e0       	ldi	r22, 0x01	; 1
    2e10:	0e 94 21 09 	call	0x1242	; 0x1242 <lcd_cursor>
			lcd_string("Forward         ");
    2e14:	81 e1       	ldi	r24, 0x11	; 17
    2e16:	92 e0       	ldi	r25, 0x02	; 2
    2e18:	0e 94 04 09 	call	0x1208	; 0x1208 <lcd_string>
			lcd_print(2,9,dataRcv[i][0],3);
    2e1c:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2e1e:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2e20:	c9 01       	movw	r24, r18
    2e22:	88 0f       	add	r24, r24
    2e24:	99 1f       	adc	r25, r25
    2e26:	82 0f       	add	r24, r18
    2e28:	93 1f       	adc	r25, r19
    2e2a:	88 0f       	add	r24, r24
    2e2c:	99 1f       	adc	r25, r25
    2e2e:	fc 01       	movw	r30, r24
    2e30:	e0 55       	subi	r30, 0x50	; 80
    2e32:	fc 4f       	sbci	r31, 0xFC	; 252
    2e34:	80 81       	ld	r24, Z
    2e36:	91 81       	ldd	r25, Z+1	; 0x01
    2e38:	9c 01       	movw	r18, r24
    2e3a:	82 e0       	ldi	r24, 0x02	; 2
    2e3c:	69 e0       	ldi	r22, 0x09	; 9
    2e3e:	a9 01       	movw	r20, r18
    2e40:	23 e0       	ldi	r18, 0x03	; 3
    2e42:	30 e0       	ldi	r19, 0x00	; 0
    2e44:	0e 94 63 09 	call	0x12c6	; 0x12c6 <lcd_print>
			forward (dataRcv[i][0]);
    2e48:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2e4a:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2e4c:	c9 01       	movw	r24, r18
    2e4e:	88 0f       	add	r24, r24
    2e50:	99 1f       	adc	r25, r25
    2e52:	82 0f       	add	r24, r18
    2e54:	93 1f       	adc	r25, r19
    2e56:	88 0f       	add	r24, r24
    2e58:	99 1f       	adc	r25, r25
    2e5a:	fc 01       	movw	r30, r24
    2e5c:	e0 55       	subi	r30, 0x50	; 80
    2e5e:	fc 4f       	sbci	r31, 0xFC	; 252
    2e60:	80 81       	ld	r24, Z
    2e62:	91 81       	ldd	r25, Z+1	; 0x01
    2e64:	aa 27       	eor	r26, r26
    2e66:	97 fd       	sbrc	r25, 7
    2e68:	a0 95       	com	r26
    2e6a:	ba 2f       	mov	r27, r26
    2e6c:	bc 01       	movw	r22, r24
    2e6e:	cd 01       	movw	r24, r26
    2e70:	0e 94 af 1d 	call	0x3b5e	; 0x3b5e <__floatsisf>
    2e74:	dc 01       	movw	r26, r24
    2e76:	cb 01       	movw	r24, r22
    2e78:	bc 01       	movw	r22, r24
    2e7a:	cd 01       	movw	r24, r26
    2e7c:	0e 94 a8 0c 	call	0x1950	; 0x1950 <forward>
    2e80:	80 e0       	ldi	r24, 0x00	; 0
    2e82:	90 e0       	ldi	r25, 0x00	; 0
    2e84:	a0 e2       	ldi	r26, 0x20	; 32
    2e86:	b1 e4       	ldi	r27, 0x41	; 65
    2e88:	89 8f       	std	Y+25, r24	; 0x19
    2e8a:	9a 8f       	std	Y+26, r25	; 0x1a
    2e8c:	ab 8f       	std	Y+27, r26	; 0x1b
    2e8e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e90:	69 8d       	ldd	r22, Y+25	; 0x19
    2e92:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e94:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e96:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e98:	2d ec       	ldi	r18, 0xCD	; 205
    2e9a:	3c ec       	ldi	r19, 0xCC	; 204
    2e9c:	4c e2       	ldi	r20, 0x2C	; 44
    2e9e:	55 e4       	ldi	r21, 0x45	; 69
    2ea0:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__mulsf3>
    2ea4:	dc 01       	movw	r26, r24
    2ea6:	cb 01       	movw	r24, r22
    2ea8:	8d 8b       	std	Y+21, r24	; 0x15
    2eaa:	9e 8b       	std	Y+22, r25	; 0x16
    2eac:	af 8b       	std	Y+23, r26	; 0x17
    2eae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2eb0:	6d 89       	ldd	r22, Y+21	; 0x15
    2eb2:	7e 89       	ldd	r23, Y+22	; 0x16
    2eb4:	8f 89       	ldd	r24, Y+23	; 0x17
    2eb6:	98 8d       	ldd	r25, Y+24	; 0x18
    2eb8:	20 e0       	ldi	r18, 0x00	; 0
    2eba:	30 e0       	ldi	r19, 0x00	; 0
    2ebc:	40 e8       	ldi	r20, 0x80	; 128
    2ebe:	5f e3       	ldi	r21, 0x3F	; 63
    2ec0:	0e 94 7f 1d 	call	0x3afe	; 0x3afe <__ltsf2>
    2ec4:	88 23       	and	r24, r24
    2ec6:	2c f4       	brge	.+10     	; 0x2ed2 <drawTheShape+0x102>
		__ticks = 1;
    2ec8:	81 e0       	ldi	r24, 0x01	; 1
    2eca:	90 e0       	ldi	r25, 0x00	; 0
    2ecc:	9c 8b       	std	Y+20, r25	; 0x14
    2ece:	8b 8b       	std	Y+19, r24	; 0x13
    2ed0:	3f c0       	rjmp	.+126    	; 0x2f50 <drawTheShape+0x180>
	else if (__tmp > 65535)
    2ed2:	6d 89       	ldd	r22, Y+21	; 0x15
    2ed4:	7e 89       	ldd	r23, Y+22	; 0x16
    2ed6:	8f 89       	ldd	r24, Y+23	; 0x17
    2ed8:	98 8d       	ldd	r25, Y+24	; 0x18
    2eda:	20 e0       	ldi	r18, 0x00	; 0
    2edc:	3f ef       	ldi	r19, 0xFF	; 255
    2ede:	4f e7       	ldi	r20, 0x7F	; 127
    2ee0:	57 e4       	ldi	r21, 0x47	; 71
    2ee2:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <__gtsf2>
    2ee6:	18 16       	cp	r1, r24
    2ee8:	4c f5       	brge	.+82     	; 0x2f3c <drawTheShape+0x16c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eea:	69 8d       	ldd	r22, Y+25	; 0x19
    2eec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2eee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ef0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ef2:	20 e0       	ldi	r18, 0x00	; 0
    2ef4:	30 e0       	ldi	r19, 0x00	; 0
    2ef6:	40 e2       	ldi	r20, 0x20	; 32
    2ef8:	51 e4       	ldi	r21, 0x41	; 65
    2efa:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__mulsf3>
    2efe:	dc 01       	movw	r26, r24
    2f00:	cb 01       	movw	r24, r22
    2f02:	bc 01       	movw	r22, r24
    2f04:	cd 01       	movw	r24, r26
    2f06:	0e 94 a3 19 	call	0x3346	; 0x3346 <__fixunssfsi>
    2f0a:	dc 01       	movw	r26, r24
    2f0c:	cb 01       	movw	r24, r22
    2f0e:	9c 8b       	std	Y+20, r25	; 0x14
    2f10:	8b 8b       	std	Y+19, r24	; 0x13
    2f12:	0f c0       	rjmp	.+30     	; 0x2f32 <drawTheShape+0x162>
    2f14:	84 e1       	ldi	r24, 0x14	; 20
    2f16:	91 e0       	ldi	r25, 0x01	; 1
    2f18:	9a 8b       	std	Y+18, r25	; 0x12
    2f1a:	89 8b       	std	Y+17, r24	; 0x11
    2f1c:	89 89       	ldd	r24, Y+17	; 0x11
    2f1e:	9a 89       	ldd	r25, Y+18	; 0x12
    2f20:	01 97       	sbiw	r24, 0x01	; 1
    2f22:	f1 f7       	brne	.-4      	; 0x2f20 <drawTheShape+0x150>
    2f24:	9a 8b       	std	Y+18, r25	; 0x12
    2f26:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f28:	8b 89       	ldd	r24, Y+19	; 0x13
    2f2a:	9c 89       	ldd	r25, Y+20	; 0x14
    2f2c:	01 97       	sbiw	r24, 0x01	; 1
    2f2e:	9c 8b       	std	Y+20, r25	; 0x14
    2f30:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f32:	8b 89       	ldd	r24, Y+19	; 0x13
    2f34:	9c 89       	ldd	r25, Y+20	; 0x14
    2f36:	00 97       	sbiw	r24, 0x00	; 0
    2f38:	69 f7       	brne	.-38     	; 0x2f14 <drawTheShape+0x144>
    2f3a:	14 c0       	rjmp	.+40     	; 0x2f64 <drawTheShape+0x194>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f3c:	6d 89       	ldd	r22, Y+21	; 0x15
    2f3e:	7e 89       	ldd	r23, Y+22	; 0x16
    2f40:	8f 89       	ldd	r24, Y+23	; 0x17
    2f42:	98 8d       	ldd	r25, Y+24	; 0x18
    2f44:	0e 94 a3 19 	call	0x3346	; 0x3346 <__fixunssfsi>
    2f48:	dc 01       	movw	r26, r24
    2f4a:	cb 01       	movw	r24, r22
    2f4c:	9c 8b       	std	Y+20, r25	; 0x14
    2f4e:	8b 8b       	std	Y+19, r24	; 0x13
    2f50:	8b 89       	ldd	r24, Y+19	; 0x13
    2f52:	9c 89       	ldd	r25, Y+20	; 0x14
    2f54:	98 8b       	std	Y+16, r25	; 0x10
    2f56:	8f 87       	std	Y+15, r24	; 0x0f
    2f58:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f5a:	98 89       	ldd	r25, Y+16	; 0x10
    2f5c:	01 97       	sbiw	r24, 0x01	; 1
    2f5e:	f1 f7       	brne	.-4      	; 0x2f5c <drawTheShape+0x18c>
    2f60:	98 8b       	std	Y+16, r25	; 0x10
    2f62:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(10);
		}
		// Turning
		if(dataRcv[i][2] == 1 && dataRcv[i][1] > 3)
    2f64:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2f66:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2f68:	c9 01       	movw	r24, r18
    2f6a:	88 0f       	add	r24, r24
    2f6c:	99 1f       	adc	r25, r25
    2f6e:	82 0f       	add	r24, r18
    2f70:	93 1f       	adc	r25, r19
    2f72:	88 0f       	add	r24, r24
    2f74:	99 1f       	adc	r25, r25
    2f76:	fc 01       	movw	r30, r24
    2f78:	ec 54       	subi	r30, 0x4C	; 76
    2f7a:	fc 4f       	sbci	r31, 0xFC	; 252
    2f7c:	80 81       	ld	r24, Z
    2f7e:	91 81       	ldd	r25, Z+1	; 0x01
    2f80:	81 30       	cpi	r24, 0x01	; 1
    2f82:	91 05       	cpc	r25, r1
    2f84:	09 f0       	breq	.+2      	; 0x2f88 <drawTheShape+0x1b8>
    2f86:	40 c0       	rjmp	.+128    	; 0x3008 <drawTheShape+0x238>
    2f88:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2f8a:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2f8c:	c9 01       	movw	r24, r18
    2f8e:	88 0f       	add	r24, r24
    2f90:	99 1f       	adc	r25, r25
    2f92:	82 0f       	add	r24, r18
    2f94:	93 1f       	adc	r25, r19
    2f96:	88 0f       	add	r24, r24
    2f98:	99 1f       	adc	r25, r25
    2f9a:	fc 01       	movw	r30, r24
    2f9c:	ee 54       	subi	r30, 0x4E	; 78
    2f9e:	fc 4f       	sbci	r31, 0xFC	; 252
    2fa0:	80 81       	ld	r24, Z
    2fa2:	91 81       	ldd	r25, Z+1	; 0x01
    2fa4:	84 30       	cpi	r24, 0x04	; 4
    2fa6:	91 05       	cpc	r25, r1
    2fa8:	7c f1       	brlt	.+94     	; 0x3008 <drawTheShape+0x238>
		{// Left Turn if angle of turn is more than 3 degrees
			lcd_cursor(2,1);
    2faa:	82 e0       	ldi	r24, 0x02	; 2
    2fac:	61 e0       	ldi	r22, 0x01	; 1
    2fae:	0e 94 21 09 	call	0x1242	; 0x1242 <lcd_cursor>
			lcd_string("Left            ");
    2fb2:	82 e2       	ldi	r24, 0x22	; 34
    2fb4:	92 e0       	ldi	r25, 0x02	; 2
    2fb6:	0e 94 04 09 	call	0x1208	; 0x1208 <lcd_string>
			lcd_print(2,6,dataRcv[i][1],3);
    2fba:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2fbc:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2fbe:	c9 01       	movw	r24, r18
    2fc0:	88 0f       	add	r24, r24
    2fc2:	99 1f       	adc	r25, r25
    2fc4:	82 0f       	add	r24, r18
    2fc6:	93 1f       	adc	r25, r19
    2fc8:	88 0f       	add	r24, r24
    2fca:	99 1f       	adc	r25, r25
    2fcc:	fc 01       	movw	r30, r24
    2fce:	ee 54       	subi	r30, 0x4E	; 78
    2fd0:	fc 4f       	sbci	r31, 0xFC	; 252
    2fd2:	80 81       	ld	r24, Z
    2fd4:	91 81       	ldd	r25, Z+1	; 0x01
    2fd6:	9c 01       	movw	r18, r24
    2fd8:	82 e0       	ldi	r24, 0x02	; 2
    2fda:	66 e0       	ldi	r22, 0x06	; 6
    2fdc:	a9 01       	movw	r20, r18
    2fde:	23 e0       	ldi	r18, 0x03	; 3
    2fe0:	30 e0       	ldi	r19, 0x00	; 0
    2fe2:	0e 94 63 09 	call	0x12c6	; 0x12c6 <lcd_print>
			turn_left(dataRcv[i][1]);
    2fe6:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2fe8:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2fea:	c9 01       	movw	r24, r18
    2fec:	88 0f       	add	r24, r24
    2fee:	99 1f       	adc	r25, r25
    2ff0:	82 0f       	add	r24, r18
    2ff2:	93 1f       	adc	r25, r19
    2ff4:	88 0f       	add	r24, r24
    2ff6:	99 1f       	adc	r25, r25
    2ff8:	fc 01       	movw	r30, r24
    2ffa:	ee 54       	subi	r30, 0x4E	; 78
    2ffc:	fc 4f       	sbci	r31, 0xFC	; 252
    2ffe:	80 81       	ld	r24, Z
    3000:	91 81       	ldd	r25, Z+1	; 0x01
    3002:	0e 94 0e 10 	call	0x201c	; 0x201c <turn_left>
    3006:	64 c0       	rjmp	.+200    	; 0x30d0 <drawTheShape+0x300>
		}
		else if(dataRcv[i][2] == 0 && dataRcv[i][1] > 3)
    3008:	2d 8d       	ldd	r18, Y+29	; 0x1d
    300a:	3e 8d       	ldd	r19, Y+30	; 0x1e
    300c:	c9 01       	movw	r24, r18
    300e:	88 0f       	add	r24, r24
    3010:	99 1f       	adc	r25, r25
    3012:	82 0f       	add	r24, r18
    3014:	93 1f       	adc	r25, r19
    3016:	88 0f       	add	r24, r24
    3018:	99 1f       	adc	r25, r25
    301a:	fc 01       	movw	r30, r24
    301c:	ec 54       	subi	r30, 0x4C	; 76
    301e:	fc 4f       	sbci	r31, 0xFC	; 252
    3020:	80 81       	ld	r24, Z
    3022:	91 81       	ldd	r25, Z+1	; 0x01
    3024:	00 97       	sbiw	r24, 0x00	; 0
    3026:	09 f0       	breq	.+2      	; 0x302a <drawTheShape+0x25a>
    3028:	40 c0       	rjmp	.+128    	; 0x30aa <drawTheShape+0x2da>
    302a:	2d 8d       	ldd	r18, Y+29	; 0x1d
    302c:	3e 8d       	ldd	r19, Y+30	; 0x1e
    302e:	c9 01       	movw	r24, r18
    3030:	88 0f       	add	r24, r24
    3032:	99 1f       	adc	r25, r25
    3034:	82 0f       	add	r24, r18
    3036:	93 1f       	adc	r25, r19
    3038:	88 0f       	add	r24, r24
    303a:	99 1f       	adc	r25, r25
    303c:	fc 01       	movw	r30, r24
    303e:	ee 54       	subi	r30, 0x4E	; 78
    3040:	fc 4f       	sbci	r31, 0xFC	; 252
    3042:	80 81       	ld	r24, Z
    3044:	91 81       	ldd	r25, Z+1	; 0x01
    3046:	84 30       	cpi	r24, 0x04	; 4
    3048:	91 05       	cpc	r25, r1
    304a:	7c f1       	brlt	.+94     	; 0x30aa <drawTheShape+0x2da>
		{// Right Turn if angle of turn is more than 3 degrees
			lcd_cursor(2,1);
    304c:	82 e0       	ldi	r24, 0x02	; 2
    304e:	61 e0       	ldi	r22, 0x01	; 1
    3050:	0e 94 21 09 	call	0x1242	; 0x1242 <lcd_cursor>
			lcd_string("Right            ");
    3054:	83 e3       	ldi	r24, 0x33	; 51
    3056:	92 e0       	ldi	r25, 0x02	; 2
    3058:	0e 94 04 09 	call	0x1208	; 0x1208 <lcd_string>
			lcd_print(2,7,dataRcv[i][1],3);
    305c:	2d 8d       	ldd	r18, Y+29	; 0x1d
    305e:	3e 8d       	ldd	r19, Y+30	; 0x1e
    3060:	c9 01       	movw	r24, r18
    3062:	88 0f       	add	r24, r24
    3064:	99 1f       	adc	r25, r25
    3066:	82 0f       	add	r24, r18
    3068:	93 1f       	adc	r25, r19
    306a:	88 0f       	add	r24, r24
    306c:	99 1f       	adc	r25, r25
    306e:	fc 01       	movw	r30, r24
    3070:	ee 54       	subi	r30, 0x4E	; 78
    3072:	fc 4f       	sbci	r31, 0xFC	; 252
    3074:	80 81       	ld	r24, Z
    3076:	91 81       	ldd	r25, Z+1	; 0x01
    3078:	9c 01       	movw	r18, r24
    307a:	82 e0       	ldi	r24, 0x02	; 2
    307c:	67 e0       	ldi	r22, 0x07	; 7
    307e:	a9 01       	movw	r20, r18
    3080:	23 e0       	ldi	r18, 0x03	; 3
    3082:	30 e0       	ldi	r19, 0x00	; 0
    3084:	0e 94 63 09 	call	0x12c6	; 0x12c6 <lcd_print>
			turn_right(dataRcv[i][1]);
    3088:	2d 8d       	ldd	r18, Y+29	; 0x1d
    308a:	3e 8d       	ldd	r19, Y+30	; 0x1e
    308c:	c9 01       	movw	r24, r18
    308e:	88 0f       	add	r24, r24
    3090:	99 1f       	adc	r25, r25
    3092:	82 0f       	add	r24, r18
    3094:	93 1f       	adc	r25, r19
    3096:	88 0f       	add	r24, r24
    3098:	99 1f       	adc	r25, r25
    309a:	fc 01       	movw	r30, r24
    309c:	ee 54       	subi	r30, 0x4E	; 78
    309e:	fc 4f       	sbci	r31, 0xFC	; 252
    30a0:	80 81       	ld	r24, Z
    30a2:	91 81       	ldd	r25, Z+1	; 0x01
    30a4:	0e 94 0b 12 	call	0x2416	; 0x2416 <turn_right>
    30a8:	13 c0       	rjmp	.+38     	; 0x30d0 <drawTheShape+0x300>
		}
		else if(dataRcv[i][2] == 2)
    30aa:	2d 8d       	ldd	r18, Y+29	; 0x1d
    30ac:	3e 8d       	ldd	r19, Y+30	; 0x1e
    30ae:	c9 01       	movw	r24, r18
    30b0:	88 0f       	add	r24, r24
    30b2:	99 1f       	adc	r25, r25
    30b4:	82 0f       	add	r24, r18
    30b6:	93 1f       	adc	r25, r19
    30b8:	88 0f       	add	r24, r24
    30ba:	99 1f       	adc	r25, r25
    30bc:	fc 01       	movw	r30, r24
    30be:	ec 54       	subi	r30, 0x4C	; 76
    30c0:	fc 4f       	sbci	r31, 0xFC	; 252
    30c2:	80 81       	ld	r24, Z
    30c4:	91 81       	ldd	r25, Z+1	; 0x01
    30c6:	82 30       	cpi	r24, 0x02	; 2
    30c8:	91 05       	cpc	r25, r1
    30ca:	11 f4       	brne	.+4      	; 0x30d0 <drawTheShape+0x300>
		{// Pull up the pen
			penUp();
    30cc:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <penUp>
    30d0:	80 e0       	ldi	r24, 0x00	; 0
    30d2:	90 e0       	ldi	r25, 0x00	; 0
    30d4:	a0 e2       	ldi	r26, 0x20	; 32
    30d6:	b1 e4       	ldi	r27, 0x41	; 65
    30d8:	8b 87       	std	Y+11, r24	; 0x0b
    30da:	9c 87       	std	Y+12, r25	; 0x0c
    30dc:	ad 87       	std	Y+13, r26	; 0x0d
    30de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    30e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    30e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    30e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    30e8:	2d ec       	ldi	r18, 0xCD	; 205
    30ea:	3c ec       	ldi	r19, 0xCC	; 204
    30ec:	4c e2       	ldi	r20, 0x2C	; 44
    30ee:	55 e4       	ldi	r21, 0x45	; 69
    30f0:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__mulsf3>
    30f4:	dc 01       	movw	r26, r24
    30f6:	cb 01       	movw	r24, r22
    30f8:	8f 83       	std	Y+7, r24	; 0x07
    30fa:	98 87       	std	Y+8, r25	; 0x08
    30fc:	a9 87       	std	Y+9, r26	; 0x09
    30fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3100:	6f 81       	ldd	r22, Y+7	; 0x07
    3102:	78 85       	ldd	r23, Y+8	; 0x08
    3104:	89 85       	ldd	r24, Y+9	; 0x09
    3106:	9a 85       	ldd	r25, Y+10	; 0x0a
    3108:	20 e0       	ldi	r18, 0x00	; 0
    310a:	30 e0       	ldi	r19, 0x00	; 0
    310c:	40 e8       	ldi	r20, 0x80	; 128
    310e:	5f e3       	ldi	r21, 0x3F	; 63
    3110:	0e 94 7f 1d 	call	0x3afe	; 0x3afe <__ltsf2>
    3114:	88 23       	and	r24, r24
    3116:	2c f4       	brge	.+10     	; 0x3122 <drawTheShape+0x352>
		__ticks = 1;
    3118:	81 e0       	ldi	r24, 0x01	; 1
    311a:	90 e0       	ldi	r25, 0x00	; 0
    311c:	9e 83       	std	Y+6, r25	; 0x06
    311e:	8d 83       	std	Y+5, r24	; 0x05
    3120:	3f c0       	rjmp	.+126    	; 0x31a0 <drawTheShape+0x3d0>
	else if (__tmp > 65535)
    3122:	6f 81       	ldd	r22, Y+7	; 0x07
    3124:	78 85       	ldd	r23, Y+8	; 0x08
    3126:	89 85       	ldd	r24, Y+9	; 0x09
    3128:	9a 85       	ldd	r25, Y+10	; 0x0a
    312a:	20 e0       	ldi	r18, 0x00	; 0
    312c:	3f ef       	ldi	r19, 0xFF	; 255
    312e:	4f e7       	ldi	r20, 0x7F	; 127
    3130:	57 e4       	ldi	r21, 0x47	; 71
    3132:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <__gtsf2>
    3136:	18 16       	cp	r1, r24
    3138:	4c f5       	brge	.+82     	; 0x318c <drawTheShape+0x3bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    313a:	6b 85       	ldd	r22, Y+11	; 0x0b
    313c:	7c 85       	ldd	r23, Y+12	; 0x0c
    313e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3140:	9e 85       	ldd	r25, Y+14	; 0x0e
    3142:	20 e0       	ldi	r18, 0x00	; 0
    3144:	30 e0       	ldi	r19, 0x00	; 0
    3146:	40 e2       	ldi	r20, 0x20	; 32
    3148:	51 e4       	ldi	r21, 0x41	; 65
    314a:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__mulsf3>
    314e:	dc 01       	movw	r26, r24
    3150:	cb 01       	movw	r24, r22
    3152:	bc 01       	movw	r22, r24
    3154:	cd 01       	movw	r24, r26
    3156:	0e 94 a3 19 	call	0x3346	; 0x3346 <__fixunssfsi>
    315a:	dc 01       	movw	r26, r24
    315c:	cb 01       	movw	r24, r22
    315e:	9e 83       	std	Y+6, r25	; 0x06
    3160:	8d 83       	std	Y+5, r24	; 0x05
    3162:	0f c0       	rjmp	.+30     	; 0x3182 <drawTheShape+0x3b2>
    3164:	84 e1       	ldi	r24, 0x14	; 20
    3166:	91 e0       	ldi	r25, 0x01	; 1
    3168:	9c 83       	std	Y+4, r25	; 0x04
    316a:	8b 83       	std	Y+3, r24	; 0x03
    316c:	8b 81       	ldd	r24, Y+3	; 0x03
    316e:	9c 81       	ldd	r25, Y+4	; 0x04
    3170:	01 97       	sbiw	r24, 0x01	; 1
    3172:	f1 f7       	brne	.-4      	; 0x3170 <drawTheShape+0x3a0>
    3174:	9c 83       	std	Y+4, r25	; 0x04
    3176:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3178:	8d 81       	ldd	r24, Y+5	; 0x05
    317a:	9e 81       	ldd	r25, Y+6	; 0x06
    317c:	01 97       	sbiw	r24, 0x01	; 1
    317e:	9e 83       	std	Y+6, r25	; 0x06
    3180:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3182:	8d 81       	ldd	r24, Y+5	; 0x05
    3184:	9e 81       	ldd	r25, Y+6	; 0x06
    3186:	00 97       	sbiw	r24, 0x00	; 0
    3188:	69 f7       	brne	.-38     	; 0x3164 <drawTheShape+0x394>
    318a:	14 c0       	rjmp	.+40     	; 0x31b4 <drawTheShape+0x3e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    318c:	6f 81       	ldd	r22, Y+7	; 0x07
    318e:	78 85       	ldd	r23, Y+8	; 0x08
    3190:	89 85       	ldd	r24, Y+9	; 0x09
    3192:	9a 85       	ldd	r25, Y+10	; 0x0a
    3194:	0e 94 a3 19 	call	0x3346	; 0x3346 <__fixunssfsi>
    3198:	dc 01       	movw	r26, r24
    319a:	cb 01       	movw	r24, r22
    319c:	9e 83       	std	Y+6, r25	; 0x06
    319e:	8d 83       	std	Y+5, r24	; 0x05
    31a0:	8d 81       	ldd	r24, Y+5	; 0x05
    31a2:	9e 81       	ldd	r25, Y+6	; 0x06
    31a4:	9a 83       	std	Y+2, r25	; 0x02
    31a6:	89 83       	std	Y+1, r24	; 0x01
    31a8:	89 81       	ldd	r24, Y+1	; 0x01
    31aa:	9a 81       	ldd	r25, Y+2	; 0x02
    31ac:	01 97       	sbiw	r24, 0x01	; 1
    31ae:	f1 f7       	brne	.-4      	; 0x31ac <drawTheShape+0x3dc>
    31b0:	9a 83       	std	Y+2, r25	; 0x02
    31b2:	89 83       	std	Y+1, r24	; 0x01
 */
void drawTheShape()
{
	int i;

	for(i=0;i<dataRcvCount;i++)
    31b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31b6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    31b8:	01 96       	adiw	r24, 0x01	; 1
    31ba:	9e 8f       	std	Y+30, r25	; 0x1e
    31bc:	8d 8f       	std	Y+29, r24	; 0x1d
    31be:	20 91 a6 03 	lds	r18, 0x03A6
    31c2:	30 91 a7 03 	lds	r19, 0x03A7
    31c6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31c8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    31ca:	82 17       	cp	r24, r18
    31cc:	93 07       	cpc	r25, r19
    31ce:	0c f4       	brge	.+2      	; 0x31d2 <drawTheShape+0x402>
    31d0:	0c ce       	rjmp	.-1000   	; 0x2dea <drawTheShape+0x1a>
		{// Pull up the pen
			penUp();
		}
		_delay_ms(10);	
	}
}
    31d2:	6e 96       	adiw	r28, 0x1e	; 30
    31d4:	0f b6       	in	r0, 0x3f	; 63
    31d6:	f8 94       	cli
    31d8:	de bf       	out	0x3e, r29	; 62
    31da:	0f be       	out	0x3f, r0	; 63
    31dc:	cd bf       	out	0x3d, r28	; 61
    31de:	cf 91       	pop	r28
    31e0:	df 91       	pop	r29
    31e2:	08 95       	ret

000031e4 <main>:

/**
 * The main method
 */
int main ()
{
    31e4:	df 93       	push	r29
    31e6:	cf 93       	push	r28
    31e8:	cd b7       	in	r28, 0x3d	; 61
    31ea:	de b7       	in	r29, 0x3e	; 62
    31ec:	2e 97       	sbiw	r28, 0x0e	; 14
    31ee:	0f b6       	in	r0, 0x3f	; 63
    31f0:	f8 94       	cli
    31f2:	de bf       	out	0x3e, r29	; 62
    31f4:	0f be       	out	0x3f, r0	; 63
    31f6:	cd bf       	out	0x3d, r28	; 61
	init_all();
    31f8:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <init_all>
	// Set servo pan
	servo_1(88);
    31fc:	88 e5       	ldi	r24, 0x58	; 88
    31fe:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <servo_1>
    3202:	80 e0       	ldi	r24, 0x00	; 0
    3204:	90 e0       	ldi	r25, 0x00	; 0
    3206:	a8 ec       	ldi	r26, 0xC8	; 200
    3208:	b2 e4       	ldi	r27, 0x42	; 66
    320a:	8b 87       	std	Y+11, r24	; 0x0b
    320c:	9c 87       	std	Y+12, r25	; 0x0c
    320e:	ad 87       	std	Y+13, r26	; 0x0d
    3210:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3212:	6b 85       	ldd	r22, Y+11	; 0x0b
    3214:	7c 85       	ldd	r23, Y+12	; 0x0c
    3216:	8d 85       	ldd	r24, Y+13	; 0x0d
    3218:	9e 85       	ldd	r25, Y+14	; 0x0e
    321a:	2d ec       	ldi	r18, 0xCD	; 205
    321c:	3c ec       	ldi	r19, 0xCC	; 204
    321e:	4c e2       	ldi	r20, 0x2C	; 44
    3220:	55 e4       	ldi	r21, 0x45	; 69
    3222:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__mulsf3>
    3226:	dc 01       	movw	r26, r24
    3228:	cb 01       	movw	r24, r22
    322a:	8f 83       	std	Y+7, r24	; 0x07
    322c:	98 87       	std	Y+8, r25	; 0x08
    322e:	a9 87       	std	Y+9, r26	; 0x09
    3230:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3232:	6f 81       	ldd	r22, Y+7	; 0x07
    3234:	78 85       	ldd	r23, Y+8	; 0x08
    3236:	89 85       	ldd	r24, Y+9	; 0x09
    3238:	9a 85       	ldd	r25, Y+10	; 0x0a
    323a:	20 e0       	ldi	r18, 0x00	; 0
    323c:	30 e0       	ldi	r19, 0x00	; 0
    323e:	40 e8       	ldi	r20, 0x80	; 128
    3240:	5f e3       	ldi	r21, 0x3F	; 63
    3242:	0e 94 7f 1d 	call	0x3afe	; 0x3afe <__ltsf2>
    3246:	88 23       	and	r24, r24
    3248:	2c f4       	brge	.+10     	; 0x3254 <main+0x70>
		__ticks = 1;
    324a:	81 e0       	ldi	r24, 0x01	; 1
    324c:	90 e0       	ldi	r25, 0x00	; 0
    324e:	9e 83       	std	Y+6, r25	; 0x06
    3250:	8d 83       	std	Y+5, r24	; 0x05
    3252:	3f c0       	rjmp	.+126    	; 0x32d2 <main+0xee>
	else if (__tmp > 65535)
    3254:	6f 81       	ldd	r22, Y+7	; 0x07
    3256:	78 85       	ldd	r23, Y+8	; 0x08
    3258:	89 85       	ldd	r24, Y+9	; 0x09
    325a:	9a 85       	ldd	r25, Y+10	; 0x0a
    325c:	20 e0       	ldi	r18, 0x00	; 0
    325e:	3f ef       	ldi	r19, 0xFF	; 255
    3260:	4f e7       	ldi	r20, 0x7F	; 127
    3262:	57 e4       	ldi	r21, 0x47	; 71
    3264:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <__gtsf2>
    3268:	18 16       	cp	r1, r24
    326a:	4c f5       	brge	.+82     	; 0x32be <main+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    326c:	6b 85       	ldd	r22, Y+11	; 0x0b
    326e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3270:	8d 85       	ldd	r24, Y+13	; 0x0d
    3272:	9e 85       	ldd	r25, Y+14	; 0x0e
    3274:	20 e0       	ldi	r18, 0x00	; 0
    3276:	30 e0       	ldi	r19, 0x00	; 0
    3278:	40 e2       	ldi	r20, 0x20	; 32
    327a:	51 e4       	ldi	r21, 0x41	; 65
    327c:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__mulsf3>
    3280:	dc 01       	movw	r26, r24
    3282:	cb 01       	movw	r24, r22
    3284:	bc 01       	movw	r22, r24
    3286:	cd 01       	movw	r24, r26
    3288:	0e 94 a3 19 	call	0x3346	; 0x3346 <__fixunssfsi>
    328c:	dc 01       	movw	r26, r24
    328e:	cb 01       	movw	r24, r22
    3290:	9e 83       	std	Y+6, r25	; 0x06
    3292:	8d 83       	std	Y+5, r24	; 0x05
    3294:	0f c0       	rjmp	.+30     	; 0x32b4 <main+0xd0>
    3296:	84 e1       	ldi	r24, 0x14	; 20
    3298:	91 e0       	ldi	r25, 0x01	; 1
    329a:	9c 83       	std	Y+4, r25	; 0x04
    329c:	8b 83       	std	Y+3, r24	; 0x03
    329e:	8b 81       	ldd	r24, Y+3	; 0x03
    32a0:	9c 81       	ldd	r25, Y+4	; 0x04
    32a2:	01 97       	sbiw	r24, 0x01	; 1
    32a4:	f1 f7       	brne	.-4      	; 0x32a2 <main+0xbe>
    32a6:	9c 83       	std	Y+4, r25	; 0x04
    32a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32aa:	8d 81       	ldd	r24, Y+5	; 0x05
    32ac:	9e 81       	ldd	r25, Y+6	; 0x06
    32ae:	01 97       	sbiw	r24, 0x01	; 1
    32b0:	9e 83       	std	Y+6, r25	; 0x06
    32b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32b4:	8d 81       	ldd	r24, Y+5	; 0x05
    32b6:	9e 81       	ldd	r25, Y+6	; 0x06
    32b8:	00 97       	sbiw	r24, 0x00	; 0
    32ba:	69 f7       	brne	.-38     	; 0x3296 <main+0xb2>
    32bc:	14 c0       	rjmp	.+40     	; 0x32e6 <main+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32be:	6f 81       	ldd	r22, Y+7	; 0x07
    32c0:	78 85       	ldd	r23, Y+8	; 0x08
    32c2:	89 85       	ldd	r24, Y+9	; 0x09
    32c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    32c6:	0e 94 a3 19 	call	0x3346	; 0x3346 <__fixunssfsi>
    32ca:	dc 01       	movw	r26, r24
    32cc:	cb 01       	movw	r24, r22
    32ce:	9e 83       	std	Y+6, r25	; 0x06
    32d0:	8d 83       	std	Y+5, r24	; 0x05
    32d2:	8d 81       	ldd	r24, Y+5	; 0x05
    32d4:	9e 81       	ldd	r25, Y+6	; 0x06
    32d6:	9a 83       	std	Y+2, r25	; 0x02
    32d8:	89 83       	std	Y+1, r24	; 0x01
    32da:	89 81       	ldd	r24, Y+1	; 0x01
    32dc:	9a 81       	ldd	r25, Y+2	; 0x02
    32de:	01 97       	sbiw	r24, 0x01	; 1
    32e0:	f1 f7       	brne	.-4      	; 0x32de <main+0xfa>
    32e2:	9a 83       	std	Y+2, r25	; 0x02
    32e4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
	penUp();
    32e6:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <penUp>
	
	flashDisplay("ERTS Lab Project",500);
    32ea:	85 e4       	ldi	r24, 0x45	; 69
    32ec:	92 e0       	ldi	r25, 0x02	; 2
    32ee:	64 ef       	ldi	r22, 0xF4	; 244
    32f0:	71 e0       	ldi	r23, 0x01	; 1
    32f2:	0e 94 42 15 	call	0x2a84	; 0x2a84 <flashDisplay>
	flashDisplay("Waiting for I/P",0);
    32f6:	86 e5       	ldi	r24, 0x56	; 86
    32f8:	92 e0       	ldi	r25, 0x02	; 2
    32fa:	60 e0       	ldi	r22, 0x00	; 0
    32fc:	70 e0       	ldi	r23, 0x00	; 0
    32fe:	0e 94 42 15 	call	0x2a84	; 0x2a84 <flashDisplay>

	// Wait for data receiving to finish
	 while(!startExec);
    3302:	80 91 aa 03 	lds	r24, 0x03AA
    3306:	90 91 ab 03 	lds	r25, 0x03AB
    330a:	00 97       	sbiw	r24, 0x00	; 0
    330c:	d1 f3       	breq	.-12     	; 0x3302 <main+0x11e>

	//displayRcvdData(100);
	
	flashDisplay("Remove Serial   ",0);
    330e:	86 e6       	ldi	r24, 0x66	; 102
    3310:	92 e0       	ldi	r25, 0x02	; 2
    3312:	60 e0       	ldi	r22, 0x00	; 0
    3314:	70 e0       	ldi	r23, 0x00	; 0
    3316:	0e 94 42 15 	call	0x2a84	; 0x2a84 <flashDisplay>
	while(PINE & 0x80);
    331a:	ec e2       	ldi	r30, 0x2C	; 44
    331c:	f0 e0       	ldi	r31, 0x00	; 0
    331e:	80 81       	ld	r24, Z
    3320:	88 23       	and	r24, r24
    3322:	dc f3       	brlt	.-10     	; 0x331a <main+0x136>
	flashDisplay("Starting to draw",1000);
    3324:	87 e7       	ldi	r24, 0x77	; 119
    3326:	92 e0       	ldi	r25, 0x02	; 2
    3328:	68 ee       	ldi	r22, 0xE8	; 232
    332a:	73 e0       	ldi	r23, 0x03	; 3
    332c:	0e 94 42 15 	call	0x2a84	; 0x2a84 <flashDisplay>

	//penDown();
	
	//Draw the shape
	drawTheShape();
    3330:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <drawTheShape>
	//forward(20);


	flashDisplay("Finished        ",0);
    3334:	88 e8       	ldi	r24, 0x88	; 136
    3336:	92 e0       	ldi	r25, 0x02	; 2
    3338:	60 e0       	ldi	r22, 0x00	; 0
    333a:	70 e0       	ldi	r23, 0x00	; 0
    333c:	0e 94 42 15 	call	0x2a84	; 0x2a84 <flashDisplay>

	penUp();
    3340:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <penUp>
    3344:	ff cf       	rjmp	.-2      	; 0x3344 <main+0x160>

00003346 <__fixunssfsi>:
    3346:	ef 92       	push	r14
    3348:	ff 92       	push	r15
    334a:	0f 93       	push	r16
    334c:	1f 93       	push	r17
    334e:	7b 01       	movw	r14, r22
    3350:	8c 01       	movw	r16, r24
    3352:	20 e0       	ldi	r18, 0x00	; 0
    3354:	30 e0       	ldi	r19, 0x00	; 0
    3356:	40 e0       	ldi	r20, 0x00	; 0
    3358:	5f e4       	ldi	r21, 0x4F	; 79
    335a:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <__gesf2>
    335e:	88 23       	and	r24, r24
    3360:	8c f0       	brlt	.+34     	; 0x3384 <__fixunssfsi+0x3e>
    3362:	c8 01       	movw	r24, r16
    3364:	b7 01       	movw	r22, r14
    3366:	20 e0       	ldi	r18, 0x00	; 0
    3368:	30 e0       	ldi	r19, 0x00	; 0
    336a:	40 e0       	ldi	r20, 0x00	; 0
    336c:	5f e4       	ldi	r21, 0x4F	; 79
    336e:	0e 94 1b 1b 	call	0x3636	; 0x3636 <__subsf3>
    3372:	0e 94 0d 1e 	call	0x3c1a	; 0x3c1a <__fixsfsi>
    3376:	9b 01       	movw	r18, r22
    3378:	ac 01       	movw	r20, r24
    337a:	20 50       	subi	r18, 0x00	; 0
    337c:	30 40       	sbci	r19, 0x00	; 0
    337e:	40 40       	sbci	r20, 0x00	; 0
    3380:	50 48       	sbci	r21, 0x80	; 128
    3382:	06 c0       	rjmp	.+12     	; 0x3390 <__fixunssfsi+0x4a>
    3384:	c8 01       	movw	r24, r16
    3386:	b7 01       	movw	r22, r14
    3388:	0e 94 0d 1e 	call	0x3c1a	; 0x3c1a <__fixsfsi>
    338c:	9b 01       	movw	r18, r22
    338e:	ac 01       	movw	r20, r24
    3390:	b9 01       	movw	r22, r18
    3392:	ca 01       	movw	r24, r20
    3394:	1f 91       	pop	r17
    3396:	0f 91       	pop	r16
    3398:	ff 90       	pop	r15
    339a:	ef 90       	pop	r14
    339c:	08 95       	ret

0000339e <_fpadd_parts>:
    339e:	a0 e0       	ldi	r26, 0x00	; 0
    33a0:	b0 e0       	ldi	r27, 0x00	; 0
    33a2:	e5 ed       	ldi	r30, 0xD5	; 213
    33a4:	f9 e1       	ldi	r31, 0x19	; 25
    33a6:	0c 94 e3 20 	jmp	0x41c6	; 0x41c6 <__prologue_saves__>
    33aa:	dc 01       	movw	r26, r24
    33ac:	2b 01       	movw	r4, r22
    33ae:	fa 01       	movw	r30, r20
    33b0:	9c 91       	ld	r25, X
    33b2:	92 30       	cpi	r25, 0x02	; 2
    33b4:	08 f4       	brcc	.+2      	; 0x33b8 <_fpadd_parts+0x1a>
    33b6:	39 c1       	rjmp	.+626    	; 0x362a <_fpadd_parts+0x28c>
    33b8:	eb 01       	movw	r28, r22
    33ba:	88 81       	ld	r24, Y
    33bc:	82 30       	cpi	r24, 0x02	; 2
    33be:	08 f4       	brcc	.+2      	; 0x33c2 <_fpadd_parts+0x24>
    33c0:	33 c1       	rjmp	.+614    	; 0x3628 <_fpadd_parts+0x28a>
    33c2:	94 30       	cpi	r25, 0x04	; 4
    33c4:	69 f4       	brne	.+26     	; 0x33e0 <_fpadd_parts+0x42>
    33c6:	84 30       	cpi	r24, 0x04	; 4
    33c8:	09 f0       	breq	.+2      	; 0x33cc <_fpadd_parts+0x2e>
    33ca:	2f c1       	rjmp	.+606    	; 0x362a <_fpadd_parts+0x28c>
    33cc:	11 96       	adiw	r26, 0x01	; 1
    33ce:	9c 91       	ld	r25, X
    33d0:	11 97       	sbiw	r26, 0x01	; 1
    33d2:	89 81       	ldd	r24, Y+1	; 0x01
    33d4:	98 17       	cp	r25, r24
    33d6:	09 f4       	brne	.+2      	; 0x33da <_fpadd_parts+0x3c>
    33d8:	28 c1       	rjmp	.+592    	; 0x362a <_fpadd_parts+0x28c>
    33da:	a9 e9       	ldi	r26, 0x99	; 153
    33dc:	b2 e0       	ldi	r27, 0x02	; 2
    33de:	25 c1       	rjmp	.+586    	; 0x362a <_fpadd_parts+0x28c>
    33e0:	84 30       	cpi	r24, 0x04	; 4
    33e2:	09 f4       	brne	.+2      	; 0x33e6 <_fpadd_parts+0x48>
    33e4:	21 c1       	rjmp	.+578    	; 0x3628 <_fpadd_parts+0x28a>
    33e6:	82 30       	cpi	r24, 0x02	; 2
    33e8:	a9 f4       	brne	.+42     	; 0x3414 <_fpadd_parts+0x76>
    33ea:	92 30       	cpi	r25, 0x02	; 2
    33ec:	09 f0       	breq	.+2      	; 0x33f0 <_fpadd_parts+0x52>
    33ee:	1d c1       	rjmp	.+570    	; 0x362a <_fpadd_parts+0x28c>
    33f0:	9a 01       	movw	r18, r20
    33f2:	ad 01       	movw	r20, r26
    33f4:	88 e0       	ldi	r24, 0x08	; 8
    33f6:	ea 01       	movw	r28, r20
    33f8:	09 90       	ld	r0, Y+
    33fa:	ae 01       	movw	r20, r28
    33fc:	e9 01       	movw	r28, r18
    33fe:	09 92       	st	Y+, r0
    3400:	9e 01       	movw	r18, r28
    3402:	81 50       	subi	r24, 0x01	; 1
    3404:	c1 f7       	brne	.-16     	; 0x33f6 <_fpadd_parts+0x58>
    3406:	e2 01       	movw	r28, r4
    3408:	89 81       	ldd	r24, Y+1	; 0x01
    340a:	11 96       	adiw	r26, 0x01	; 1
    340c:	9c 91       	ld	r25, X
    340e:	89 23       	and	r24, r25
    3410:	81 83       	std	Z+1, r24	; 0x01
    3412:	08 c1       	rjmp	.+528    	; 0x3624 <_fpadd_parts+0x286>
    3414:	92 30       	cpi	r25, 0x02	; 2
    3416:	09 f4       	brne	.+2      	; 0x341a <_fpadd_parts+0x7c>
    3418:	07 c1       	rjmp	.+526    	; 0x3628 <_fpadd_parts+0x28a>
    341a:	12 96       	adiw	r26, 0x02	; 2
    341c:	2d 90       	ld	r2, X+
    341e:	3c 90       	ld	r3, X
    3420:	13 97       	sbiw	r26, 0x03	; 3
    3422:	eb 01       	movw	r28, r22
    3424:	8a 81       	ldd	r24, Y+2	; 0x02
    3426:	9b 81       	ldd	r25, Y+3	; 0x03
    3428:	14 96       	adiw	r26, 0x04	; 4
    342a:	ad 90       	ld	r10, X+
    342c:	bd 90       	ld	r11, X+
    342e:	cd 90       	ld	r12, X+
    3430:	dc 90       	ld	r13, X
    3432:	17 97       	sbiw	r26, 0x07	; 7
    3434:	ec 80       	ldd	r14, Y+4	; 0x04
    3436:	fd 80       	ldd	r15, Y+5	; 0x05
    3438:	0e 81       	ldd	r16, Y+6	; 0x06
    343a:	1f 81       	ldd	r17, Y+7	; 0x07
    343c:	91 01       	movw	r18, r2
    343e:	28 1b       	sub	r18, r24
    3440:	39 0b       	sbc	r19, r25
    3442:	b9 01       	movw	r22, r18
    3444:	37 ff       	sbrs	r19, 7
    3446:	04 c0       	rjmp	.+8      	; 0x3450 <_fpadd_parts+0xb2>
    3448:	66 27       	eor	r22, r22
    344a:	77 27       	eor	r23, r23
    344c:	62 1b       	sub	r22, r18
    344e:	73 0b       	sbc	r23, r19
    3450:	60 32       	cpi	r22, 0x20	; 32
    3452:	71 05       	cpc	r23, r1
    3454:	0c f0       	brlt	.+2      	; 0x3458 <_fpadd_parts+0xba>
    3456:	61 c0       	rjmp	.+194    	; 0x351a <_fpadd_parts+0x17c>
    3458:	12 16       	cp	r1, r18
    345a:	13 06       	cpc	r1, r19
    345c:	6c f5       	brge	.+90     	; 0x34b8 <_fpadd_parts+0x11a>
    345e:	37 01       	movw	r6, r14
    3460:	48 01       	movw	r8, r16
    3462:	06 2e       	mov	r0, r22
    3464:	04 c0       	rjmp	.+8      	; 0x346e <_fpadd_parts+0xd0>
    3466:	96 94       	lsr	r9
    3468:	87 94       	ror	r8
    346a:	77 94       	ror	r7
    346c:	67 94       	ror	r6
    346e:	0a 94       	dec	r0
    3470:	d2 f7       	brpl	.-12     	; 0x3466 <_fpadd_parts+0xc8>
    3472:	21 e0       	ldi	r18, 0x01	; 1
    3474:	30 e0       	ldi	r19, 0x00	; 0
    3476:	40 e0       	ldi	r20, 0x00	; 0
    3478:	50 e0       	ldi	r21, 0x00	; 0
    347a:	04 c0       	rjmp	.+8      	; 0x3484 <_fpadd_parts+0xe6>
    347c:	22 0f       	add	r18, r18
    347e:	33 1f       	adc	r19, r19
    3480:	44 1f       	adc	r20, r20
    3482:	55 1f       	adc	r21, r21
    3484:	6a 95       	dec	r22
    3486:	d2 f7       	brpl	.-12     	; 0x347c <_fpadd_parts+0xde>
    3488:	21 50       	subi	r18, 0x01	; 1
    348a:	30 40       	sbci	r19, 0x00	; 0
    348c:	40 40       	sbci	r20, 0x00	; 0
    348e:	50 40       	sbci	r21, 0x00	; 0
    3490:	2e 21       	and	r18, r14
    3492:	3f 21       	and	r19, r15
    3494:	40 23       	and	r20, r16
    3496:	51 23       	and	r21, r17
    3498:	21 15       	cp	r18, r1
    349a:	31 05       	cpc	r19, r1
    349c:	41 05       	cpc	r20, r1
    349e:	51 05       	cpc	r21, r1
    34a0:	21 f0       	breq	.+8      	; 0x34aa <_fpadd_parts+0x10c>
    34a2:	21 e0       	ldi	r18, 0x01	; 1
    34a4:	30 e0       	ldi	r19, 0x00	; 0
    34a6:	40 e0       	ldi	r20, 0x00	; 0
    34a8:	50 e0       	ldi	r21, 0x00	; 0
    34aa:	79 01       	movw	r14, r18
    34ac:	8a 01       	movw	r16, r20
    34ae:	e6 28       	or	r14, r6
    34b0:	f7 28       	or	r15, r7
    34b2:	08 29       	or	r16, r8
    34b4:	19 29       	or	r17, r9
    34b6:	3c c0       	rjmp	.+120    	; 0x3530 <_fpadd_parts+0x192>
    34b8:	23 2b       	or	r18, r19
    34ba:	d1 f1       	breq	.+116    	; 0x3530 <_fpadd_parts+0x192>
    34bc:	26 0e       	add	r2, r22
    34be:	37 1e       	adc	r3, r23
    34c0:	35 01       	movw	r6, r10
    34c2:	46 01       	movw	r8, r12
    34c4:	06 2e       	mov	r0, r22
    34c6:	04 c0       	rjmp	.+8      	; 0x34d0 <_fpadd_parts+0x132>
    34c8:	96 94       	lsr	r9
    34ca:	87 94       	ror	r8
    34cc:	77 94       	ror	r7
    34ce:	67 94       	ror	r6
    34d0:	0a 94       	dec	r0
    34d2:	d2 f7       	brpl	.-12     	; 0x34c8 <_fpadd_parts+0x12a>
    34d4:	21 e0       	ldi	r18, 0x01	; 1
    34d6:	30 e0       	ldi	r19, 0x00	; 0
    34d8:	40 e0       	ldi	r20, 0x00	; 0
    34da:	50 e0       	ldi	r21, 0x00	; 0
    34dc:	04 c0       	rjmp	.+8      	; 0x34e6 <_fpadd_parts+0x148>
    34de:	22 0f       	add	r18, r18
    34e0:	33 1f       	adc	r19, r19
    34e2:	44 1f       	adc	r20, r20
    34e4:	55 1f       	adc	r21, r21
    34e6:	6a 95       	dec	r22
    34e8:	d2 f7       	brpl	.-12     	; 0x34de <_fpadd_parts+0x140>
    34ea:	21 50       	subi	r18, 0x01	; 1
    34ec:	30 40       	sbci	r19, 0x00	; 0
    34ee:	40 40       	sbci	r20, 0x00	; 0
    34f0:	50 40       	sbci	r21, 0x00	; 0
    34f2:	2a 21       	and	r18, r10
    34f4:	3b 21       	and	r19, r11
    34f6:	4c 21       	and	r20, r12
    34f8:	5d 21       	and	r21, r13
    34fa:	21 15       	cp	r18, r1
    34fc:	31 05       	cpc	r19, r1
    34fe:	41 05       	cpc	r20, r1
    3500:	51 05       	cpc	r21, r1
    3502:	21 f0       	breq	.+8      	; 0x350c <_fpadd_parts+0x16e>
    3504:	21 e0       	ldi	r18, 0x01	; 1
    3506:	30 e0       	ldi	r19, 0x00	; 0
    3508:	40 e0       	ldi	r20, 0x00	; 0
    350a:	50 e0       	ldi	r21, 0x00	; 0
    350c:	59 01       	movw	r10, r18
    350e:	6a 01       	movw	r12, r20
    3510:	a6 28       	or	r10, r6
    3512:	b7 28       	or	r11, r7
    3514:	c8 28       	or	r12, r8
    3516:	d9 28       	or	r13, r9
    3518:	0b c0       	rjmp	.+22     	; 0x3530 <_fpadd_parts+0x192>
    351a:	82 15       	cp	r24, r2
    351c:	93 05       	cpc	r25, r3
    351e:	2c f0       	brlt	.+10     	; 0x352a <_fpadd_parts+0x18c>
    3520:	1c 01       	movw	r2, r24
    3522:	aa 24       	eor	r10, r10
    3524:	bb 24       	eor	r11, r11
    3526:	65 01       	movw	r12, r10
    3528:	03 c0       	rjmp	.+6      	; 0x3530 <_fpadd_parts+0x192>
    352a:	ee 24       	eor	r14, r14
    352c:	ff 24       	eor	r15, r15
    352e:	87 01       	movw	r16, r14
    3530:	11 96       	adiw	r26, 0x01	; 1
    3532:	9c 91       	ld	r25, X
    3534:	d2 01       	movw	r26, r4
    3536:	11 96       	adiw	r26, 0x01	; 1
    3538:	8c 91       	ld	r24, X
    353a:	98 17       	cp	r25, r24
    353c:	09 f4       	brne	.+2      	; 0x3540 <_fpadd_parts+0x1a2>
    353e:	45 c0       	rjmp	.+138    	; 0x35ca <_fpadd_parts+0x22c>
    3540:	99 23       	and	r25, r25
    3542:	39 f0       	breq	.+14     	; 0x3552 <_fpadd_parts+0x1b4>
    3544:	a8 01       	movw	r20, r16
    3546:	97 01       	movw	r18, r14
    3548:	2a 19       	sub	r18, r10
    354a:	3b 09       	sbc	r19, r11
    354c:	4c 09       	sbc	r20, r12
    354e:	5d 09       	sbc	r21, r13
    3550:	06 c0       	rjmp	.+12     	; 0x355e <_fpadd_parts+0x1c0>
    3552:	a6 01       	movw	r20, r12
    3554:	95 01       	movw	r18, r10
    3556:	2e 19       	sub	r18, r14
    3558:	3f 09       	sbc	r19, r15
    355a:	40 0b       	sbc	r20, r16
    355c:	51 0b       	sbc	r21, r17
    355e:	57 fd       	sbrc	r21, 7
    3560:	08 c0       	rjmp	.+16     	; 0x3572 <_fpadd_parts+0x1d4>
    3562:	11 82       	std	Z+1, r1	; 0x01
    3564:	33 82       	std	Z+3, r3	; 0x03
    3566:	22 82       	std	Z+2, r2	; 0x02
    3568:	24 83       	std	Z+4, r18	; 0x04
    356a:	35 83       	std	Z+5, r19	; 0x05
    356c:	46 83       	std	Z+6, r20	; 0x06
    356e:	57 83       	std	Z+7, r21	; 0x07
    3570:	1d c0       	rjmp	.+58     	; 0x35ac <_fpadd_parts+0x20e>
    3572:	81 e0       	ldi	r24, 0x01	; 1
    3574:	81 83       	std	Z+1, r24	; 0x01
    3576:	33 82       	std	Z+3, r3	; 0x03
    3578:	22 82       	std	Z+2, r2	; 0x02
    357a:	88 27       	eor	r24, r24
    357c:	99 27       	eor	r25, r25
    357e:	dc 01       	movw	r26, r24
    3580:	82 1b       	sub	r24, r18
    3582:	93 0b       	sbc	r25, r19
    3584:	a4 0b       	sbc	r26, r20
    3586:	b5 0b       	sbc	r27, r21
    3588:	84 83       	std	Z+4, r24	; 0x04
    358a:	95 83       	std	Z+5, r25	; 0x05
    358c:	a6 83       	std	Z+6, r26	; 0x06
    358e:	b7 83       	std	Z+7, r27	; 0x07
    3590:	0d c0       	rjmp	.+26     	; 0x35ac <_fpadd_parts+0x20e>
    3592:	22 0f       	add	r18, r18
    3594:	33 1f       	adc	r19, r19
    3596:	44 1f       	adc	r20, r20
    3598:	55 1f       	adc	r21, r21
    359a:	24 83       	std	Z+4, r18	; 0x04
    359c:	35 83       	std	Z+5, r19	; 0x05
    359e:	46 83       	std	Z+6, r20	; 0x06
    35a0:	57 83       	std	Z+7, r21	; 0x07
    35a2:	82 81       	ldd	r24, Z+2	; 0x02
    35a4:	93 81       	ldd	r25, Z+3	; 0x03
    35a6:	01 97       	sbiw	r24, 0x01	; 1
    35a8:	93 83       	std	Z+3, r25	; 0x03
    35aa:	82 83       	std	Z+2, r24	; 0x02
    35ac:	24 81       	ldd	r18, Z+4	; 0x04
    35ae:	35 81       	ldd	r19, Z+5	; 0x05
    35b0:	46 81       	ldd	r20, Z+6	; 0x06
    35b2:	57 81       	ldd	r21, Z+7	; 0x07
    35b4:	da 01       	movw	r26, r20
    35b6:	c9 01       	movw	r24, r18
    35b8:	01 97       	sbiw	r24, 0x01	; 1
    35ba:	a1 09       	sbc	r26, r1
    35bc:	b1 09       	sbc	r27, r1
    35be:	8f 5f       	subi	r24, 0xFF	; 255
    35c0:	9f 4f       	sbci	r25, 0xFF	; 255
    35c2:	af 4f       	sbci	r26, 0xFF	; 255
    35c4:	bf 43       	sbci	r27, 0x3F	; 63
    35c6:	28 f3       	brcs	.-54     	; 0x3592 <_fpadd_parts+0x1f4>
    35c8:	0b c0       	rjmp	.+22     	; 0x35e0 <_fpadd_parts+0x242>
    35ca:	91 83       	std	Z+1, r25	; 0x01
    35cc:	33 82       	std	Z+3, r3	; 0x03
    35ce:	22 82       	std	Z+2, r2	; 0x02
    35d0:	ea 0c       	add	r14, r10
    35d2:	fb 1c       	adc	r15, r11
    35d4:	0c 1d       	adc	r16, r12
    35d6:	1d 1d       	adc	r17, r13
    35d8:	e4 82       	std	Z+4, r14	; 0x04
    35da:	f5 82       	std	Z+5, r15	; 0x05
    35dc:	06 83       	std	Z+6, r16	; 0x06
    35de:	17 83       	std	Z+7, r17	; 0x07
    35e0:	83 e0       	ldi	r24, 0x03	; 3
    35e2:	80 83       	st	Z, r24
    35e4:	24 81       	ldd	r18, Z+4	; 0x04
    35e6:	35 81       	ldd	r19, Z+5	; 0x05
    35e8:	46 81       	ldd	r20, Z+6	; 0x06
    35ea:	57 81       	ldd	r21, Z+7	; 0x07
    35ec:	57 ff       	sbrs	r21, 7
    35ee:	1a c0       	rjmp	.+52     	; 0x3624 <_fpadd_parts+0x286>
    35f0:	c9 01       	movw	r24, r18
    35f2:	aa 27       	eor	r26, r26
    35f4:	97 fd       	sbrc	r25, 7
    35f6:	a0 95       	com	r26
    35f8:	ba 2f       	mov	r27, r26
    35fa:	81 70       	andi	r24, 0x01	; 1
    35fc:	90 70       	andi	r25, 0x00	; 0
    35fe:	a0 70       	andi	r26, 0x00	; 0
    3600:	b0 70       	andi	r27, 0x00	; 0
    3602:	56 95       	lsr	r21
    3604:	47 95       	ror	r20
    3606:	37 95       	ror	r19
    3608:	27 95       	ror	r18
    360a:	82 2b       	or	r24, r18
    360c:	93 2b       	or	r25, r19
    360e:	a4 2b       	or	r26, r20
    3610:	b5 2b       	or	r27, r21
    3612:	84 83       	std	Z+4, r24	; 0x04
    3614:	95 83       	std	Z+5, r25	; 0x05
    3616:	a6 83       	std	Z+6, r26	; 0x06
    3618:	b7 83       	std	Z+7, r27	; 0x07
    361a:	82 81       	ldd	r24, Z+2	; 0x02
    361c:	93 81       	ldd	r25, Z+3	; 0x03
    361e:	01 96       	adiw	r24, 0x01	; 1
    3620:	93 83       	std	Z+3, r25	; 0x03
    3622:	82 83       	std	Z+2, r24	; 0x02
    3624:	df 01       	movw	r26, r30
    3626:	01 c0       	rjmp	.+2      	; 0x362a <_fpadd_parts+0x28c>
    3628:	d2 01       	movw	r26, r4
    362a:	cd 01       	movw	r24, r26
    362c:	cd b7       	in	r28, 0x3d	; 61
    362e:	de b7       	in	r29, 0x3e	; 62
    3630:	e2 e1       	ldi	r30, 0x12	; 18
    3632:	0c 94 ff 20 	jmp	0x41fe	; 0x41fe <__epilogue_restores__>

00003636 <__subsf3>:
    3636:	a0 e2       	ldi	r26, 0x20	; 32
    3638:	b0 e0       	ldi	r27, 0x00	; 0
    363a:	e1 e2       	ldi	r30, 0x21	; 33
    363c:	fb e1       	ldi	r31, 0x1B	; 27
    363e:	0c 94 ef 20 	jmp	0x41de	; 0x41de <__prologue_saves__+0x18>
    3642:	69 83       	std	Y+1, r22	; 0x01
    3644:	7a 83       	std	Y+2, r23	; 0x02
    3646:	8b 83       	std	Y+3, r24	; 0x03
    3648:	9c 83       	std	Y+4, r25	; 0x04
    364a:	2d 83       	std	Y+5, r18	; 0x05
    364c:	3e 83       	std	Y+6, r19	; 0x06
    364e:	4f 83       	std	Y+7, r20	; 0x07
    3650:	58 87       	std	Y+8, r21	; 0x08
    3652:	e9 e0       	ldi	r30, 0x09	; 9
    3654:	ee 2e       	mov	r14, r30
    3656:	f1 2c       	mov	r15, r1
    3658:	ec 0e       	add	r14, r28
    365a:	fd 1e       	adc	r15, r29
    365c:	ce 01       	movw	r24, r28
    365e:	01 96       	adiw	r24, 0x01	; 1
    3660:	b7 01       	movw	r22, r14
    3662:	0e 94 fe 1f 	call	0x3ffc	; 0x3ffc <__unpack_f>
    3666:	8e 01       	movw	r16, r28
    3668:	0f 5e       	subi	r16, 0xEF	; 239
    366a:	1f 4f       	sbci	r17, 0xFF	; 255
    366c:	ce 01       	movw	r24, r28
    366e:	05 96       	adiw	r24, 0x05	; 5
    3670:	b8 01       	movw	r22, r16
    3672:	0e 94 fe 1f 	call	0x3ffc	; 0x3ffc <__unpack_f>
    3676:	8a 89       	ldd	r24, Y+18	; 0x12
    3678:	91 e0       	ldi	r25, 0x01	; 1
    367a:	89 27       	eor	r24, r25
    367c:	8a 8b       	std	Y+18, r24	; 0x12
    367e:	c7 01       	movw	r24, r14
    3680:	b8 01       	movw	r22, r16
    3682:	ae 01       	movw	r20, r28
    3684:	47 5e       	subi	r20, 0xE7	; 231
    3686:	5f 4f       	sbci	r21, 0xFF	; 255
    3688:	0e 94 cf 19 	call	0x339e	; 0x339e <_fpadd_parts>
    368c:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <__pack_f>
    3690:	a0 96       	adiw	r28, 0x20	; 32
    3692:	e6 e0       	ldi	r30, 0x06	; 6
    3694:	0c 94 0b 21 	jmp	0x4216	; 0x4216 <__epilogue_restores__+0x18>

00003698 <__addsf3>:
    3698:	a0 e2       	ldi	r26, 0x20	; 32
    369a:	b0 e0       	ldi	r27, 0x00	; 0
    369c:	e2 e5       	ldi	r30, 0x52	; 82
    369e:	fb e1       	ldi	r31, 0x1B	; 27
    36a0:	0c 94 ef 20 	jmp	0x41de	; 0x41de <__prologue_saves__+0x18>
    36a4:	69 83       	std	Y+1, r22	; 0x01
    36a6:	7a 83       	std	Y+2, r23	; 0x02
    36a8:	8b 83       	std	Y+3, r24	; 0x03
    36aa:	9c 83       	std	Y+4, r25	; 0x04
    36ac:	2d 83       	std	Y+5, r18	; 0x05
    36ae:	3e 83       	std	Y+6, r19	; 0x06
    36b0:	4f 83       	std	Y+7, r20	; 0x07
    36b2:	58 87       	std	Y+8, r21	; 0x08
    36b4:	f9 e0       	ldi	r31, 0x09	; 9
    36b6:	ef 2e       	mov	r14, r31
    36b8:	f1 2c       	mov	r15, r1
    36ba:	ec 0e       	add	r14, r28
    36bc:	fd 1e       	adc	r15, r29
    36be:	ce 01       	movw	r24, r28
    36c0:	01 96       	adiw	r24, 0x01	; 1
    36c2:	b7 01       	movw	r22, r14
    36c4:	0e 94 fe 1f 	call	0x3ffc	; 0x3ffc <__unpack_f>
    36c8:	8e 01       	movw	r16, r28
    36ca:	0f 5e       	subi	r16, 0xEF	; 239
    36cc:	1f 4f       	sbci	r17, 0xFF	; 255
    36ce:	ce 01       	movw	r24, r28
    36d0:	05 96       	adiw	r24, 0x05	; 5
    36d2:	b8 01       	movw	r22, r16
    36d4:	0e 94 fe 1f 	call	0x3ffc	; 0x3ffc <__unpack_f>
    36d8:	c7 01       	movw	r24, r14
    36da:	b8 01       	movw	r22, r16
    36dc:	ae 01       	movw	r20, r28
    36de:	47 5e       	subi	r20, 0xE7	; 231
    36e0:	5f 4f       	sbci	r21, 0xFF	; 255
    36e2:	0e 94 cf 19 	call	0x339e	; 0x339e <_fpadd_parts>
    36e6:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <__pack_f>
    36ea:	a0 96       	adiw	r28, 0x20	; 32
    36ec:	e6 e0       	ldi	r30, 0x06	; 6
    36ee:	0c 94 0b 21 	jmp	0x4216	; 0x4216 <__epilogue_restores__+0x18>

000036f2 <__mulsf3>:
    36f2:	a0 e2       	ldi	r26, 0x20	; 32
    36f4:	b0 e0       	ldi	r27, 0x00	; 0
    36f6:	ef e7       	ldi	r30, 0x7F	; 127
    36f8:	fb e1       	ldi	r31, 0x1B	; 27
    36fa:	0c 94 e3 20 	jmp	0x41c6	; 0x41c6 <__prologue_saves__>
    36fe:	69 83       	std	Y+1, r22	; 0x01
    3700:	7a 83       	std	Y+2, r23	; 0x02
    3702:	8b 83       	std	Y+3, r24	; 0x03
    3704:	9c 83       	std	Y+4, r25	; 0x04
    3706:	2d 83       	std	Y+5, r18	; 0x05
    3708:	3e 83       	std	Y+6, r19	; 0x06
    370a:	4f 83       	std	Y+7, r20	; 0x07
    370c:	58 87       	std	Y+8, r21	; 0x08
    370e:	ce 01       	movw	r24, r28
    3710:	01 96       	adiw	r24, 0x01	; 1
    3712:	be 01       	movw	r22, r28
    3714:	67 5f       	subi	r22, 0xF7	; 247
    3716:	7f 4f       	sbci	r23, 0xFF	; 255
    3718:	0e 94 fe 1f 	call	0x3ffc	; 0x3ffc <__unpack_f>
    371c:	ce 01       	movw	r24, r28
    371e:	05 96       	adiw	r24, 0x05	; 5
    3720:	be 01       	movw	r22, r28
    3722:	6f 5e       	subi	r22, 0xEF	; 239
    3724:	7f 4f       	sbci	r23, 0xFF	; 255
    3726:	0e 94 fe 1f 	call	0x3ffc	; 0x3ffc <__unpack_f>
    372a:	99 85       	ldd	r25, Y+9	; 0x09
    372c:	92 30       	cpi	r25, 0x02	; 2
    372e:	88 f0       	brcs	.+34     	; 0x3752 <__mulsf3+0x60>
    3730:	89 89       	ldd	r24, Y+17	; 0x11
    3732:	82 30       	cpi	r24, 0x02	; 2
    3734:	c8 f0       	brcs	.+50     	; 0x3768 <__mulsf3+0x76>
    3736:	94 30       	cpi	r25, 0x04	; 4
    3738:	19 f4       	brne	.+6      	; 0x3740 <__mulsf3+0x4e>
    373a:	82 30       	cpi	r24, 0x02	; 2
    373c:	51 f4       	brne	.+20     	; 0x3752 <__mulsf3+0x60>
    373e:	04 c0       	rjmp	.+8      	; 0x3748 <__mulsf3+0x56>
    3740:	84 30       	cpi	r24, 0x04	; 4
    3742:	29 f4       	brne	.+10     	; 0x374e <__mulsf3+0x5c>
    3744:	92 30       	cpi	r25, 0x02	; 2
    3746:	81 f4       	brne	.+32     	; 0x3768 <__mulsf3+0x76>
    3748:	89 e9       	ldi	r24, 0x99	; 153
    374a:	92 e0       	ldi	r25, 0x02	; 2
    374c:	c6 c0       	rjmp	.+396    	; 0x38da <__mulsf3+0x1e8>
    374e:	92 30       	cpi	r25, 0x02	; 2
    3750:	49 f4       	brne	.+18     	; 0x3764 <__mulsf3+0x72>
    3752:	20 e0       	ldi	r18, 0x00	; 0
    3754:	9a 85       	ldd	r25, Y+10	; 0x0a
    3756:	8a 89       	ldd	r24, Y+18	; 0x12
    3758:	98 13       	cpse	r25, r24
    375a:	21 e0       	ldi	r18, 0x01	; 1
    375c:	2a 87       	std	Y+10, r18	; 0x0a
    375e:	ce 01       	movw	r24, r28
    3760:	09 96       	adiw	r24, 0x09	; 9
    3762:	bb c0       	rjmp	.+374    	; 0x38da <__mulsf3+0x1e8>
    3764:	82 30       	cpi	r24, 0x02	; 2
    3766:	49 f4       	brne	.+18     	; 0x377a <__mulsf3+0x88>
    3768:	20 e0       	ldi	r18, 0x00	; 0
    376a:	9a 85       	ldd	r25, Y+10	; 0x0a
    376c:	8a 89       	ldd	r24, Y+18	; 0x12
    376e:	98 13       	cpse	r25, r24
    3770:	21 e0       	ldi	r18, 0x01	; 1
    3772:	2a 8b       	std	Y+18, r18	; 0x12
    3774:	ce 01       	movw	r24, r28
    3776:	41 96       	adiw	r24, 0x11	; 17
    3778:	b0 c0       	rjmp	.+352    	; 0x38da <__mulsf3+0x1e8>
    377a:	2d 84       	ldd	r2, Y+13	; 0x0d
    377c:	3e 84       	ldd	r3, Y+14	; 0x0e
    377e:	4f 84       	ldd	r4, Y+15	; 0x0f
    3780:	58 88       	ldd	r5, Y+16	; 0x10
    3782:	6d 88       	ldd	r6, Y+21	; 0x15
    3784:	7e 88       	ldd	r7, Y+22	; 0x16
    3786:	8f 88       	ldd	r8, Y+23	; 0x17
    3788:	98 8c       	ldd	r9, Y+24	; 0x18
    378a:	ee 24       	eor	r14, r14
    378c:	ff 24       	eor	r15, r15
    378e:	87 01       	movw	r16, r14
    3790:	aa 24       	eor	r10, r10
    3792:	bb 24       	eor	r11, r11
    3794:	65 01       	movw	r12, r10
    3796:	40 e0       	ldi	r20, 0x00	; 0
    3798:	50 e0       	ldi	r21, 0x00	; 0
    379a:	60 e0       	ldi	r22, 0x00	; 0
    379c:	70 e0       	ldi	r23, 0x00	; 0
    379e:	e0 e0       	ldi	r30, 0x00	; 0
    37a0:	f0 e0       	ldi	r31, 0x00	; 0
    37a2:	c1 01       	movw	r24, r2
    37a4:	81 70       	andi	r24, 0x01	; 1
    37a6:	90 70       	andi	r25, 0x00	; 0
    37a8:	89 2b       	or	r24, r25
    37aa:	e9 f0       	breq	.+58     	; 0x37e6 <__mulsf3+0xf4>
    37ac:	e6 0c       	add	r14, r6
    37ae:	f7 1c       	adc	r15, r7
    37b0:	08 1d       	adc	r16, r8
    37b2:	19 1d       	adc	r17, r9
    37b4:	9a 01       	movw	r18, r20
    37b6:	ab 01       	movw	r20, r22
    37b8:	2a 0d       	add	r18, r10
    37ba:	3b 1d       	adc	r19, r11
    37bc:	4c 1d       	adc	r20, r12
    37be:	5d 1d       	adc	r21, r13
    37c0:	80 e0       	ldi	r24, 0x00	; 0
    37c2:	90 e0       	ldi	r25, 0x00	; 0
    37c4:	a0 e0       	ldi	r26, 0x00	; 0
    37c6:	b0 e0       	ldi	r27, 0x00	; 0
    37c8:	e6 14       	cp	r14, r6
    37ca:	f7 04       	cpc	r15, r7
    37cc:	08 05       	cpc	r16, r8
    37ce:	19 05       	cpc	r17, r9
    37d0:	20 f4       	brcc	.+8      	; 0x37da <__mulsf3+0xe8>
    37d2:	81 e0       	ldi	r24, 0x01	; 1
    37d4:	90 e0       	ldi	r25, 0x00	; 0
    37d6:	a0 e0       	ldi	r26, 0x00	; 0
    37d8:	b0 e0       	ldi	r27, 0x00	; 0
    37da:	ba 01       	movw	r22, r20
    37dc:	a9 01       	movw	r20, r18
    37de:	48 0f       	add	r20, r24
    37e0:	59 1f       	adc	r21, r25
    37e2:	6a 1f       	adc	r22, r26
    37e4:	7b 1f       	adc	r23, r27
    37e6:	aa 0c       	add	r10, r10
    37e8:	bb 1c       	adc	r11, r11
    37ea:	cc 1c       	adc	r12, r12
    37ec:	dd 1c       	adc	r13, r13
    37ee:	97 fe       	sbrs	r9, 7
    37f0:	08 c0       	rjmp	.+16     	; 0x3802 <__mulsf3+0x110>
    37f2:	81 e0       	ldi	r24, 0x01	; 1
    37f4:	90 e0       	ldi	r25, 0x00	; 0
    37f6:	a0 e0       	ldi	r26, 0x00	; 0
    37f8:	b0 e0       	ldi	r27, 0x00	; 0
    37fa:	a8 2a       	or	r10, r24
    37fc:	b9 2a       	or	r11, r25
    37fe:	ca 2a       	or	r12, r26
    3800:	db 2a       	or	r13, r27
    3802:	31 96       	adiw	r30, 0x01	; 1
    3804:	e0 32       	cpi	r30, 0x20	; 32
    3806:	f1 05       	cpc	r31, r1
    3808:	49 f0       	breq	.+18     	; 0x381c <__mulsf3+0x12a>
    380a:	66 0c       	add	r6, r6
    380c:	77 1c       	adc	r7, r7
    380e:	88 1c       	adc	r8, r8
    3810:	99 1c       	adc	r9, r9
    3812:	56 94       	lsr	r5
    3814:	47 94       	ror	r4
    3816:	37 94       	ror	r3
    3818:	27 94       	ror	r2
    381a:	c3 cf       	rjmp	.-122    	; 0x37a2 <__mulsf3+0xb0>
    381c:	fa 85       	ldd	r31, Y+10	; 0x0a
    381e:	ea 89       	ldd	r30, Y+18	; 0x12
    3820:	2b 89       	ldd	r18, Y+19	; 0x13
    3822:	3c 89       	ldd	r19, Y+20	; 0x14
    3824:	8b 85       	ldd	r24, Y+11	; 0x0b
    3826:	9c 85       	ldd	r25, Y+12	; 0x0c
    3828:	28 0f       	add	r18, r24
    382a:	39 1f       	adc	r19, r25
    382c:	2e 5f       	subi	r18, 0xFE	; 254
    382e:	3f 4f       	sbci	r19, 0xFF	; 255
    3830:	17 c0       	rjmp	.+46     	; 0x3860 <__mulsf3+0x16e>
    3832:	ca 01       	movw	r24, r20
    3834:	81 70       	andi	r24, 0x01	; 1
    3836:	90 70       	andi	r25, 0x00	; 0
    3838:	89 2b       	or	r24, r25
    383a:	61 f0       	breq	.+24     	; 0x3854 <__mulsf3+0x162>
    383c:	16 95       	lsr	r17
    383e:	07 95       	ror	r16
    3840:	f7 94       	ror	r15
    3842:	e7 94       	ror	r14
    3844:	80 e0       	ldi	r24, 0x00	; 0
    3846:	90 e0       	ldi	r25, 0x00	; 0
    3848:	a0 e0       	ldi	r26, 0x00	; 0
    384a:	b0 e8       	ldi	r27, 0x80	; 128
    384c:	e8 2a       	or	r14, r24
    384e:	f9 2a       	or	r15, r25
    3850:	0a 2b       	or	r16, r26
    3852:	1b 2b       	or	r17, r27
    3854:	76 95       	lsr	r23
    3856:	67 95       	ror	r22
    3858:	57 95       	ror	r21
    385a:	47 95       	ror	r20
    385c:	2f 5f       	subi	r18, 0xFF	; 255
    385e:	3f 4f       	sbci	r19, 0xFF	; 255
    3860:	77 fd       	sbrc	r23, 7
    3862:	e7 cf       	rjmp	.-50     	; 0x3832 <__mulsf3+0x140>
    3864:	0c c0       	rjmp	.+24     	; 0x387e <__mulsf3+0x18c>
    3866:	44 0f       	add	r20, r20
    3868:	55 1f       	adc	r21, r21
    386a:	66 1f       	adc	r22, r22
    386c:	77 1f       	adc	r23, r23
    386e:	17 fd       	sbrc	r17, 7
    3870:	41 60       	ori	r20, 0x01	; 1
    3872:	ee 0c       	add	r14, r14
    3874:	ff 1c       	adc	r15, r15
    3876:	00 1f       	adc	r16, r16
    3878:	11 1f       	adc	r17, r17
    387a:	21 50       	subi	r18, 0x01	; 1
    387c:	30 40       	sbci	r19, 0x00	; 0
    387e:	40 30       	cpi	r20, 0x00	; 0
    3880:	90 e0       	ldi	r25, 0x00	; 0
    3882:	59 07       	cpc	r21, r25
    3884:	90 e0       	ldi	r25, 0x00	; 0
    3886:	69 07       	cpc	r22, r25
    3888:	90 e4       	ldi	r25, 0x40	; 64
    388a:	79 07       	cpc	r23, r25
    388c:	60 f3       	brcs	.-40     	; 0x3866 <__mulsf3+0x174>
    388e:	2b 8f       	std	Y+27, r18	; 0x1b
    3890:	3c 8f       	std	Y+28, r19	; 0x1c
    3892:	db 01       	movw	r26, r22
    3894:	ca 01       	movw	r24, r20
    3896:	8f 77       	andi	r24, 0x7F	; 127
    3898:	90 70       	andi	r25, 0x00	; 0
    389a:	a0 70       	andi	r26, 0x00	; 0
    389c:	b0 70       	andi	r27, 0x00	; 0
    389e:	80 34       	cpi	r24, 0x40	; 64
    38a0:	91 05       	cpc	r25, r1
    38a2:	a1 05       	cpc	r26, r1
    38a4:	b1 05       	cpc	r27, r1
    38a6:	61 f4       	brne	.+24     	; 0x38c0 <__mulsf3+0x1ce>
    38a8:	47 fd       	sbrc	r20, 7
    38aa:	0a c0       	rjmp	.+20     	; 0x38c0 <__mulsf3+0x1ce>
    38ac:	e1 14       	cp	r14, r1
    38ae:	f1 04       	cpc	r15, r1
    38b0:	01 05       	cpc	r16, r1
    38b2:	11 05       	cpc	r17, r1
    38b4:	29 f0       	breq	.+10     	; 0x38c0 <__mulsf3+0x1ce>
    38b6:	40 5c       	subi	r20, 0xC0	; 192
    38b8:	5f 4f       	sbci	r21, 0xFF	; 255
    38ba:	6f 4f       	sbci	r22, 0xFF	; 255
    38bc:	7f 4f       	sbci	r23, 0xFF	; 255
    38be:	40 78       	andi	r20, 0x80	; 128
    38c0:	1a 8e       	std	Y+26, r1	; 0x1a
    38c2:	fe 17       	cp	r31, r30
    38c4:	11 f0       	breq	.+4      	; 0x38ca <__mulsf3+0x1d8>
    38c6:	81 e0       	ldi	r24, 0x01	; 1
    38c8:	8a 8f       	std	Y+26, r24	; 0x1a
    38ca:	4d 8f       	std	Y+29, r20	; 0x1d
    38cc:	5e 8f       	std	Y+30, r21	; 0x1e
    38ce:	6f 8f       	std	Y+31, r22	; 0x1f
    38d0:	78 a3       	std	Y+32, r23	; 0x20
    38d2:	83 e0       	ldi	r24, 0x03	; 3
    38d4:	89 8f       	std	Y+25, r24	; 0x19
    38d6:	ce 01       	movw	r24, r28
    38d8:	49 96       	adiw	r24, 0x19	; 25
    38da:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <__pack_f>
    38de:	a0 96       	adiw	r28, 0x20	; 32
    38e0:	e2 e1       	ldi	r30, 0x12	; 18
    38e2:	0c 94 ff 20 	jmp	0x41fe	; 0x41fe <__epilogue_restores__>

000038e6 <__divsf3>:
    38e6:	a8 e1       	ldi	r26, 0x18	; 24
    38e8:	b0 e0       	ldi	r27, 0x00	; 0
    38ea:	e9 e7       	ldi	r30, 0x79	; 121
    38ec:	fc e1       	ldi	r31, 0x1C	; 28
    38ee:	0c 94 eb 20 	jmp	0x41d6	; 0x41d6 <__prologue_saves__+0x10>
    38f2:	69 83       	std	Y+1, r22	; 0x01
    38f4:	7a 83       	std	Y+2, r23	; 0x02
    38f6:	8b 83       	std	Y+3, r24	; 0x03
    38f8:	9c 83       	std	Y+4, r25	; 0x04
    38fa:	2d 83       	std	Y+5, r18	; 0x05
    38fc:	3e 83       	std	Y+6, r19	; 0x06
    38fe:	4f 83       	std	Y+7, r20	; 0x07
    3900:	58 87       	std	Y+8, r21	; 0x08
    3902:	b9 e0       	ldi	r27, 0x09	; 9
    3904:	eb 2e       	mov	r14, r27
    3906:	f1 2c       	mov	r15, r1
    3908:	ec 0e       	add	r14, r28
    390a:	fd 1e       	adc	r15, r29
    390c:	ce 01       	movw	r24, r28
    390e:	01 96       	adiw	r24, 0x01	; 1
    3910:	b7 01       	movw	r22, r14
    3912:	0e 94 fe 1f 	call	0x3ffc	; 0x3ffc <__unpack_f>
    3916:	8e 01       	movw	r16, r28
    3918:	0f 5e       	subi	r16, 0xEF	; 239
    391a:	1f 4f       	sbci	r17, 0xFF	; 255
    391c:	ce 01       	movw	r24, r28
    391e:	05 96       	adiw	r24, 0x05	; 5
    3920:	b8 01       	movw	r22, r16
    3922:	0e 94 fe 1f 	call	0x3ffc	; 0x3ffc <__unpack_f>
    3926:	29 85       	ldd	r18, Y+9	; 0x09
    3928:	22 30       	cpi	r18, 0x02	; 2
    392a:	08 f4       	brcc	.+2      	; 0x392e <__divsf3+0x48>
    392c:	7e c0       	rjmp	.+252    	; 0x3a2a <__divsf3+0x144>
    392e:	39 89       	ldd	r19, Y+17	; 0x11
    3930:	32 30       	cpi	r19, 0x02	; 2
    3932:	10 f4       	brcc	.+4      	; 0x3938 <__divsf3+0x52>
    3934:	b8 01       	movw	r22, r16
    3936:	7c c0       	rjmp	.+248    	; 0x3a30 <__divsf3+0x14a>
    3938:	8a 85       	ldd	r24, Y+10	; 0x0a
    393a:	9a 89       	ldd	r25, Y+18	; 0x12
    393c:	89 27       	eor	r24, r25
    393e:	8a 87       	std	Y+10, r24	; 0x0a
    3940:	24 30       	cpi	r18, 0x04	; 4
    3942:	11 f0       	breq	.+4      	; 0x3948 <__divsf3+0x62>
    3944:	22 30       	cpi	r18, 0x02	; 2
    3946:	31 f4       	brne	.+12     	; 0x3954 <__divsf3+0x6e>
    3948:	23 17       	cp	r18, r19
    394a:	09 f0       	breq	.+2      	; 0x394e <__divsf3+0x68>
    394c:	6e c0       	rjmp	.+220    	; 0x3a2a <__divsf3+0x144>
    394e:	69 e9       	ldi	r22, 0x99	; 153
    3950:	72 e0       	ldi	r23, 0x02	; 2
    3952:	6e c0       	rjmp	.+220    	; 0x3a30 <__divsf3+0x14a>
    3954:	34 30       	cpi	r19, 0x04	; 4
    3956:	39 f4       	brne	.+14     	; 0x3966 <__divsf3+0x80>
    3958:	1d 86       	std	Y+13, r1	; 0x0d
    395a:	1e 86       	std	Y+14, r1	; 0x0e
    395c:	1f 86       	std	Y+15, r1	; 0x0f
    395e:	18 8a       	std	Y+16, r1	; 0x10
    3960:	1c 86       	std	Y+12, r1	; 0x0c
    3962:	1b 86       	std	Y+11, r1	; 0x0b
    3964:	04 c0       	rjmp	.+8      	; 0x396e <__divsf3+0x88>
    3966:	32 30       	cpi	r19, 0x02	; 2
    3968:	21 f4       	brne	.+8      	; 0x3972 <__divsf3+0x8c>
    396a:	84 e0       	ldi	r24, 0x04	; 4
    396c:	89 87       	std	Y+9, r24	; 0x09
    396e:	b7 01       	movw	r22, r14
    3970:	5f c0       	rjmp	.+190    	; 0x3a30 <__divsf3+0x14a>
    3972:	2b 85       	ldd	r18, Y+11	; 0x0b
    3974:	3c 85       	ldd	r19, Y+12	; 0x0c
    3976:	8b 89       	ldd	r24, Y+19	; 0x13
    3978:	9c 89       	ldd	r25, Y+20	; 0x14
    397a:	28 1b       	sub	r18, r24
    397c:	39 0b       	sbc	r19, r25
    397e:	3c 87       	std	Y+12, r19	; 0x0c
    3980:	2b 87       	std	Y+11, r18	; 0x0b
    3982:	ed 84       	ldd	r14, Y+13	; 0x0d
    3984:	fe 84       	ldd	r15, Y+14	; 0x0e
    3986:	0f 85       	ldd	r16, Y+15	; 0x0f
    3988:	18 89       	ldd	r17, Y+16	; 0x10
    398a:	ad 88       	ldd	r10, Y+21	; 0x15
    398c:	be 88       	ldd	r11, Y+22	; 0x16
    398e:	cf 88       	ldd	r12, Y+23	; 0x17
    3990:	d8 8c       	ldd	r13, Y+24	; 0x18
    3992:	ea 14       	cp	r14, r10
    3994:	fb 04       	cpc	r15, r11
    3996:	0c 05       	cpc	r16, r12
    3998:	1d 05       	cpc	r17, r13
    399a:	40 f4       	brcc	.+16     	; 0x39ac <__divsf3+0xc6>
    399c:	ee 0c       	add	r14, r14
    399e:	ff 1c       	adc	r15, r15
    39a0:	00 1f       	adc	r16, r16
    39a2:	11 1f       	adc	r17, r17
    39a4:	21 50       	subi	r18, 0x01	; 1
    39a6:	30 40       	sbci	r19, 0x00	; 0
    39a8:	3c 87       	std	Y+12, r19	; 0x0c
    39aa:	2b 87       	std	Y+11, r18	; 0x0b
    39ac:	20 e0       	ldi	r18, 0x00	; 0
    39ae:	30 e0       	ldi	r19, 0x00	; 0
    39b0:	40 e0       	ldi	r20, 0x00	; 0
    39b2:	50 e0       	ldi	r21, 0x00	; 0
    39b4:	80 e0       	ldi	r24, 0x00	; 0
    39b6:	90 e0       	ldi	r25, 0x00	; 0
    39b8:	a0 e0       	ldi	r26, 0x00	; 0
    39ba:	b0 e4       	ldi	r27, 0x40	; 64
    39bc:	60 e0       	ldi	r22, 0x00	; 0
    39be:	70 e0       	ldi	r23, 0x00	; 0
    39c0:	ea 14       	cp	r14, r10
    39c2:	fb 04       	cpc	r15, r11
    39c4:	0c 05       	cpc	r16, r12
    39c6:	1d 05       	cpc	r17, r13
    39c8:	40 f0       	brcs	.+16     	; 0x39da <__divsf3+0xf4>
    39ca:	28 2b       	or	r18, r24
    39cc:	39 2b       	or	r19, r25
    39ce:	4a 2b       	or	r20, r26
    39d0:	5b 2b       	or	r21, r27
    39d2:	ea 18       	sub	r14, r10
    39d4:	fb 08       	sbc	r15, r11
    39d6:	0c 09       	sbc	r16, r12
    39d8:	1d 09       	sbc	r17, r13
    39da:	b6 95       	lsr	r27
    39dc:	a7 95       	ror	r26
    39de:	97 95       	ror	r25
    39e0:	87 95       	ror	r24
    39e2:	ee 0c       	add	r14, r14
    39e4:	ff 1c       	adc	r15, r15
    39e6:	00 1f       	adc	r16, r16
    39e8:	11 1f       	adc	r17, r17
    39ea:	6f 5f       	subi	r22, 0xFF	; 255
    39ec:	7f 4f       	sbci	r23, 0xFF	; 255
    39ee:	6f 31       	cpi	r22, 0x1F	; 31
    39f0:	71 05       	cpc	r23, r1
    39f2:	31 f7       	brne	.-52     	; 0x39c0 <__divsf3+0xda>
    39f4:	da 01       	movw	r26, r20
    39f6:	c9 01       	movw	r24, r18
    39f8:	8f 77       	andi	r24, 0x7F	; 127
    39fa:	90 70       	andi	r25, 0x00	; 0
    39fc:	a0 70       	andi	r26, 0x00	; 0
    39fe:	b0 70       	andi	r27, 0x00	; 0
    3a00:	80 34       	cpi	r24, 0x40	; 64
    3a02:	91 05       	cpc	r25, r1
    3a04:	a1 05       	cpc	r26, r1
    3a06:	b1 05       	cpc	r27, r1
    3a08:	61 f4       	brne	.+24     	; 0x3a22 <__divsf3+0x13c>
    3a0a:	27 fd       	sbrc	r18, 7
    3a0c:	0a c0       	rjmp	.+20     	; 0x3a22 <__divsf3+0x13c>
    3a0e:	e1 14       	cp	r14, r1
    3a10:	f1 04       	cpc	r15, r1
    3a12:	01 05       	cpc	r16, r1
    3a14:	11 05       	cpc	r17, r1
    3a16:	29 f0       	breq	.+10     	; 0x3a22 <__divsf3+0x13c>
    3a18:	20 5c       	subi	r18, 0xC0	; 192
    3a1a:	3f 4f       	sbci	r19, 0xFF	; 255
    3a1c:	4f 4f       	sbci	r20, 0xFF	; 255
    3a1e:	5f 4f       	sbci	r21, 0xFF	; 255
    3a20:	20 78       	andi	r18, 0x80	; 128
    3a22:	2d 87       	std	Y+13, r18	; 0x0d
    3a24:	3e 87       	std	Y+14, r19	; 0x0e
    3a26:	4f 87       	std	Y+15, r20	; 0x0f
    3a28:	58 8b       	std	Y+16, r21	; 0x10
    3a2a:	be 01       	movw	r22, r28
    3a2c:	67 5f       	subi	r22, 0xF7	; 247
    3a2e:	7f 4f       	sbci	r23, 0xFF	; 255
    3a30:	cb 01       	movw	r24, r22
    3a32:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <__pack_f>
    3a36:	68 96       	adiw	r28, 0x18	; 24
    3a38:	ea e0       	ldi	r30, 0x0A	; 10
    3a3a:	0c 94 07 21 	jmp	0x420e	; 0x420e <__epilogue_restores__+0x10>

00003a3e <__gtsf2>:
    3a3e:	a8 e1       	ldi	r26, 0x18	; 24
    3a40:	b0 e0       	ldi	r27, 0x00	; 0
    3a42:	e5 e2       	ldi	r30, 0x25	; 37
    3a44:	fd e1       	ldi	r31, 0x1D	; 29
    3a46:	0c 94 ef 20 	jmp	0x41de	; 0x41de <__prologue_saves__+0x18>
    3a4a:	69 83       	std	Y+1, r22	; 0x01
    3a4c:	7a 83       	std	Y+2, r23	; 0x02
    3a4e:	8b 83       	std	Y+3, r24	; 0x03
    3a50:	9c 83       	std	Y+4, r25	; 0x04
    3a52:	2d 83       	std	Y+5, r18	; 0x05
    3a54:	3e 83       	std	Y+6, r19	; 0x06
    3a56:	4f 83       	std	Y+7, r20	; 0x07
    3a58:	58 87       	std	Y+8, r21	; 0x08
    3a5a:	89 e0       	ldi	r24, 0x09	; 9
    3a5c:	e8 2e       	mov	r14, r24
    3a5e:	f1 2c       	mov	r15, r1
    3a60:	ec 0e       	add	r14, r28
    3a62:	fd 1e       	adc	r15, r29
    3a64:	ce 01       	movw	r24, r28
    3a66:	01 96       	adiw	r24, 0x01	; 1
    3a68:	b7 01       	movw	r22, r14
    3a6a:	0e 94 fe 1f 	call	0x3ffc	; 0x3ffc <__unpack_f>
    3a6e:	8e 01       	movw	r16, r28
    3a70:	0f 5e       	subi	r16, 0xEF	; 239
    3a72:	1f 4f       	sbci	r17, 0xFF	; 255
    3a74:	ce 01       	movw	r24, r28
    3a76:	05 96       	adiw	r24, 0x05	; 5
    3a78:	b8 01       	movw	r22, r16
    3a7a:	0e 94 fe 1f 	call	0x3ffc	; 0x3ffc <__unpack_f>
    3a7e:	89 85       	ldd	r24, Y+9	; 0x09
    3a80:	82 30       	cpi	r24, 0x02	; 2
    3a82:	40 f0       	brcs	.+16     	; 0x3a94 <__gtsf2+0x56>
    3a84:	89 89       	ldd	r24, Y+17	; 0x11
    3a86:	82 30       	cpi	r24, 0x02	; 2
    3a88:	28 f0       	brcs	.+10     	; 0x3a94 <__gtsf2+0x56>
    3a8a:	c7 01       	movw	r24, r14
    3a8c:	b8 01       	movw	r22, r16
    3a8e:	0e 94 76 20 	call	0x40ec	; 0x40ec <__fpcmp_parts_f>
    3a92:	01 c0       	rjmp	.+2      	; 0x3a96 <__gtsf2+0x58>
    3a94:	8f ef       	ldi	r24, 0xFF	; 255
    3a96:	68 96       	adiw	r28, 0x18	; 24
    3a98:	e6 e0       	ldi	r30, 0x06	; 6
    3a9a:	0c 94 0b 21 	jmp	0x4216	; 0x4216 <__epilogue_restores__+0x18>

00003a9e <__gesf2>:
    3a9e:	a8 e1       	ldi	r26, 0x18	; 24
    3aa0:	b0 e0       	ldi	r27, 0x00	; 0
    3aa2:	e5 e5       	ldi	r30, 0x55	; 85
    3aa4:	fd e1       	ldi	r31, 0x1D	; 29
    3aa6:	0c 94 ef 20 	jmp	0x41de	; 0x41de <__prologue_saves__+0x18>
    3aaa:	69 83       	std	Y+1, r22	; 0x01
    3aac:	7a 83       	std	Y+2, r23	; 0x02
    3aae:	8b 83       	std	Y+3, r24	; 0x03
    3ab0:	9c 83       	std	Y+4, r25	; 0x04
    3ab2:	2d 83       	std	Y+5, r18	; 0x05
    3ab4:	3e 83       	std	Y+6, r19	; 0x06
    3ab6:	4f 83       	std	Y+7, r20	; 0x07
    3ab8:	58 87       	std	Y+8, r21	; 0x08
    3aba:	89 e0       	ldi	r24, 0x09	; 9
    3abc:	e8 2e       	mov	r14, r24
    3abe:	f1 2c       	mov	r15, r1
    3ac0:	ec 0e       	add	r14, r28
    3ac2:	fd 1e       	adc	r15, r29
    3ac4:	ce 01       	movw	r24, r28
    3ac6:	01 96       	adiw	r24, 0x01	; 1
    3ac8:	b7 01       	movw	r22, r14
    3aca:	0e 94 fe 1f 	call	0x3ffc	; 0x3ffc <__unpack_f>
    3ace:	8e 01       	movw	r16, r28
    3ad0:	0f 5e       	subi	r16, 0xEF	; 239
    3ad2:	1f 4f       	sbci	r17, 0xFF	; 255
    3ad4:	ce 01       	movw	r24, r28
    3ad6:	05 96       	adiw	r24, 0x05	; 5
    3ad8:	b8 01       	movw	r22, r16
    3ada:	0e 94 fe 1f 	call	0x3ffc	; 0x3ffc <__unpack_f>
    3ade:	89 85       	ldd	r24, Y+9	; 0x09
    3ae0:	82 30       	cpi	r24, 0x02	; 2
    3ae2:	40 f0       	brcs	.+16     	; 0x3af4 <__gesf2+0x56>
    3ae4:	89 89       	ldd	r24, Y+17	; 0x11
    3ae6:	82 30       	cpi	r24, 0x02	; 2
    3ae8:	28 f0       	brcs	.+10     	; 0x3af4 <__gesf2+0x56>
    3aea:	c7 01       	movw	r24, r14
    3aec:	b8 01       	movw	r22, r16
    3aee:	0e 94 76 20 	call	0x40ec	; 0x40ec <__fpcmp_parts_f>
    3af2:	01 c0       	rjmp	.+2      	; 0x3af6 <__gesf2+0x58>
    3af4:	8f ef       	ldi	r24, 0xFF	; 255
    3af6:	68 96       	adiw	r28, 0x18	; 24
    3af8:	e6 e0       	ldi	r30, 0x06	; 6
    3afa:	0c 94 0b 21 	jmp	0x4216	; 0x4216 <__epilogue_restores__+0x18>

00003afe <__ltsf2>:
    3afe:	a8 e1       	ldi	r26, 0x18	; 24
    3b00:	b0 e0       	ldi	r27, 0x00	; 0
    3b02:	e5 e8       	ldi	r30, 0x85	; 133
    3b04:	fd e1       	ldi	r31, 0x1D	; 29
    3b06:	0c 94 ef 20 	jmp	0x41de	; 0x41de <__prologue_saves__+0x18>
    3b0a:	69 83       	std	Y+1, r22	; 0x01
    3b0c:	7a 83       	std	Y+2, r23	; 0x02
    3b0e:	8b 83       	std	Y+3, r24	; 0x03
    3b10:	9c 83       	std	Y+4, r25	; 0x04
    3b12:	2d 83       	std	Y+5, r18	; 0x05
    3b14:	3e 83       	std	Y+6, r19	; 0x06
    3b16:	4f 83       	std	Y+7, r20	; 0x07
    3b18:	58 87       	std	Y+8, r21	; 0x08
    3b1a:	89 e0       	ldi	r24, 0x09	; 9
    3b1c:	e8 2e       	mov	r14, r24
    3b1e:	f1 2c       	mov	r15, r1
    3b20:	ec 0e       	add	r14, r28
    3b22:	fd 1e       	adc	r15, r29
    3b24:	ce 01       	movw	r24, r28
    3b26:	01 96       	adiw	r24, 0x01	; 1
    3b28:	b7 01       	movw	r22, r14
    3b2a:	0e 94 fe 1f 	call	0x3ffc	; 0x3ffc <__unpack_f>
    3b2e:	8e 01       	movw	r16, r28
    3b30:	0f 5e       	subi	r16, 0xEF	; 239
    3b32:	1f 4f       	sbci	r17, 0xFF	; 255
    3b34:	ce 01       	movw	r24, r28
    3b36:	05 96       	adiw	r24, 0x05	; 5
    3b38:	b8 01       	movw	r22, r16
    3b3a:	0e 94 fe 1f 	call	0x3ffc	; 0x3ffc <__unpack_f>
    3b3e:	89 85       	ldd	r24, Y+9	; 0x09
    3b40:	82 30       	cpi	r24, 0x02	; 2
    3b42:	40 f0       	brcs	.+16     	; 0x3b54 <__ltsf2+0x56>
    3b44:	89 89       	ldd	r24, Y+17	; 0x11
    3b46:	82 30       	cpi	r24, 0x02	; 2
    3b48:	28 f0       	brcs	.+10     	; 0x3b54 <__ltsf2+0x56>
    3b4a:	c7 01       	movw	r24, r14
    3b4c:	b8 01       	movw	r22, r16
    3b4e:	0e 94 76 20 	call	0x40ec	; 0x40ec <__fpcmp_parts_f>
    3b52:	01 c0       	rjmp	.+2      	; 0x3b56 <__ltsf2+0x58>
    3b54:	81 e0       	ldi	r24, 0x01	; 1
    3b56:	68 96       	adiw	r28, 0x18	; 24
    3b58:	e6 e0       	ldi	r30, 0x06	; 6
    3b5a:	0c 94 0b 21 	jmp	0x4216	; 0x4216 <__epilogue_restores__+0x18>

00003b5e <__floatsisf>:
    3b5e:	a8 e0       	ldi	r26, 0x08	; 8
    3b60:	b0 e0       	ldi	r27, 0x00	; 0
    3b62:	e5 eb       	ldi	r30, 0xB5	; 181
    3b64:	fd e1       	ldi	r31, 0x1D	; 29
    3b66:	0c 94 ec 20 	jmp	0x41d8	; 0x41d8 <__prologue_saves__+0x12>
    3b6a:	9b 01       	movw	r18, r22
    3b6c:	ac 01       	movw	r20, r24
    3b6e:	83 e0       	ldi	r24, 0x03	; 3
    3b70:	89 83       	std	Y+1, r24	; 0x01
    3b72:	da 01       	movw	r26, r20
    3b74:	c9 01       	movw	r24, r18
    3b76:	88 27       	eor	r24, r24
    3b78:	b7 fd       	sbrc	r27, 7
    3b7a:	83 95       	inc	r24
    3b7c:	99 27       	eor	r25, r25
    3b7e:	aa 27       	eor	r26, r26
    3b80:	bb 27       	eor	r27, r27
    3b82:	b8 2e       	mov	r11, r24
    3b84:	21 15       	cp	r18, r1
    3b86:	31 05       	cpc	r19, r1
    3b88:	41 05       	cpc	r20, r1
    3b8a:	51 05       	cpc	r21, r1
    3b8c:	19 f4       	brne	.+6      	; 0x3b94 <__floatsisf+0x36>
    3b8e:	82 e0       	ldi	r24, 0x02	; 2
    3b90:	89 83       	std	Y+1, r24	; 0x01
    3b92:	3a c0       	rjmp	.+116    	; 0x3c08 <__floatsisf+0xaa>
    3b94:	88 23       	and	r24, r24
    3b96:	a9 f0       	breq	.+42     	; 0x3bc2 <__floatsisf+0x64>
    3b98:	20 30       	cpi	r18, 0x00	; 0
    3b9a:	80 e0       	ldi	r24, 0x00	; 0
    3b9c:	38 07       	cpc	r19, r24
    3b9e:	80 e0       	ldi	r24, 0x00	; 0
    3ba0:	48 07       	cpc	r20, r24
    3ba2:	80 e8       	ldi	r24, 0x80	; 128
    3ba4:	58 07       	cpc	r21, r24
    3ba6:	29 f4       	brne	.+10     	; 0x3bb2 <__floatsisf+0x54>
    3ba8:	60 e0       	ldi	r22, 0x00	; 0
    3baa:	70 e0       	ldi	r23, 0x00	; 0
    3bac:	80 e0       	ldi	r24, 0x00	; 0
    3bae:	9f ec       	ldi	r25, 0xCF	; 207
    3bb0:	30 c0       	rjmp	.+96     	; 0x3c12 <__floatsisf+0xb4>
    3bb2:	ee 24       	eor	r14, r14
    3bb4:	ff 24       	eor	r15, r15
    3bb6:	87 01       	movw	r16, r14
    3bb8:	e2 1a       	sub	r14, r18
    3bba:	f3 0a       	sbc	r15, r19
    3bbc:	04 0b       	sbc	r16, r20
    3bbe:	15 0b       	sbc	r17, r21
    3bc0:	02 c0       	rjmp	.+4      	; 0x3bc6 <__floatsisf+0x68>
    3bc2:	79 01       	movw	r14, r18
    3bc4:	8a 01       	movw	r16, r20
    3bc6:	8e e1       	ldi	r24, 0x1E	; 30
    3bc8:	c8 2e       	mov	r12, r24
    3bca:	d1 2c       	mov	r13, r1
    3bcc:	dc 82       	std	Y+4, r13	; 0x04
    3bce:	cb 82       	std	Y+3, r12	; 0x03
    3bd0:	ed 82       	std	Y+5, r14	; 0x05
    3bd2:	fe 82       	std	Y+6, r15	; 0x06
    3bd4:	0f 83       	std	Y+7, r16	; 0x07
    3bd6:	18 87       	std	Y+8, r17	; 0x08
    3bd8:	c8 01       	movw	r24, r16
    3bda:	b7 01       	movw	r22, r14
    3bdc:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <__clzsi2>
    3be0:	01 97       	sbiw	r24, 0x01	; 1
    3be2:	18 16       	cp	r1, r24
    3be4:	19 06       	cpc	r1, r25
    3be6:	84 f4       	brge	.+32     	; 0x3c08 <__floatsisf+0xaa>
    3be8:	08 2e       	mov	r0, r24
    3bea:	04 c0       	rjmp	.+8      	; 0x3bf4 <__floatsisf+0x96>
    3bec:	ee 0c       	add	r14, r14
    3bee:	ff 1c       	adc	r15, r15
    3bf0:	00 1f       	adc	r16, r16
    3bf2:	11 1f       	adc	r17, r17
    3bf4:	0a 94       	dec	r0
    3bf6:	d2 f7       	brpl	.-12     	; 0x3bec <__floatsisf+0x8e>
    3bf8:	ed 82       	std	Y+5, r14	; 0x05
    3bfa:	fe 82       	std	Y+6, r15	; 0x06
    3bfc:	0f 83       	std	Y+7, r16	; 0x07
    3bfe:	18 87       	std	Y+8, r17	; 0x08
    3c00:	c8 1a       	sub	r12, r24
    3c02:	d9 0a       	sbc	r13, r25
    3c04:	dc 82       	std	Y+4, r13	; 0x04
    3c06:	cb 82       	std	Y+3, r12	; 0x03
    3c08:	ba 82       	std	Y+2, r11	; 0x02
    3c0a:	ce 01       	movw	r24, r28
    3c0c:	01 96       	adiw	r24, 0x01	; 1
    3c0e:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <__pack_f>
    3c12:	28 96       	adiw	r28, 0x08	; 8
    3c14:	e9 e0       	ldi	r30, 0x09	; 9
    3c16:	0c 94 08 21 	jmp	0x4210	; 0x4210 <__epilogue_restores__+0x12>

00003c1a <__fixsfsi>:
    3c1a:	ac e0       	ldi	r26, 0x0C	; 12
    3c1c:	b0 e0       	ldi	r27, 0x00	; 0
    3c1e:	e3 e1       	ldi	r30, 0x13	; 19
    3c20:	fe e1       	ldi	r31, 0x1E	; 30
    3c22:	0c 94 f3 20 	jmp	0x41e6	; 0x41e6 <__prologue_saves__+0x20>
    3c26:	69 83       	std	Y+1, r22	; 0x01
    3c28:	7a 83       	std	Y+2, r23	; 0x02
    3c2a:	8b 83       	std	Y+3, r24	; 0x03
    3c2c:	9c 83       	std	Y+4, r25	; 0x04
    3c2e:	ce 01       	movw	r24, r28
    3c30:	01 96       	adiw	r24, 0x01	; 1
    3c32:	be 01       	movw	r22, r28
    3c34:	6b 5f       	subi	r22, 0xFB	; 251
    3c36:	7f 4f       	sbci	r23, 0xFF	; 255
    3c38:	0e 94 fe 1f 	call	0x3ffc	; 0x3ffc <__unpack_f>
    3c3c:	8d 81       	ldd	r24, Y+5	; 0x05
    3c3e:	82 30       	cpi	r24, 0x02	; 2
    3c40:	61 f1       	breq	.+88     	; 0x3c9a <__fixsfsi+0x80>
    3c42:	82 30       	cpi	r24, 0x02	; 2
    3c44:	50 f1       	brcs	.+84     	; 0x3c9a <__fixsfsi+0x80>
    3c46:	84 30       	cpi	r24, 0x04	; 4
    3c48:	21 f4       	brne	.+8      	; 0x3c52 <__fixsfsi+0x38>
    3c4a:	8e 81       	ldd	r24, Y+6	; 0x06
    3c4c:	88 23       	and	r24, r24
    3c4e:	51 f1       	breq	.+84     	; 0x3ca4 <__fixsfsi+0x8a>
    3c50:	2e c0       	rjmp	.+92     	; 0x3cae <__fixsfsi+0x94>
    3c52:	2f 81       	ldd	r18, Y+7	; 0x07
    3c54:	38 85       	ldd	r19, Y+8	; 0x08
    3c56:	37 fd       	sbrc	r19, 7
    3c58:	20 c0       	rjmp	.+64     	; 0x3c9a <__fixsfsi+0x80>
    3c5a:	6e 81       	ldd	r22, Y+6	; 0x06
    3c5c:	2f 31       	cpi	r18, 0x1F	; 31
    3c5e:	31 05       	cpc	r19, r1
    3c60:	1c f0       	brlt	.+6      	; 0x3c68 <__fixsfsi+0x4e>
    3c62:	66 23       	and	r22, r22
    3c64:	f9 f0       	breq	.+62     	; 0x3ca4 <__fixsfsi+0x8a>
    3c66:	23 c0       	rjmp	.+70     	; 0x3cae <__fixsfsi+0x94>
    3c68:	8e e1       	ldi	r24, 0x1E	; 30
    3c6a:	90 e0       	ldi	r25, 0x00	; 0
    3c6c:	82 1b       	sub	r24, r18
    3c6e:	93 0b       	sbc	r25, r19
    3c70:	29 85       	ldd	r18, Y+9	; 0x09
    3c72:	3a 85       	ldd	r19, Y+10	; 0x0a
    3c74:	4b 85       	ldd	r20, Y+11	; 0x0b
    3c76:	5c 85       	ldd	r21, Y+12	; 0x0c
    3c78:	04 c0       	rjmp	.+8      	; 0x3c82 <__fixsfsi+0x68>
    3c7a:	56 95       	lsr	r21
    3c7c:	47 95       	ror	r20
    3c7e:	37 95       	ror	r19
    3c80:	27 95       	ror	r18
    3c82:	8a 95       	dec	r24
    3c84:	d2 f7       	brpl	.-12     	; 0x3c7a <__fixsfsi+0x60>
    3c86:	66 23       	and	r22, r22
    3c88:	b1 f0       	breq	.+44     	; 0x3cb6 <__fixsfsi+0x9c>
    3c8a:	50 95       	com	r21
    3c8c:	40 95       	com	r20
    3c8e:	30 95       	com	r19
    3c90:	21 95       	neg	r18
    3c92:	3f 4f       	sbci	r19, 0xFF	; 255
    3c94:	4f 4f       	sbci	r20, 0xFF	; 255
    3c96:	5f 4f       	sbci	r21, 0xFF	; 255
    3c98:	0e c0       	rjmp	.+28     	; 0x3cb6 <__fixsfsi+0x9c>
    3c9a:	20 e0       	ldi	r18, 0x00	; 0
    3c9c:	30 e0       	ldi	r19, 0x00	; 0
    3c9e:	40 e0       	ldi	r20, 0x00	; 0
    3ca0:	50 e0       	ldi	r21, 0x00	; 0
    3ca2:	09 c0       	rjmp	.+18     	; 0x3cb6 <__fixsfsi+0x9c>
    3ca4:	2f ef       	ldi	r18, 0xFF	; 255
    3ca6:	3f ef       	ldi	r19, 0xFF	; 255
    3ca8:	4f ef       	ldi	r20, 0xFF	; 255
    3caa:	5f e7       	ldi	r21, 0x7F	; 127
    3cac:	04 c0       	rjmp	.+8      	; 0x3cb6 <__fixsfsi+0x9c>
    3cae:	20 e0       	ldi	r18, 0x00	; 0
    3cb0:	30 e0       	ldi	r19, 0x00	; 0
    3cb2:	40 e0       	ldi	r20, 0x00	; 0
    3cb4:	50 e8       	ldi	r21, 0x80	; 128
    3cb6:	b9 01       	movw	r22, r18
    3cb8:	ca 01       	movw	r24, r20
    3cba:	2c 96       	adiw	r28, 0x0c	; 12
    3cbc:	e2 e0       	ldi	r30, 0x02	; 2
    3cbe:	0c 94 0f 21 	jmp	0x421e	; 0x421e <__epilogue_restores__+0x20>

00003cc2 <__floatunsisf>:
    3cc2:	a8 e0       	ldi	r26, 0x08	; 8
    3cc4:	b0 e0       	ldi	r27, 0x00	; 0
    3cc6:	e7 e6       	ldi	r30, 0x67	; 103
    3cc8:	fe e1       	ldi	r31, 0x1E	; 30
    3cca:	0c 94 eb 20 	jmp	0x41d6	; 0x41d6 <__prologue_saves__+0x10>
    3cce:	7b 01       	movw	r14, r22
    3cd0:	8c 01       	movw	r16, r24
    3cd2:	61 15       	cp	r22, r1
    3cd4:	71 05       	cpc	r23, r1
    3cd6:	81 05       	cpc	r24, r1
    3cd8:	91 05       	cpc	r25, r1
    3cda:	19 f4       	brne	.+6      	; 0x3ce2 <__floatunsisf+0x20>
    3cdc:	82 e0       	ldi	r24, 0x02	; 2
    3cde:	89 83       	std	Y+1, r24	; 0x01
    3ce0:	60 c0       	rjmp	.+192    	; 0x3da2 <__floatunsisf+0xe0>
    3ce2:	83 e0       	ldi	r24, 0x03	; 3
    3ce4:	89 83       	std	Y+1, r24	; 0x01
    3ce6:	8e e1       	ldi	r24, 0x1E	; 30
    3ce8:	c8 2e       	mov	r12, r24
    3cea:	d1 2c       	mov	r13, r1
    3cec:	dc 82       	std	Y+4, r13	; 0x04
    3cee:	cb 82       	std	Y+3, r12	; 0x03
    3cf0:	ed 82       	std	Y+5, r14	; 0x05
    3cf2:	fe 82       	std	Y+6, r15	; 0x06
    3cf4:	0f 83       	std	Y+7, r16	; 0x07
    3cf6:	18 87       	std	Y+8, r17	; 0x08
    3cf8:	c8 01       	movw	r24, r16
    3cfa:	b7 01       	movw	r22, r14
    3cfc:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <__clzsi2>
    3d00:	fc 01       	movw	r30, r24
    3d02:	31 97       	sbiw	r30, 0x01	; 1
    3d04:	f7 ff       	sbrs	r31, 7
    3d06:	3b c0       	rjmp	.+118    	; 0x3d7e <__floatunsisf+0xbc>
    3d08:	22 27       	eor	r18, r18
    3d0a:	33 27       	eor	r19, r19
    3d0c:	2e 1b       	sub	r18, r30
    3d0e:	3f 0b       	sbc	r19, r31
    3d10:	57 01       	movw	r10, r14
    3d12:	68 01       	movw	r12, r16
    3d14:	02 2e       	mov	r0, r18
    3d16:	04 c0       	rjmp	.+8      	; 0x3d20 <__floatunsisf+0x5e>
    3d18:	d6 94       	lsr	r13
    3d1a:	c7 94       	ror	r12
    3d1c:	b7 94       	ror	r11
    3d1e:	a7 94       	ror	r10
    3d20:	0a 94       	dec	r0
    3d22:	d2 f7       	brpl	.-12     	; 0x3d18 <__floatunsisf+0x56>
    3d24:	40 e0       	ldi	r20, 0x00	; 0
    3d26:	50 e0       	ldi	r21, 0x00	; 0
    3d28:	60 e0       	ldi	r22, 0x00	; 0
    3d2a:	70 e0       	ldi	r23, 0x00	; 0
    3d2c:	81 e0       	ldi	r24, 0x01	; 1
    3d2e:	90 e0       	ldi	r25, 0x00	; 0
    3d30:	a0 e0       	ldi	r26, 0x00	; 0
    3d32:	b0 e0       	ldi	r27, 0x00	; 0
    3d34:	04 c0       	rjmp	.+8      	; 0x3d3e <__floatunsisf+0x7c>
    3d36:	88 0f       	add	r24, r24
    3d38:	99 1f       	adc	r25, r25
    3d3a:	aa 1f       	adc	r26, r26
    3d3c:	bb 1f       	adc	r27, r27
    3d3e:	2a 95       	dec	r18
    3d40:	d2 f7       	brpl	.-12     	; 0x3d36 <__floatunsisf+0x74>
    3d42:	01 97       	sbiw	r24, 0x01	; 1
    3d44:	a1 09       	sbc	r26, r1
    3d46:	b1 09       	sbc	r27, r1
    3d48:	8e 21       	and	r24, r14
    3d4a:	9f 21       	and	r25, r15
    3d4c:	a0 23       	and	r26, r16
    3d4e:	b1 23       	and	r27, r17
    3d50:	00 97       	sbiw	r24, 0x00	; 0
    3d52:	a1 05       	cpc	r26, r1
    3d54:	b1 05       	cpc	r27, r1
    3d56:	21 f0       	breq	.+8      	; 0x3d60 <__floatunsisf+0x9e>
    3d58:	41 e0       	ldi	r20, 0x01	; 1
    3d5a:	50 e0       	ldi	r21, 0x00	; 0
    3d5c:	60 e0       	ldi	r22, 0x00	; 0
    3d5e:	70 e0       	ldi	r23, 0x00	; 0
    3d60:	4a 29       	or	r20, r10
    3d62:	5b 29       	or	r21, r11
    3d64:	6c 29       	or	r22, r12
    3d66:	7d 29       	or	r23, r13
    3d68:	4d 83       	std	Y+5, r20	; 0x05
    3d6a:	5e 83       	std	Y+6, r21	; 0x06
    3d6c:	6f 83       	std	Y+7, r22	; 0x07
    3d6e:	78 87       	std	Y+8, r23	; 0x08
    3d70:	8e e1       	ldi	r24, 0x1E	; 30
    3d72:	90 e0       	ldi	r25, 0x00	; 0
    3d74:	8e 1b       	sub	r24, r30
    3d76:	9f 0b       	sbc	r25, r31
    3d78:	9c 83       	std	Y+4, r25	; 0x04
    3d7a:	8b 83       	std	Y+3, r24	; 0x03
    3d7c:	12 c0       	rjmp	.+36     	; 0x3da2 <__floatunsisf+0xe0>
    3d7e:	30 97       	sbiw	r30, 0x00	; 0
    3d80:	81 f0       	breq	.+32     	; 0x3da2 <__floatunsisf+0xe0>
    3d82:	0e 2e       	mov	r0, r30
    3d84:	04 c0       	rjmp	.+8      	; 0x3d8e <__floatunsisf+0xcc>
    3d86:	ee 0c       	add	r14, r14
    3d88:	ff 1c       	adc	r15, r15
    3d8a:	00 1f       	adc	r16, r16
    3d8c:	11 1f       	adc	r17, r17
    3d8e:	0a 94       	dec	r0
    3d90:	d2 f7       	brpl	.-12     	; 0x3d86 <__floatunsisf+0xc4>
    3d92:	ed 82       	std	Y+5, r14	; 0x05
    3d94:	fe 82       	std	Y+6, r15	; 0x06
    3d96:	0f 83       	std	Y+7, r16	; 0x07
    3d98:	18 87       	std	Y+8, r17	; 0x08
    3d9a:	ce 1a       	sub	r12, r30
    3d9c:	df 0a       	sbc	r13, r31
    3d9e:	dc 82       	std	Y+4, r13	; 0x04
    3da0:	cb 82       	std	Y+3, r12	; 0x03
    3da2:	1a 82       	std	Y+2, r1	; 0x02
    3da4:	ce 01       	movw	r24, r28
    3da6:	01 96       	adiw	r24, 0x01	; 1
    3da8:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <__pack_f>
    3dac:	28 96       	adiw	r28, 0x08	; 8
    3dae:	ea e0       	ldi	r30, 0x0A	; 10
    3db0:	0c 94 07 21 	jmp	0x420e	; 0x420e <__epilogue_restores__+0x10>

00003db4 <__clzsi2>:
    3db4:	ef 92       	push	r14
    3db6:	ff 92       	push	r15
    3db8:	0f 93       	push	r16
    3dba:	1f 93       	push	r17
    3dbc:	7b 01       	movw	r14, r22
    3dbe:	8c 01       	movw	r16, r24
    3dc0:	80 e0       	ldi	r24, 0x00	; 0
    3dc2:	e8 16       	cp	r14, r24
    3dc4:	80 e0       	ldi	r24, 0x00	; 0
    3dc6:	f8 06       	cpc	r15, r24
    3dc8:	81 e0       	ldi	r24, 0x01	; 1
    3dca:	08 07       	cpc	r16, r24
    3dcc:	80 e0       	ldi	r24, 0x00	; 0
    3dce:	18 07       	cpc	r17, r24
    3dd0:	88 f4       	brcc	.+34     	; 0x3df4 <__clzsi2+0x40>
    3dd2:	8f ef       	ldi	r24, 0xFF	; 255
    3dd4:	e8 16       	cp	r14, r24
    3dd6:	f1 04       	cpc	r15, r1
    3dd8:	01 05       	cpc	r16, r1
    3dda:	11 05       	cpc	r17, r1
    3ddc:	31 f0       	breq	.+12     	; 0x3dea <__clzsi2+0x36>
    3dde:	28 f0       	brcs	.+10     	; 0x3dea <__clzsi2+0x36>
    3de0:	88 e0       	ldi	r24, 0x08	; 8
    3de2:	90 e0       	ldi	r25, 0x00	; 0
    3de4:	a0 e0       	ldi	r26, 0x00	; 0
    3de6:	b0 e0       	ldi	r27, 0x00	; 0
    3de8:	17 c0       	rjmp	.+46     	; 0x3e18 <__clzsi2+0x64>
    3dea:	80 e0       	ldi	r24, 0x00	; 0
    3dec:	90 e0       	ldi	r25, 0x00	; 0
    3dee:	a0 e0       	ldi	r26, 0x00	; 0
    3df0:	b0 e0       	ldi	r27, 0x00	; 0
    3df2:	12 c0       	rjmp	.+36     	; 0x3e18 <__clzsi2+0x64>
    3df4:	80 e0       	ldi	r24, 0x00	; 0
    3df6:	e8 16       	cp	r14, r24
    3df8:	80 e0       	ldi	r24, 0x00	; 0
    3dfa:	f8 06       	cpc	r15, r24
    3dfc:	80 e0       	ldi	r24, 0x00	; 0
    3dfe:	08 07       	cpc	r16, r24
    3e00:	81 e0       	ldi	r24, 0x01	; 1
    3e02:	18 07       	cpc	r17, r24
    3e04:	28 f0       	brcs	.+10     	; 0x3e10 <__clzsi2+0x5c>
    3e06:	88 e1       	ldi	r24, 0x18	; 24
    3e08:	90 e0       	ldi	r25, 0x00	; 0
    3e0a:	a0 e0       	ldi	r26, 0x00	; 0
    3e0c:	b0 e0       	ldi	r27, 0x00	; 0
    3e0e:	04 c0       	rjmp	.+8      	; 0x3e18 <__clzsi2+0x64>
    3e10:	80 e1       	ldi	r24, 0x10	; 16
    3e12:	90 e0       	ldi	r25, 0x00	; 0
    3e14:	a0 e0       	ldi	r26, 0x00	; 0
    3e16:	b0 e0       	ldi	r27, 0x00	; 0
    3e18:	20 e2       	ldi	r18, 0x20	; 32
    3e1a:	30 e0       	ldi	r19, 0x00	; 0
    3e1c:	40 e0       	ldi	r20, 0x00	; 0
    3e1e:	50 e0       	ldi	r21, 0x00	; 0
    3e20:	28 1b       	sub	r18, r24
    3e22:	39 0b       	sbc	r19, r25
    3e24:	4a 0b       	sbc	r20, r26
    3e26:	5b 0b       	sbc	r21, r27
    3e28:	04 c0       	rjmp	.+8      	; 0x3e32 <__clzsi2+0x7e>
    3e2a:	16 95       	lsr	r17
    3e2c:	07 95       	ror	r16
    3e2e:	f7 94       	ror	r15
    3e30:	e7 94       	ror	r14
    3e32:	8a 95       	dec	r24
    3e34:	d2 f7       	brpl	.-12     	; 0x3e2a <__clzsi2+0x76>
    3e36:	f7 01       	movw	r30, r14
    3e38:	ef 55       	subi	r30, 0x5F	; 95
    3e3a:	fd 4f       	sbci	r31, 0xFD	; 253
    3e3c:	80 81       	ld	r24, Z
    3e3e:	28 1b       	sub	r18, r24
    3e40:	31 09       	sbc	r19, r1
    3e42:	41 09       	sbc	r20, r1
    3e44:	51 09       	sbc	r21, r1
    3e46:	c9 01       	movw	r24, r18
    3e48:	1f 91       	pop	r17
    3e4a:	0f 91       	pop	r16
    3e4c:	ff 90       	pop	r15
    3e4e:	ef 90       	pop	r14
    3e50:	08 95       	ret

00003e52 <__pack_f>:
    3e52:	df 92       	push	r13
    3e54:	ef 92       	push	r14
    3e56:	ff 92       	push	r15
    3e58:	0f 93       	push	r16
    3e5a:	1f 93       	push	r17
    3e5c:	fc 01       	movw	r30, r24
    3e5e:	e4 80       	ldd	r14, Z+4	; 0x04
    3e60:	f5 80       	ldd	r15, Z+5	; 0x05
    3e62:	06 81       	ldd	r16, Z+6	; 0x06
    3e64:	17 81       	ldd	r17, Z+7	; 0x07
    3e66:	d1 80       	ldd	r13, Z+1	; 0x01
    3e68:	80 81       	ld	r24, Z
    3e6a:	82 30       	cpi	r24, 0x02	; 2
    3e6c:	48 f4       	brcc	.+18     	; 0x3e80 <__pack_f+0x2e>
    3e6e:	80 e0       	ldi	r24, 0x00	; 0
    3e70:	90 e0       	ldi	r25, 0x00	; 0
    3e72:	a0 e1       	ldi	r26, 0x10	; 16
    3e74:	b0 e0       	ldi	r27, 0x00	; 0
    3e76:	e8 2a       	or	r14, r24
    3e78:	f9 2a       	or	r15, r25
    3e7a:	0a 2b       	or	r16, r26
    3e7c:	1b 2b       	or	r17, r27
    3e7e:	a5 c0       	rjmp	.+330    	; 0x3fca <__pack_f+0x178>
    3e80:	84 30       	cpi	r24, 0x04	; 4
    3e82:	09 f4       	brne	.+2      	; 0x3e86 <__pack_f+0x34>
    3e84:	9f c0       	rjmp	.+318    	; 0x3fc4 <__pack_f+0x172>
    3e86:	82 30       	cpi	r24, 0x02	; 2
    3e88:	21 f4       	brne	.+8      	; 0x3e92 <__pack_f+0x40>
    3e8a:	ee 24       	eor	r14, r14
    3e8c:	ff 24       	eor	r15, r15
    3e8e:	87 01       	movw	r16, r14
    3e90:	05 c0       	rjmp	.+10     	; 0x3e9c <__pack_f+0x4a>
    3e92:	e1 14       	cp	r14, r1
    3e94:	f1 04       	cpc	r15, r1
    3e96:	01 05       	cpc	r16, r1
    3e98:	11 05       	cpc	r17, r1
    3e9a:	19 f4       	brne	.+6      	; 0x3ea2 <__pack_f+0x50>
    3e9c:	e0 e0       	ldi	r30, 0x00	; 0
    3e9e:	f0 e0       	ldi	r31, 0x00	; 0
    3ea0:	96 c0       	rjmp	.+300    	; 0x3fce <__pack_f+0x17c>
    3ea2:	62 81       	ldd	r22, Z+2	; 0x02
    3ea4:	73 81       	ldd	r23, Z+3	; 0x03
    3ea6:	9f ef       	ldi	r25, 0xFF	; 255
    3ea8:	62 38       	cpi	r22, 0x82	; 130
    3eaa:	79 07       	cpc	r23, r25
    3eac:	0c f0       	brlt	.+2      	; 0x3eb0 <__pack_f+0x5e>
    3eae:	5b c0       	rjmp	.+182    	; 0x3f66 <__pack_f+0x114>
    3eb0:	22 e8       	ldi	r18, 0x82	; 130
    3eb2:	3f ef       	ldi	r19, 0xFF	; 255
    3eb4:	26 1b       	sub	r18, r22
    3eb6:	37 0b       	sbc	r19, r23
    3eb8:	2a 31       	cpi	r18, 0x1A	; 26
    3eba:	31 05       	cpc	r19, r1
    3ebc:	2c f0       	brlt	.+10     	; 0x3ec8 <__pack_f+0x76>
    3ebe:	20 e0       	ldi	r18, 0x00	; 0
    3ec0:	30 e0       	ldi	r19, 0x00	; 0
    3ec2:	40 e0       	ldi	r20, 0x00	; 0
    3ec4:	50 e0       	ldi	r21, 0x00	; 0
    3ec6:	2a c0       	rjmp	.+84     	; 0x3f1c <__pack_f+0xca>
    3ec8:	b8 01       	movw	r22, r16
    3eca:	a7 01       	movw	r20, r14
    3ecc:	02 2e       	mov	r0, r18
    3ece:	04 c0       	rjmp	.+8      	; 0x3ed8 <__pack_f+0x86>
    3ed0:	76 95       	lsr	r23
    3ed2:	67 95       	ror	r22
    3ed4:	57 95       	ror	r21
    3ed6:	47 95       	ror	r20
    3ed8:	0a 94       	dec	r0
    3eda:	d2 f7       	brpl	.-12     	; 0x3ed0 <__pack_f+0x7e>
    3edc:	81 e0       	ldi	r24, 0x01	; 1
    3ede:	90 e0       	ldi	r25, 0x00	; 0
    3ee0:	a0 e0       	ldi	r26, 0x00	; 0
    3ee2:	b0 e0       	ldi	r27, 0x00	; 0
    3ee4:	04 c0       	rjmp	.+8      	; 0x3eee <__pack_f+0x9c>
    3ee6:	88 0f       	add	r24, r24
    3ee8:	99 1f       	adc	r25, r25
    3eea:	aa 1f       	adc	r26, r26
    3eec:	bb 1f       	adc	r27, r27
    3eee:	2a 95       	dec	r18
    3ef0:	d2 f7       	brpl	.-12     	; 0x3ee6 <__pack_f+0x94>
    3ef2:	01 97       	sbiw	r24, 0x01	; 1
    3ef4:	a1 09       	sbc	r26, r1
    3ef6:	b1 09       	sbc	r27, r1
    3ef8:	8e 21       	and	r24, r14
    3efa:	9f 21       	and	r25, r15
    3efc:	a0 23       	and	r26, r16
    3efe:	b1 23       	and	r27, r17
    3f00:	00 97       	sbiw	r24, 0x00	; 0
    3f02:	a1 05       	cpc	r26, r1
    3f04:	b1 05       	cpc	r27, r1
    3f06:	21 f0       	breq	.+8      	; 0x3f10 <__pack_f+0xbe>
    3f08:	81 e0       	ldi	r24, 0x01	; 1
    3f0a:	90 e0       	ldi	r25, 0x00	; 0
    3f0c:	a0 e0       	ldi	r26, 0x00	; 0
    3f0e:	b0 e0       	ldi	r27, 0x00	; 0
    3f10:	9a 01       	movw	r18, r20
    3f12:	ab 01       	movw	r20, r22
    3f14:	28 2b       	or	r18, r24
    3f16:	39 2b       	or	r19, r25
    3f18:	4a 2b       	or	r20, r26
    3f1a:	5b 2b       	or	r21, r27
    3f1c:	da 01       	movw	r26, r20
    3f1e:	c9 01       	movw	r24, r18
    3f20:	8f 77       	andi	r24, 0x7F	; 127
    3f22:	90 70       	andi	r25, 0x00	; 0
    3f24:	a0 70       	andi	r26, 0x00	; 0
    3f26:	b0 70       	andi	r27, 0x00	; 0
    3f28:	80 34       	cpi	r24, 0x40	; 64
    3f2a:	91 05       	cpc	r25, r1
    3f2c:	a1 05       	cpc	r26, r1
    3f2e:	b1 05       	cpc	r27, r1
    3f30:	39 f4       	brne	.+14     	; 0x3f40 <__pack_f+0xee>
    3f32:	27 ff       	sbrs	r18, 7
    3f34:	09 c0       	rjmp	.+18     	; 0x3f48 <__pack_f+0xf6>
    3f36:	20 5c       	subi	r18, 0xC0	; 192
    3f38:	3f 4f       	sbci	r19, 0xFF	; 255
    3f3a:	4f 4f       	sbci	r20, 0xFF	; 255
    3f3c:	5f 4f       	sbci	r21, 0xFF	; 255
    3f3e:	04 c0       	rjmp	.+8      	; 0x3f48 <__pack_f+0xf6>
    3f40:	21 5c       	subi	r18, 0xC1	; 193
    3f42:	3f 4f       	sbci	r19, 0xFF	; 255
    3f44:	4f 4f       	sbci	r20, 0xFF	; 255
    3f46:	5f 4f       	sbci	r21, 0xFF	; 255
    3f48:	e0 e0       	ldi	r30, 0x00	; 0
    3f4a:	f0 e0       	ldi	r31, 0x00	; 0
    3f4c:	20 30       	cpi	r18, 0x00	; 0
    3f4e:	a0 e0       	ldi	r26, 0x00	; 0
    3f50:	3a 07       	cpc	r19, r26
    3f52:	a0 e0       	ldi	r26, 0x00	; 0
    3f54:	4a 07       	cpc	r20, r26
    3f56:	a0 e4       	ldi	r26, 0x40	; 64
    3f58:	5a 07       	cpc	r21, r26
    3f5a:	10 f0       	brcs	.+4      	; 0x3f60 <__pack_f+0x10e>
    3f5c:	e1 e0       	ldi	r30, 0x01	; 1
    3f5e:	f0 e0       	ldi	r31, 0x00	; 0
    3f60:	79 01       	movw	r14, r18
    3f62:	8a 01       	movw	r16, r20
    3f64:	27 c0       	rjmp	.+78     	; 0x3fb4 <__pack_f+0x162>
    3f66:	60 38       	cpi	r22, 0x80	; 128
    3f68:	71 05       	cpc	r23, r1
    3f6a:	64 f5       	brge	.+88     	; 0x3fc4 <__pack_f+0x172>
    3f6c:	fb 01       	movw	r30, r22
    3f6e:	e1 58       	subi	r30, 0x81	; 129
    3f70:	ff 4f       	sbci	r31, 0xFF	; 255
    3f72:	d8 01       	movw	r26, r16
    3f74:	c7 01       	movw	r24, r14
    3f76:	8f 77       	andi	r24, 0x7F	; 127
    3f78:	90 70       	andi	r25, 0x00	; 0
    3f7a:	a0 70       	andi	r26, 0x00	; 0
    3f7c:	b0 70       	andi	r27, 0x00	; 0
    3f7e:	80 34       	cpi	r24, 0x40	; 64
    3f80:	91 05       	cpc	r25, r1
    3f82:	a1 05       	cpc	r26, r1
    3f84:	b1 05       	cpc	r27, r1
    3f86:	39 f4       	brne	.+14     	; 0x3f96 <__pack_f+0x144>
    3f88:	e7 fe       	sbrs	r14, 7
    3f8a:	0d c0       	rjmp	.+26     	; 0x3fa6 <__pack_f+0x154>
    3f8c:	80 e4       	ldi	r24, 0x40	; 64
    3f8e:	90 e0       	ldi	r25, 0x00	; 0
    3f90:	a0 e0       	ldi	r26, 0x00	; 0
    3f92:	b0 e0       	ldi	r27, 0x00	; 0
    3f94:	04 c0       	rjmp	.+8      	; 0x3f9e <__pack_f+0x14c>
    3f96:	8f e3       	ldi	r24, 0x3F	; 63
    3f98:	90 e0       	ldi	r25, 0x00	; 0
    3f9a:	a0 e0       	ldi	r26, 0x00	; 0
    3f9c:	b0 e0       	ldi	r27, 0x00	; 0
    3f9e:	e8 0e       	add	r14, r24
    3fa0:	f9 1e       	adc	r15, r25
    3fa2:	0a 1f       	adc	r16, r26
    3fa4:	1b 1f       	adc	r17, r27
    3fa6:	17 ff       	sbrs	r17, 7
    3fa8:	05 c0       	rjmp	.+10     	; 0x3fb4 <__pack_f+0x162>
    3faa:	16 95       	lsr	r17
    3fac:	07 95       	ror	r16
    3fae:	f7 94       	ror	r15
    3fb0:	e7 94       	ror	r14
    3fb2:	31 96       	adiw	r30, 0x01	; 1
    3fb4:	87 e0       	ldi	r24, 0x07	; 7
    3fb6:	16 95       	lsr	r17
    3fb8:	07 95       	ror	r16
    3fba:	f7 94       	ror	r15
    3fbc:	e7 94       	ror	r14
    3fbe:	8a 95       	dec	r24
    3fc0:	d1 f7       	brne	.-12     	; 0x3fb6 <__pack_f+0x164>
    3fc2:	05 c0       	rjmp	.+10     	; 0x3fce <__pack_f+0x17c>
    3fc4:	ee 24       	eor	r14, r14
    3fc6:	ff 24       	eor	r15, r15
    3fc8:	87 01       	movw	r16, r14
    3fca:	ef ef       	ldi	r30, 0xFF	; 255
    3fcc:	f0 e0       	ldi	r31, 0x00	; 0
    3fce:	6e 2f       	mov	r22, r30
    3fd0:	67 95       	ror	r22
    3fd2:	66 27       	eor	r22, r22
    3fd4:	67 95       	ror	r22
    3fd6:	90 2f       	mov	r25, r16
    3fd8:	9f 77       	andi	r25, 0x7F	; 127
    3fda:	d7 94       	ror	r13
    3fdc:	dd 24       	eor	r13, r13
    3fde:	d7 94       	ror	r13
    3fe0:	8e 2f       	mov	r24, r30
    3fe2:	86 95       	lsr	r24
    3fe4:	49 2f       	mov	r20, r25
    3fe6:	46 2b       	or	r20, r22
    3fe8:	58 2f       	mov	r21, r24
    3fea:	5d 29       	or	r21, r13
    3fec:	b7 01       	movw	r22, r14
    3fee:	ca 01       	movw	r24, r20
    3ff0:	1f 91       	pop	r17
    3ff2:	0f 91       	pop	r16
    3ff4:	ff 90       	pop	r15
    3ff6:	ef 90       	pop	r14
    3ff8:	df 90       	pop	r13
    3ffa:	08 95       	ret

00003ffc <__unpack_f>:
    3ffc:	fc 01       	movw	r30, r24
    3ffe:	db 01       	movw	r26, r22
    4000:	40 81       	ld	r20, Z
    4002:	51 81       	ldd	r21, Z+1	; 0x01
    4004:	22 81       	ldd	r18, Z+2	; 0x02
    4006:	62 2f       	mov	r22, r18
    4008:	6f 77       	andi	r22, 0x7F	; 127
    400a:	70 e0       	ldi	r23, 0x00	; 0
    400c:	22 1f       	adc	r18, r18
    400e:	22 27       	eor	r18, r18
    4010:	22 1f       	adc	r18, r18
    4012:	93 81       	ldd	r25, Z+3	; 0x03
    4014:	89 2f       	mov	r24, r25
    4016:	88 0f       	add	r24, r24
    4018:	82 2b       	or	r24, r18
    401a:	28 2f       	mov	r18, r24
    401c:	30 e0       	ldi	r19, 0x00	; 0
    401e:	99 1f       	adc	r25, r25
    4020:	99 27       	eor	r25, r25
    4022:	99 1f       	adc	r25, r25
    4024:	11 96       	adiw	r26, 0x01	; 1
    4026:	9c 93       	st	X, r25
    4028:	11 97       	sbiw	r26, 0x01	; 1
    402a:	21 15       	cp	r18, r1
    402c:	31 05       	cpc	r19, r1
    402e:	a9 f5       	brne	.+106    	; 0x409a <__unpack_f+0x9e>
    4030:	41 15       	cp	r20, r1
    4032:	51 05       	cpc	r21, r1
    4034:	61 05       	cpc	r22, r1
    4036:	71 05       	cpc	r23, r1
    4038:	11 f4       	brne	.+4      	; 0x403e <__unpack_f+0x42>
    403a:	82 e0       	ldi	r24, 0x02	; 2
    403c:	37 c0       	rjmp	.+110    	; 0x40ac <__unpack_f+0xb0>
    403e:	82 e8       	ldi	r24, 0x82	; 130
    4040:	9f ef       	ldi	r25, 0xFF	; 255
    4042:	13 96       	adiw	r26, 0x03	; 3
    4044:	9c 93       	st	X, r25
    4046:	8e 93       	st	-X, r24
    4048:	12 97       	sbiw	r26, 0x02	; 2
    404a:	9a 01       	movw	r18, r20
    404c:	ab 01       	movw	r20, r22
    404e:	67 e0       	ldi	r22, 0x07	; 7
    4050:	22 0f       	add	r18, r18
    4052:	33 1f       	adc	r19, r19
    4054:	44 1f       	adc	r20, r20
    4056:	55 1f       	adc	r21, r21
    4058:	6a 95       	dec	r22
    405a:	d1 f7       	brne	.-12     	; 0x4050 <__unpack_f+0x54>
    405c:	83 e0       	ldi	r24, 0x03	; 3
    405e:	8c 93       	st	X, r24
    4060:	0d c0       	rjmp	.+26     	; 0x407c <__unpack_f+0x80>
    4062:	22 0f       	add	r18, r18
    4064:	33 1f       	adc	r19, r19
    4066:	44 1f       	adc	r20, r20
    4068:	55 1f       	adc	r21, r21
    406a:	12 96       	adiw	r26, 0x02	; 2
    406c:	8d 91       	ld	r24, X+
    406e:	9c 91       	ld	r25, X
    4070:	13 97       	sbiw	r26, 0x03	; 3
    4072:	01 97       	sbiw	r24, 0x01	; 1
    4074:	13 96       	adiw	r26, 0x03	; 3
    4076:	9c 93       	st	X, r25
    4078:	8e 93       	st	-X, r24
    407a:	12 97       	sbiw	r26, 0x02	; 2
    407c:	20 30       	cpi	r18, 0x00	; 0
    407e:	80 e0       	ldi	r24, 0x00	; 0
    4080:	38 07       	cpc	r19, r24
    4082:	80 e0       	ldi	r24, 0x00	; 0
    4084:	48 07       	cpc	r20, r24
    4086:	80 e4       	ldi	r24, 0x40	; 64
    4088:	58 07       	cpc	r21, r24
    408a:	58 f3       	brcs	.-42     	; 0x4062 <__unpack_f+0x66>
    408c:	14 96       	adiw	r26, 0x04	; 4
    408e:	2d 93       	st	X+, r18
    4090:	3d 93       	st	X+, r19
    4092:	4d 93       	st	X+, r20
    4094:	5c 93       	st	X, r21
    4096:	17 97       	sbiw	r26, 0x07	; 7
    4098:	08 95       	ret
    409a:	2f 3f       	cpi	r18, 0xFF	; 255
    409c:	31 05       	cpc	r19, r1
    409e:	79 f4       	brne	.+30     	; 0x40be <__unpack_f+0xc2>
    40a0:	41 15       	cp	r20, r1
    40a2:	51 05       	cpc	r21, r1
    40a4:	61 05       	cpc	r22, r1
    40a6:	71 05       	cpc	r23, r1
    40a8:	19 f4       	brne	.+6      	; 0x40b0 <__unpack_f+0xb4>
    40aa:	84 e0       	ldi	r24, 0x04	; 4
    40ac:	8c 93       	st	X, r24
    40ae:	08 95       	ret
    40b0:	64 ff       	sbrs	r22, 4
    40b2:	03 c0       	rjmp	.+6      	; 0x40ba <__unpack_f+0xbe>
    40b4:	81 e0       	ldi	r24, 0x01	; 1
    40b6:	8c 93       	st	X, r24
    40b8:	12 c0       	rjmp	.+36     	; 0x40de <__unpack_f+0xe2>
    40ba:	1c 92       	st	X, r1
    40bc:	10 c0       	rjmp	.+32     	; 0x40de <__unpack_f+0xe2>
    40be:	2f 57       	subi	r18, 0x7F	; 127
    40c0:	30 40       	sbci	r19, 0x00	; 0
    40c2:	13 96       	adiw	r26, 0x03	; 3
    40c4:	3c 93       	st	X, r19
    40c6:	2e 93       	st	-X, r18
    40c8:	12 97       	sbiw	r26, 0x02	; 2
    40ca:	83 e0       	ldi	r24, 0x03	; 3
    40cc:	8c 93       	st	X, r24
    40ce:	87 e0       	ldi	r24, 0x07	; 7
    40d0:	44 0f       	add	r20, r20
    40d2:	55 1f       	adc	r21, r21
    40d4:	66 1f       	adc	r22, r22
    40d6:	77 1f       	adc	r23, r23
    40d8:	8a 95       	dec	r24
    40da:	d1 f7       	brne	.-12     	; 0x40d0 <__unpack_f+0xd4>
    40dc:	70 64       	ori	r23, 0x40	; 64
    40de:	14 96       	adiw	r26, 0x04	; 4
    40e0:	4d 93       	st	X+, r20
    40e2:	5d 93       	st	X+, r21
    40e4:	6d 93       	st	X+, r22
    40e6:	7c 93       	st	X, r23
    40e8:	17 97       	sbiw	r26, 0x07	; 7
    40ea:	08 95       	ret

000040ec <__fpcmp_parts_f>:
    40ec:	1f 93       	push	r17
    40ee:	dc 01       	movw	r26, r24
    40f0:	fb 01       	movw	r30, r22
    40f2:	9c 91       	ld	r25, X
    40f4:	92 30       	cpi	r25, 0x02	; 2
    40f6:	08 f4       	brcc	.+2      	; 0x40fa <__fpcmp_parts_f+0xe>
    40f8:	47 c0       	rjmp	.+142    	; 0x4188 <__fpcmp_parts_f+0x9c>
    40fa:	80 81       	ld	r24, Z
    40fc:	82 30       	cpi	r24, 0x02	; 2
    40fe:	08 f4       	brcc	.+2      	; 0x4102 <__fpcmp_parts_f+0x16>
    4100:	43 c0       	rjmp	.+134    	; 0x4188 <__fpcmp_parts_f+0x9c>
    4102:	94 30       	cpi	r25, 0x04	; 4
    4104:	51 f4       	brne	.+20     	; 0x411a <__fpcmp_parts_f+0x2e>
    4106:	11 96       	adiw	r26, 0x01	; 1
    4108:	1c 91       	ld	r17, X
    410a:	84 30       	cpi	r24, 0x04	; 4
    410c:	99 f5       	brne	.+102    	; 0x4174 <__fpcmp_parts_f+0x88>
    410e:	81 81       	ldd	r24, Z+1	; 0x01
    4110:	68 2f       	mov	r22, r24
    4112:	70 e0       	ldi	r23, 0x00	; 0
    4114:	61 1b       	sub	r22, r17
    4116:	71 09       	sbc	r23, r1
    4118:	3f c0       	rjmp	.+126    	; 0x4198 <__fpcmp_parts_f+0xac>
    411a:	84 30       	cpi	r24, 0x04	; 4
    411c:	21 f0       	breq	.+8      	; 0x4126 <__fpcmp_parts_f+0x3a>
    411e:	92 30       	cpi	r25, 0x02	; 2
    4120:	31 f4       	brne	.+12     	; 0x412e <__fpcmp_parts_f+0x42>
    4122:	82 30       	cpi	r24, 0x02	; 2
    4124:	b9 f1       	breq	.+110    	; 0x4194 <__fpcmp_parts_f+0xa8>
    4126:	81 81       	ldd	r24, Z+1	; 0x01
    4128:	88 23       	and	r24, r24
    412a:	89 f1       	breq	.+98     	; 0x418e <__fpcmp_parts_f+0xa2>
    412c:	2d c0       	rjmp	.+90     	; 0x4188 <__fpcmp_parts_f+0x9c>
    412e:	11 96       	adiw	r26, 0x01	; 1
    4130:	1c 91       	ld	r17, X
    4132:	11 97       	sbiw	r26, 0x01	; 1
    4134:	82 30       	cpi	r24, 0x02	; 2
    4136:	f1 f0       	breq	.+60     	; 0x4174 <__fpcmp_parts_f+0x88>
    4138:	81 81       	ldd	r24, Z+1	; 0x01
    413a:	18 17       	cp	r17, r24
    413c:	d9 f4       	brne	.+54     	; 0x4174 <__fpcmp_parts_f+0x88>
    413e:	12 96       	adiw	r26, 0x02	; 2
    4140:	2d 91       	ld	r18, X+
    4142:	3c 91       	ld	r19, X
    4144:	13 97       	sbiw	r26, 0x03	; 3
    4146:	82 81       	ldd	r24, Z+2	; 0x02
    4148:	93 81       	ldd	r25, Z+3	; 0x03
    414a:	82 17       	cp	r24, r18
    414c:	93 07       	cpc	r25, r19
    414e:	94 f0       	brlt	.+36     	; 0x4174 <__fpcmp_parts_f+0x88>
    4150:	28 17       	cp	r18, r24
    4152:	39 07       	cpc	r19, r25
    4154:	bc f0       	brlt	.+46     	; 0x4184 <__fpcmp_parts_f+0x98>
    4156:	14 96       	adiw	r26, 0x04	; 4
    4158:	8d 91       	ld	r24, X+
    415a:	9d 91       	ld	r25, X+
    415c:	0d 90       	ld	r0, X+
    415e:	bc 91       	ld	r27, X
    4160:	a0 2d       	mov	r26, r0
    4162:	24 81       	ldd	r18, Z+4	; 0x04
    4164:	35 81       	ldd	r19, Z+5	; 0x05
    4166:	46 81       	ldd	r20, Z+6	; 0x06
    4168:	57 81       	ldd	r21, Z+7	; 0x07
    416a:	28 17       	cp	r18, r24
    416c:	39 07       	cpc	r19, r25
    416e:	4a 07       	cpc	r20, r26
    4170:	5b 07       	cpc	r21, r27
    4172:	18 f4       	brcc	.+6      	; 0x417a <__fpcmp_parts_f+0x8e>
    4174:	11 23       	and	r17, r17
    4176:	41 f0       	breq	.+16     	; 0x4188 <__fpcmp_parts_f+0x9c>
    4178:	0a c0       	rjmp	.+20     	; 0x418e <__fpcmp_parts_f+0xa2>
    417a:	82 17       	cp	r24, r18
    417c:	93 07       	cpc	r25, r19
    417e:	a4 07       	cpc	r26, r20
    4180:	b5 07       	cpc	r27, r21
    4182:	40 f4       	brcc	.+16     	; 0x4194 <__fpcmp_parts_f+0xa8>
    4184:	11 23       	and	r17, r17
    4186:	19 f0       	breq	.+6      	; 0x418e <__fpcmp_parts_f+0xa2>
    4188:	61 e0       	ldi	r22, 0x01	; 1
    418a:	70 e0       	ldi	r23, 0x00	; 0
    418c:	05 c0       	rjmp	.+10     	; 0x4198 <__fpcmp_parts_f+0xac>
    418e:	6f ef       	ldi	r22, 0xFF	; 255
    4190:	7f ef       	ldi	r23, 0xFF	; 255
    4192:	02 c0       	rjmp	.+4      	; 0x4198 <__fpcmp_parts_f+0xac>
    4194:	60 e0       	ldi	r22, 0x00	; 0
    4196:	70 e0       	ldi	r23, 0x00	; 0
    4198:	cb 01       	movw	r24, r22
    419a:	1f 91       	pop	r17
    419c:	08 95       	ret

0000419e <__udivmodhi4>:
    419e:	aa 1b       	sub	r26, r26
    41a0:	bb 1b       	sub	r27, r27
    41a2:	51 e1       	ldi	r21, 0x11	; 17
    41a4:	07 c0       	rjmp	.+14     	; 0x41b4 <__udivmodhi4_ep>

000041a6 <__udivmodhi4_loop>:
    41a6:	aa 1f       	adc	r26, r26
    41a8:	bb 1f       	adc	r27, r27
    41aa:	a6 17       	cp	r26, r22
    41ac:	b7 07       	cpc	r27, r23
    41ae:	10 f0       	brcs	.+4      	; 0x41b4 <__udivmodhi4_ep>
    41b0:	a6 1b       	sub	r26, r22
    41b2:	b7 0b       	sbc	r27, r23

000041b4 <__udivmodhi4_ep>:
    41b4:	88 1f       	adc	r24, r24
    41b6:	99 1f       	adc	r25, r25
    41b8:	5a 95       	dec	r21
    41ba:	a9 f7       	brne	.-22     	; 0x41a6 <__udivmodhi4_loop>
    41bc:	80 95       	com	r24
    41be:	90 95       	com	r25
    41c0:	bc 01       	movw	r22, r24
    41c2:	cd 01       	movw	r24, r26
    41c4:	08 95       	ret

000041c6 <__prologue_saves__>:
    41c6:	2f 92       	push	r2
    41c8:	3f 92       	push	r3
    41ca:	4f 92       	push	r4
    41cc:	5f 92       	push	r5
    41ce:	6f 92       	push	r6
    41d0:	7f 92       	push	r7
    41d2:	8f 92       	push	r8
    41d4:	9f 92       	push	r9
    41d6:	af 92       	push	r10
    41d8:	bf 92       	push	r11
    41da:	cf 92       	push	r12
    41dc:	df 92       	push	r13
    41de:	ef 92       	push	r14
    41e0:	ff 92       	push	r15
    41e2:	0f 93       	push	r16
    41e4:	1f 93       	push	r17
    41e6:	cf 93       	push	r28
    41e8:	df 93       	push	r29
    41ea:	cd b7       	in	r28, 0x3d	; 61
    41ec:	de b7       	in	r29, 0x3e	; 62
    41ee:	ca 1b       	sub	r28, r26
    41f0:	db 0b       	sbc	r29, r27
    41f2:	0f b6       	in	r0, 0x3f	; 63
    41f4:	f8 94       	cli
    41f6:	de bf       	out	0x3e, r29	; 62
    41f8:	0f be       	out	0x3f, r0	; 63
    41fa:	cd bf       	out	0x3d, r28	; 61
    41fc:	19 94       	eijmp

000041fe <__epilogue_restores__>:
    41fe:	2a 88       	ldd	r2, Y+18	; 0x12
    4200:	39 88       	ldd	r3, Y+17	; 0x11
    4202:	48 88       	ldd	r4, Y+16	; 0x10
    4204:	5f 84       	ldd	r5, Y+15	; 0x0f
    4206:	6e 84       	ldd	r6, Y+14	; 0x0e
    4208:	7d 84       	ldd	r7, Y+13	; 0x0d
    420a:	8c 84       	ldd	r8, Y+12	; 0x0c
    420c:	9b 84       	ldd	r9, Y+11	; 0x0b
    420e:	aa 84       	ldd	r10, Y+10	; 0x0a
    4210:	b9 84       	ldd	r11, Y+9	; 0x09
    4212:	c8 84       	ldd	r12, Y+8	; 0x08
    4214:	df 80       	ldd	r13, Y+7	; 0x07
    4216:	ee 80       	ldd	r14, Y+6	; 0x06
    4218:	fd 80       	ldd	r15, Y+5	; 0x05
    421a:	0c 81       	ldd	r16, Y+4	; 0x04
    421c:	1b 81       	ldd	r17, Y+3	; 0x03
    421e:	aa 81       	ldd	r26, Y+2	; 0x02
    4220:	b9 81       	ldd	r27, Y+1	; 0x01
    4222:	ce 0f       	add	r28, r30
    4224:	d1 1d       	adc	r29, r1
    4226:	0f b6       	in	r0, 0x3f	; 63
    4228:	f8 94       	cli
    422a:	de bf       	out	0x3e, r29	; 62
    422c:	0f be       	out	0x3f, r0	; 63
    422e:	cd bf       	out	0x3d, r28	; 61
    4230:	ed 01       	movw	r28, r26
    4232:	08 95       	ret

00004234 <_exit>:
    4234:	f8 94       	cli

00004236 <__stop_program>:
    4236:	ff cf       	rjmp	.-2      	; 0x4236 <__stop_program>
